/* Generated By:JavaCC: Do not edit this line. Erlang.java */
package erlang.parser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class Erlang implements ErlangConstants {
  public static void main(String args[]) throws IOException {
        Erlang parser = new Erlang(System.in);
        if (args.length == 1) {
            System.out.println("Parser:  Reading from folder " + args[0] + " . . .");
            File[] files = getFiles(args[0]);
            FileWriter fw = new FileWriter("metrics.csv", false);
            fw.write("File Name, Lines of Code, Number of Comments, Number of Modules, Number of Imports, Number of Exports\u005cn");
            gather_metrics(files, fw);
            fw.close();

        } else return;
    }

    static void gather_metrics(File[] files, FileWriter metrics) throws IOException {
        String code = "";
        int linesOfCode;
        int numberOfComments;
        int numberOfModules;
        int numberOfImports;
        int numberOfExports;
        for (int i = 0; i < files.length; i++) {
            code = getStringFromFile(files[i]);
            linesOfCode = getLinesOfCode(code);
            numberOfComments = getNumberOfComments(code);
            numberOfImports = getNumberOfImports(code);
                numberOfExports = getNumberOfExports(code);
                numberOfModules = getNumberOfModules(code);
            metrics.write(files[i].getName() + "," + linesOfCode + "," + numberOfComments + "," + numberOfModules + "," + numberOfImports + "," + numberOfExports + "\u005cn");

        }
    }

    static File[] getFiles(String folder) throws IOException {
        File dir = new File(folder);
        File[] files = dir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".erl");
            }
        });
        return files;
    }

    public static String getStringFromFile(File file) throws IOException {
        String code = "";
        InputStream is = new FileInputStream(file);
        BufferedReader buf = new BufferedReader(new InputStreamReader(is));
        String line = buf.readLine();
        StringBuilder sb = new StringBuilder();
        while (line != null) {
            sb.append(line).append("\u005cn");
            line = buf.readLine();
        }
        code = sb.toString();
        buf.close();
        return code;
    }

    public static int getLinesOfCode(String code) {
        String[] lines = code.split("\u005cr\u005cn|\u005cr|\u005cn");
        return lines.length;
    }

    public static int getNumberOfComments(String code) {
        Pattern pattern = Pattern.compile("% [^\u005cr\u005cn]*\u005cr?\u005cn");
        Matcher matcher = pattern.matcher(code);

        int count = 0;
        while (matcher.find())
            count++;

        return count;
    }
    public static int getNumberOfImports(String code) {
        Pattern pattern = Pattern.compile("-import([^\u005cr\u005cn]*).");
        Matcher matcher = pattern.matcher(code);

        int count = 0;
        while (matcher.find())
            count++;

        return count;
    }
    public static int getNumberOfExports(String code) {
        Pattern pattern = Pattern.compile("-export([^\u005cr\u005cn]*).");
        Matcher matcher = pattern.matcher(code);

        int count = 0;
        while (matcher.find())
            count++;

        return count;
    }
    public static int getNumberOfModules(String code) {
        Pattern pattern = Pattern.compile("-[a-z]+([^\u005cr\u005cn]*).");
        Matcher matcher = pattern.matcher(code);

        int count = 0;
        while (matcher.find())
            count++;

        return count;
    }

/** Nonterminals */
  final public void forms() throws ParseException {
    trace_call("forms");
    try {
      label_1:
      while (true) {
        form();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOKEN_MINUS:
        case TOKEN_ATOM:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
    } finally {
      trace_return("forms");
    }
  }

  final public void form() throws ParseException {
    trace_call("form");
    try {
      if (jj_2_1(1000)) {
        attribute();
        jj_consume_token(TOKEN_DOT);
      } else if (jj_2_2(1000)) {
        function();
        jj_consume_token(TOKEN_DOT);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("form");
    }
  }

  final public void attribute() throws ParseException {
    trace_call("attribute");
    try {
      if (jj_2_3(1000)) {
        jj_consume_token(TOKEN_MINUS);
        jj_consume_token(TOKEN_ATOM);
        attr_val();
      } else if (jj_2_4(1000)) {
        jj_consume_token(TOKEN_MINUS);
        jj_consume_token(TOKEN_ATOM);
        typed_attr_val();
      } else if (jj_2_5(1000)) {
        jj_consume_token(TOKEN_MINUS);
        jj_consume_token(TOKEN_ATOM);
        jj_consume_token(TOKEN_LPAREN);
        typed_attr_val();
        jj_consume_token(TOKEN_RPAREN);
      } else if (jj_2_6(2)) {
        jj_consume_token(TOKEN_MINUS);
        jj_consume_token(TOKEN_SPEC);
        type_spec();
      } else if (jj_2_7(2)) {
        jj_consume_token(TOKEN_MINUS);
        jj_consume_token(TOKEN_CALLBACK);
        type_spec();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("attribute");
    }
  }

  final public void attr_val() throws ParseException {
    trace_call("attr_val");
    try {
      if (jj_2_10(1000)) {
        expr();
        if (jj_2_8(2)) {
          jj_consume_token(TOKEN_COMMA);
          exprs();
        } else {
          ;
        }
      } else if (jj_2_11(1000)) {
        jj_consume_token(TOKEN_LPAREN);
        expr();
        if (jj_2_9(2)) {
          jj_consume_token(TOKEN_COMMA);
          exprs();
        } else {
          ;
        }
        jj_consume_token(TOKEN_RPAREN);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("attr_val");
    }
  }

  final public void function() throws ParseException {
    trace_call("function");
    try {
      function_clauses();
    } finally {
      trace_return("function");
    }
  }

  final public void function_clauses() throws ParseException {
    trace_call("function_clauses");
    try {
      function_clause();
      label_2:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(TOKEN_SEMICOLON);
        function_clause();
      }
    } finally {
      trace_return("function_clauses");
    }
  }

  final public void function_clause() throws ParseException {
    trace_call("function_clause");
    try {
      jj_consume_token(TOKEN_ATOM);
      clause_args();
      if (jj_2_13(1000)) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_WHEN:
        clause_guard();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      clause_body();
    } finally {
      trace_return("function_clause");
    }
  }

  final public void clause_args() throws ParseException {
    trace_call("clause_args");
    try {
      argument_list();
    } finally {
      trace_return("clause_args");
    }
  }

  final public void clause_guard() throws ParseException {
    trace_call("clause_guard");
    try {
      jj_consume_token(TOKEN_WHEN);
      guard();
    } finally {
      trace_return("clause_guard");
    }
  }

  final public void clause_body() throws ParseException {
    trace_call("clause_body");
    try {
      jj_consume_token(TOKEN_MINUSGREATER);
      exprs();
    } finally {
      trace_return("clause_body");
    }
  }

  final public void expr() throws ParseException {
    trace_call("expr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_CATCH:
        jj_consume_token(TOKEN_CATCH);
        expr();
        break;
      case TOKEN_LPAREN:
      case TOKEN_LCURLYBRACE:
      case TOKEN_LSQUAREPAREN:
      case TOKEN_HASH:
      case TOKEN_BEGIN:
      case TOKEN_CASE:
      case TOKEN_TRY:
      case TOKEN_FUN:
      case TOKEN_IF:
      case TOKEN_RECEIVE:
      case TOKEN_BNOT:
      case TOKEN_NOT:
      case TOKEN_PLUS:
      case TOKEN_MINUS:
      case TOKEN_LESSLESS:
      case TOKEN_CHAR:
      case TOKEN_INTEGER:
      case TOKEN_FLOAT:
      case TOKEN_ATOM:
      case TOKEN_STRING:
      case TOKEN_VAR:
        expr_100();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expr");
    }
  }

  final public void expr_100() throws ParseException {
    trace_call("expr_100");
    try {
      if (jj_2_15(1000)) {
        expr_150();
        if (jj_2_14(1000)) {
          jj_consume_token(TOKEN_EQUAL);
          expr_100();
        } else {
          ;
        }
      } else if (jj_2_16(1000)) {
        expr_150();
        jj_consume_token(TOKEN_EXCLAMATION);
        expr_100();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expr_100");
    }
  }

  final public void expr_150() throws ParseException {
    trace_call("expr_150");
    try {
      expr_160();
      if (jj_2_17(1000)) {
        jj_consume_token(TOKEN_ORELSE);
        expr_150();
      } else {
        ;
      }
    } finally {
      trace_return("expr_150");
    }
  }

  final public void expr_160() throws ParseException {
    trace_call("expr_160");
    try {
      expr_200();
      if (jj_2_18(1000)) {
        jj_consume_token(TOKEN_ANDALSO);
        expr_160();
      } else {
        ;
      }
    } finally {
      trace_return("expr_160");
    }
  }

  final public void expr_200() throws ParseException {
    trace_call("expr_200");
    try {
      expr_300();
      if (jj_2_19(1000)) {
        comp_op();
        expr_300();
      } else {
        ;
      }
    } finally {
      trace_return("expr_200");
    }
  }

  final public void expr_300() throws ParseException {
    trace_call("expr_300");
    try {
      expr_400();
      if (jj_2_20(1000)) {
        list_op();
        expr_300();
      } else {
        ;
      }
    } finally {
      trace_return("expr_300");
    }
  }

  final public void expr_400() throws ParseException {
    trace_call("expr_400");
    try {
      expr_500();
      label_3:
      while (true) {
        if (jj_2_21(1000)) {
          ;
        } else {
          break label_3;
        }
        add_op();
        expr_500();
      }
    } finally {
      trace_return("expr_400");
    }
  }

  final public void expr_500() throws ParseException {
    trace_call("expr_500");
    try {
      expr_600();
      label_4:
      while (true) {
        if (jj_2_22(1000)) {
          ;
        } else {
          break label_4;
        }
        mult_op();
        expr_600();
      }
    } finally {
      trace_return("expr_500");
    }
  }

  final public void expr_600() throws ParseException {
    trace_call("expr_600");
    try {
      if (jj_2_23(1000)) {
        prefix_op();
        expr_700();
      } else if (jj_2_24(1000)) {
        map_expr();
      } else if (jj_2_25(1000)) {
        expr_700();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expr_600");
    }
  }

  final public void expr_700() throws ParseException {
    trace_call("expr_700");
    try {
      if (jj_2_26(1000)) {
        function_call();
      } else if (jj_2_27(1000)) {
        record_expr();
      } else if (jj_2_28(1000)) {
        expr_800();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expr_700");
    }
  }

  final public void expr_800() throws ParseException {
    trace_call("expr_800");
    try {
      if (jj_2_29(1000)) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr_max();
      if (jj_2_30(2)) {
        jj_consume_token(TOKEN_COLON);
        expr_max();
      } else {
        ;
      }
    } finally {
      trace_return("expr_800");
    }
  }

  final public void expr_max() throws ParseException {
    trace_call("expr_max");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_VAR:
        jj_consume_token(TOKEN_VAR);
        break;
      case TOKEN_CHAR:
      case TOKEN_INTEGER:
      case TOKEN_FLOAT:
      case TOKEN_ATOM:
      case TOKEN_STRING:
        atomic();
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_31(1000)) {
          list();
        } else if (jj_2_32(1000)) {
          binary();
        } else if (jj_2_33(1000)) {
          list_comprehension();
        } else if (jj_2_34(1000)) {
          binary_comprehension();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOKEN_LCURLYBRACE:
            tuple();
            break;
          case TOKEN_LPAREN:
            jj_consume_token(TOKEN_LPAREN);
            expr();
            jj_consume_token(TOKEN_RPAREN);
            break;
          case TOKEN_BEGIN:
            jj_consume_token(TOKEN_BEGIN);
            exprs();
            jj_consume_token(TOKEN_END);
            break;
          case TOKEN_IF:
            if_expr();
            break;
          case TOKEN_CASE:
            case_expr();
            break;
          case TOKEN_RECEIVE:
            receive_expr();
            break;
          case TOKEN_FUN:
            fun_expr();
            break;
          case TOKEN_TRY:
            try_expr();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("expr_max");
    }
  }

  final public void list() throws ParseException {
    trace_call("list");
    try {
      if (jj_2_35(2)) {
        jj_consume_token(TOKEN_LSQUAREPAREN);
        jj_consume_token(TOKEN_RSQUAREPAREN);
      } else if (jj_2_36(1000)) {
        jj_consume_token(TOKEN_LSQUAREPAREN);
        expr();
        tail();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("list");
    }
  }

  final public void tail() throws ParseException {
    trace_call("tail");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_RSQUAREPAREN:
        jj_consume_token(TOKEN_RSQUAREPAREN);
        break;
      case TOKEN_OR:
        jj_consume_token(TOKEN_OR);
        expr();
        jj_consume_token(TOKEN_RSQUAREPAREN);
        break;
      case TOKEN_COMMA:
        jj_consume_token(TOKEN_COMMA);
        expr();
        tail();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tail");
    }
  }

  final public void list_comprehension() throws ParseException {
    trace_call("list_comprehension");
    try {
      jj_consume_token(TOKEN_LSQUAREPAREN);
      expr();
      jj_consume_token(TOKEN_OROR);
      lc_exprs();
      jj_consume_token(TOKEN_RSQUAREPAREN);
    } finally {
      trace_return("list_comprehension");
    }
  }

  final public void lc_exprs() throws ParseException {
    trace_call("lc_exprs");
    try {
      lc_expr();
      label_5:
      while (true) {
        if (jj_2_37(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(TOKEN_COMMA);
        lc_expr();
      }
    } finally {
      trace_return("lc_exprs");
    }
  }

  final public void lc_expr() throws ParseException {
    trace_call("lc_expr");
    try {
      if (jj_2_39(1000)) {
        expr();
        if (jj_2_38(2)) {
          jj_consume_token(TOKEN_LESSMINUS);
          expr();
        } else {
          ;
        }
      } else if (jj_2_40(1000)) {
        binary();
        jj_consume_token(TOKEN_LESSEQUAL);
        expr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("lc_expr");
    }
  }

  final public void binary_comprehension() throws ParseException {
    trace_call("binary_comprehension");
    try {
      jj_consume_token(TOKEN_LESSLESS);
      expr_max();
      jj_consume_token(TOKEN_OROR);
      lc_exprs();
      jj_consume_token(TOKEN_GREATERGREATER);
    } finally {
      trace_return("binary_comprehension");
    }
  }

  final public void tuple() throws ParseException {
    trace_call("tuple");
    try {
      if (jj_2_41(2)) {
        jj_consume_token(TOKEN_LCURLYBRACE);
        jj_consume_token(TOKEN_RCURLYBRACE);
      } else if (jj_2_42(2)) {
        jj_consume_token(TOKEN_LCURLYBRACE);
        exprs();
        jj_consume_token(TOKEN_RCURLYBRACE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tuple");
    }
  }

  final public void record_expr() throws ParseException {
    trace_call("record_expr");
    try {
      if (jj_2_43(1000)) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_44(2)) {
        expr_max();
      } else {
        ;
      }
      jj_consume_token(TOKEN_HASH);
      jj_consume_token(TOKEN_ATOM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_DOT:
        jj_consume_token(TOKEN_DOT);
        jj_consume_token(TOKEN_ATOM);
        break;
      default:
        jj_la1[6] = jj_gen;
        if (jj_2_45(1000)) {
          record_tuple();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOKEN_HASH:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        jj_consume_token(TOKEN_HASH);
        jj_consume_token(TOKEN_ATOM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOKEN_DOT:
          jj_consume_token(TOKEN_DOT);
          jj_consume_token(TOKEN_ATOM);
          break;
        case TOKEN_LCURLYBRACE:
          record_tuple();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("record_expr");
    }
  }

  final public void record_tuple() throws ParseException {
    trace_call("record_tuple");
    try {
      if (jj_2_46(1000)) {
        jj_consume_token(TOKEN_LCURLYBRACE);
        jj_consume_token(TOKEN_RCURLYBRACE);
      } else if (jj_2_47(1000)) {
        jj_consume_token(TOKEN_LCURLYBRACE);
        record_fields();
        jj_consume_token(TOKEN_RCURLYBRACE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("record_tuple");
    }
  }

  final public void record_fields() throws ParseException {
    trace_call("record_fields");
    try {
      record_field();
      label_7:
      while (true) {
        if (jj_2_48(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(TOKEN_COMMA);
        record_field();
      }
    } finally {
      trace_return("record_fields");
    }
  }

  final public void record_field() throws ParseException {
    trace_call("record_field");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_VAR:
        jj_consume_token(TOKEN_VAR);
        jj_consume_token(TOKEN_EQUAL);
        expr();
        break;
      case TOKEN_ATOM:
        jj_consume_token(TOKEN_ATOM);
        jj_consume_token(TOKEN_EQUAL);
        expr();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("record_field");
    }
  }

  final public void map_expr() throws ParseException {
    trace_call("map_expr");
    try {
      if (jj_2_51(1000)) {
        jj_consume_token(TOKEN_HASH);
        map_tuple();
        label_8:
        while (true) {
          if (jj_2_49(1000)) {
            ;
          } else {
            break label_8;
          }
          jj_consume_token(TOKEN_HASH);
          map_tuple();
        }
      } else if (jj_2_52(1000)) {
        expr_max();
        jj_consume_token(TOKEN_HASH);
        map_tuple();
        label_9:
        while (true) {
          if (jj_2_50(1000)) {
            ;
          } else {
            break label_9;
          }
          jj_consume_token(TOKEN_HASH);
          map_tuple();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("map_expr");
    }
  }

  final public void map_tuple() throws ParseException {
    trace_call("map_tuple");
    try {
      if (jj_2_53(2)) {
        jj_consume_token(TOKEN_LCURLYBRACE);
        jj_consume_token(TOKEN_RCURLYBRACE);
      } else if (jj_2_54(2)) {
        jj_consume_token(TOKEN_LCURLYBRACE);
        map_fields();
        jj_consume_token(TOKEN_RCURLYBRACE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("map_tuple");
    }
  }

  final public void map_field() throws ParseException {
    trace_call("map_field");
    try {
      if (jj_2_55(1000)) {
        map_field_assoc();
      } else if (jj_2_56(1000)) {
        map_field_exact();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("map_field");
    }
  }

  final public void map_field_assoc() throws ParseException {
    trace_call("map_field_assoc");
    try {
      map_key();
      jj_consume_token(TOKEN_EQUALGREATER);
      expr();
    } finally {
      trace_return("map_field_assoc");
    }
  }

  final public void map_field_exact() throws ParseException {
    trace_call("map_field_exact");
    try {
      map_key();
      jj_consume_token(TOKEN_COLONEQUAL);
      expr();
    } finally {
      trace_return("map_field_exact");
    }
  }

  final public void map_fields() throws ParseException {
    trace_call("map_fields");
    try {
      map_field();
      label_10:
      while (true) {
        if (jj_2_57(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(TOKEN_COMMA);
        map_field();
      }
    } finally {
      trace_return("map_fields");
    }
  }

  final public void map_key() throws ParseException {
    trace_call("map_key");
    try {
      expr();
    } finally {
      trace_return("map_key");
    }
  }

  final public void if_expr() throws ParseException {
    trace_call("if_expr");
    try {
      jj_consume_token(TOKEN_IF);
      if_clauses();
      jj_consume_token(TOKEN_END);
    } finally {
      trace_return("if_expr");
    }
  }

  final public void if_clauses() throws ParseException {
    trace_call("if_clauses");
    try {
      if_clause();
      label_11:
      while (true) {
        if (jj_2_58(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(TOKEN_SEMICOLON);
        if_clause();
      }
    } finally {
      trace_return("if_clauses");
    }
  }

  final public void if_clause() throws ParseException {
    trace_call("if_clause");
    try {
      guard();
      clause_body();
    } finally {
      trace_return("if_clause");
    }
  }

  final public void case_expr() throws ParseException {
    trace_call("case_expr");
    try {
      jj_consume_token(TOKEN_CASE);
      expr();
      jj_consume_token(TOKEN_OF);
      cr_clauses();
      jj_consume_token(TOKEN_END);
    } finally {
      trace_return("case_expr");
    }
  }

  final public void cr_clauses() throws ParseException {
    trace_call("cr_clauses");
    try {
      cr_clause();
      label_12:
      while (true) {
        if (jj_2_59(2)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(TOKEN_SEMICOLON);
        cr_clauses();
      }
    } finally {
      trace_return("cr_clauses");
    }
  }

  final public void cr_clause() throws ParseException {
    trace_call("cr_clause");
    try {
      expr();
      clause_guard();
      clause_body();
    } finally {
      trace_return("cr_clause");
    }
  }

  final public void receive_expr() throws ParseException {
    trace_call("receive_expr");
    try {
      if (jj_2_60(3)) {
        jj_consume_token(TOKEN_RECEIVE);
        cr_clauses();
        jj_consume_token(TOKEN_END);
      } else if (jj_2_61(2)) {
        jj_consume_token(TOKEN_RECEIVE);
        jj_consume_token(TOKEN_AFTER);
        expr();
        clause_body();
        jj_consume_token(TOKEN_END);
      } else if (jj_2_62(2)) {
        jj_consume_token(TOKEN_RECEIVE);
        cr_clauses();
        jj_consume_token(TOKEN_AFTER);
        expr();
        clause_body();
        jj_consume_token(TOKEN_END);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("receive_expr");
    }
  }

  final public void fun_expr() throws ParseException {
    trace_call("fun_expr");
    try {
      if (jj_2_63(3)) {
        jj_consume_token(TOKEN_FUN);
        jj_consume_token(TOKEN_ATOM);
        jj_consume_token(TOKEN_DIV);
        jj_consume_token(TOKEN_INTEGER);
      } else if (jj_2_64(3)) {
        jj_consume_token(TOKEN_FUN);
        atom_or_var();
        jj_consume_token(TOKEN_COLON);
        atom_or_var();
        jj_consume_token(TOKEN_DIV);
        integer_or_var();
      } else if (jj_2_65(3)) {
        jj_consume_token(TOKEN_FUN);
        fun_clauses();
        jj_consume_token(TOKEN_END);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("fun_expr");
    }
  }

  final public void fun_clause() throws ParseException {
    trace_call("fun_clause");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_LPAREN:
        argument_list();
        clause_guard();
        clause_body();
        break;
      case TOKEN_VAR:
        jj_consume_token(TOKEN_VAR);
        argument_list();
        clause_guard();
        clause_body();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("fun_clause");
    }
  }

  final public void fun_clauses() throws ParseException {
    trace_call("fun_clauses");
    try {
      fun_clause();
      label_13:
      while (true) {
        if (jj_2_66(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(TOKEN_SEMICOLON);
        fun_clause();
      }
    } finally {
      trace_return("fun_clauses");
    }
  }

  final public void atom_or_var() throws ParseException {
    trace_call("atom_or_var");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_ATOM:
        jj_consume_token(TOKEN_ATOM);
        break;
      case TOKEN_VAR:
        jj_consume_token(TOKEN_VAR);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("atom_or_var");
    }
  }

  final public void integer_or_var() throws ParseException {
    trace_call("integer_or_var");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_INTEGER:
        jj_consume_token(TOKEN_INTEGER);
        break;
      case TOKEN_VAR:
        jj_consume_token(TOKEN_VAR);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("integer_or_var");
    }
  }

  final public void try_expr() throws ParseException {
    trace_call("try_expr");
    try {
      if (jj_2_67(1000)) {
        jj_consume_token(TOKEN_TRY);
        exprs();
        jj_consume_token(TOKEN_OF);
        cr_clauses();
        try_catch();
      } else if (jj_2_68(1000)) {
        jj_consume_token(TOKEN_TRY);
        exprs();
        try_catch();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("try_expr");
    }
  }

  final public void try_catch() throws ParseException {
    trace_call("try_catch");
    try {
      if (jj_2_69(1000)) {
        jj_consume_token(TOKEN_CATCH);
        try_clauses();
        jj_consume_token(TOKEN_AFTER);
        exprs();
        jj_consume_token(TOKEN_END);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOKEN_AFTER:
          jj_consume_token(TOKEN_AFTER);
          exprs();
          jj_consume_token(TOKEN_END);
          break;
        default:
          jj_la1[13] = jj_gen;
          if (jj_2_70(1000)) {
            jj_consume_token(TOKEN_CATCH);
            try_clauses();
            jj_consume_token(TOKEN_END);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("try_catch");
    }
  }

  final public void try_clause() throws ParseException {
    trace_call("try_clause");
    try {
      if (jj_2_71(1000)) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_72(2)) {
        atom_or_var();
        jj_consume_token(TOKEN_COLON);
      } else {
        ;
      }
      expr();
      clause_guard();
      clause_body();
    } finally {
      trace_return("try_clause");
    }
  }

  final public void try_clauses() throws ParseException {
    trace_call("try_clauses");
    try {
      try_clause();
      label_14:
      while (true) {
        if (jj_2_73(2)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(TOKEN_SEMICOLON);
        try_clause();
      }
    } finally {
      trace_return("try_clauses");
    }
  }

  final public void function_call() throws ParseException {
    trace_call("function_call");
    try {
      expr_800();
      argument_list();
    } finally {
      trace_return("function_call");
    }
  }

  final public void argument_list() throws ParseException {
    trace_call("argument_list");
    try {
      if (jj_2_74(2)) {
        jj_consume_token(TOKEN_LPAREN);
        jj_consume_token(TOKEN_RPAREN);
      } else if (jj_2_75(1000)) {
        jj_consume_token(TOKEN_LPAREN);
        exprs();
        jj_consume_token(TOKEN_RPAREN);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("argument_list");
    }
  }

  final public void exprs() throws ParseException {
    trace_call("exprs");
    try {
      expr();
      label_15:
      while (true) {
        if (jj_2_76(2)) {
          ;
        } else {
          break label_15;
        }
        jj_consume_token(TOKEN_COMMA);
        expr();
      }
    } finally {
      trace_return("exprs");
    }
  }

  final public void guard() throws ParseException {
    trace_call("guard");
    try {
      exprs();
      label_16:
      while (true) {
        if (jj_2_77(2)) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(TOKEN_SEMICOLON);
        exprs();
      }
    } finally {
      trace_return("guard");
    }
  }

  final public void atomic() throws ParseException {
    trace_call("atomic");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_CHAR:
        jj_consume_token(TOKEN_CHAR);
        break;
      case TOKEN_INTEGER:
        jj_consume_token(TOKEN_INTEGER);
        break;
      case TOKEN_FLOAT:
        jj_consume_token(TOKEN_FLOAT);
        break;
      case TOKEN_ATOM:
        jj_consume_token(TOKEN_ATOM);
        break;
      case TOKEN_STRING:
        strings();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("atomic");
    }
  }

  final public void strings() throws ParseException {
    trace_call("strings");
    try {
      if (jj_2_78(2)) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(TOKEN_STRING);
      label_17:
      while (true) {
        if (jj_2_79(2)) {
          ;
        } else {
          break label_17;
        }
        jj_consume_token(TOKEN_STRING);
      }
    } finally {
      trace_return("strings");
    }
  }

  final public void prefix_op() throws ParseException {
    trace_call("prefix_op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_PLUS:
        jj_consume_token(TOKEN_PLUS);
        break;
      case TOKEN_MINUS:
        jj_consume_token(TOKEN_MINUS);
        break;
      case TOKEN_BNOT:
        jj_consume_token(TOKEN_BNOT);
        break;
      case TOKEN_NOT:
        jj_consume_token(TOKEN_NOT);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("prefix_op");
    }
  }

  final public void mult_op() throws ParseException {
    trace_call("mult_op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_DIV:
        jj_consume_token(TOKEN_DIV);
        break;
      case TOKEN_MULT:
        jj_consume_token(TOKEN_MULT);
        break;
      case TOKEN_DIVINT:
        jj_consume_token(TOKEN_DIVINT);
        break;
      case TOKEN_REM:
        jj_consume_token(TOKEN_REM);
        break;
      case TOKEN_BAND:
        jj_consume_token(TOKEN_BAND);
        break;
      case TOKEN_AND:
        jj_consume_token(TOKEN_AND);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("mult_op");
    }
  }

  final public void add_op() throws ParseException {
    trace_call("add_op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_PLUS:
        jj_consume_token(TOKEN_PLUS);
        break;
      case TOKEN_MINUS:
        jj_consume_token(TOKEN_MINUS);
        break;
      case TOKEN_BOR:
        jj_consume_token(TOKEN_BOR);
        break;
      case TOKEN_BXOR:
        jj_consume_token(TOKEN_BXOR);
        break;
      case TOKEN_BSL:
        jj_consume_token(TOKEN_BSL);
        break;
      case TOKEN_BSR:
        jj_consume_token(TOKEN_BSR);
        break;
      case TOKEN_ORW:
        jj_consume_token(TOKEN_ORW);
        break;
      case TOKEN_XOR:
        jj_consume_token(TOKEN_XOR);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("add_op");
    }
  }

  final public void list_op() throws ParseException {
    trace_call("list_op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_PLUSPLUS:
        jj_consume_token(TOKEN_PLUSPLUS);
        break;
      case TOKEN_MINUSMINUS:
        jj_consume_token(TOKEN_MINUSMINUS);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("list_op");
    }
  }

  final public void comp_op() throws ParseException {
    trace_call("comp_op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_EQUALEQUAL:
        jj_consume_token(TOKEN_EQUALEQUAL);
        break;
      case TOKEN_NOTEQUAL:
        jj_consume_token(TOKEN_NOTEQUAL);
        break;
      case TOKEN_EQUALORLESS:
        jj_consume_token(TOKEN_EQUALORLESS);
        break;
      case TOKEN_LESS:
        jj_consume_token(TOKEN_LESS);
        break;
      case TOKEN_GREATEROREQUAL:
        jj_consume_token(TOKEN_GREATEROREQUAL);
        break;
      case TOKEN_GREATER:
        jj_consume_token(TOKEN_GREATER);
        break;
      case TOKEN_EXACTLYEQUAL:
        jj_consume_token(TOKEN_EXACTLYEQUAL);
        break;
      case TOKEN_EXACTLYNOTEQUAL:
        jj_consume_token(TOKEN_EXACTLYNOTEQUAL);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("comp_op");
    }
  }

  final public void binary() throws ParseException {
    trace_call("binary");
    try {
      if (jj_2_80(2)) {
        jj_consume_token(TOKEN_LESSLESS);
        jj_consume_token(TOKEN_GREATERGREATER);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOKEN_LESSLESS:
          jj_consume_token(TOKEN_LESSLESS);
          bin_elements();
          jj_consume_token(TOKEN_GREATERGREATER);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("binary");
    }
  }

  final public void bin_elements() throws ParseException {
    trace_call("bin_elements");
    try {
      bin_element();
      label_18:
      while (true) {
        if (jj_2_81(2)) {
          ;
        } else {
          break label_18;
        }
        jj_consume_token(TOKEN_COMMA);
        bin_element();
      }
    } finally {
      trace_return("bin_elements");
    }
  }

  final public void bin_element() throws ParseException {
    trace_call("bin_element");
    try {
      bit_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_COLON:
        opt_bit_size_expr();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_DIV:
        opt_bit_type_list();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } finally {
      trace_return("bin_element");
    }
  }

  final public void bit_expr() throws ParseException {
    trace_call("bit_expr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_BNOT:
      case TOKEN_NOT:
      case TOKEN_PLUS:
      case TOKEN_MINUS:
        prefix_op();
        expr_max();
        break;
      case TOKEN_LPAREN:
      case TOKEN_LCURLYBRACE:
      case TOKEN_LSQUAREPAREN:
      case TOKEN_BEGIN:
      case TOKEN_CASE:
      case TOKEN_TRY:
      case TOKEN_FUN:
      case TOKEN_IF:
      case TOKEN_RECEIVE:
      case TOKEN_LESSLESS:
      case TOKEN_CHAR:
      case TOKEN_INTEGER:
      case TOKEN_FLOAT:
      case TOKEN_ATOM:
      case TOKEN_STRING:
      case TOKEN_VAR:
        expr_max();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("bit_expr");
    }
  }

  final public void opt_bit_size_expr() throws ParseException {
    trace_call("opt_bit_size_expr");
    try {
      jj_consume_token(TOKEN_COLON);
      bit_size_expr();
    } finally {
      trace_return("opt_bit_size_expr");
    }
  }

  final public void bit_size_expr() throws ParseException {
    trace_call("bit_size_expr");
    try {
      expr_max();
    } finally {
      trace_return("bit_size_expr");
    }
  }

  final public void opt_bit_type_list() throws ParseException {
    trace_call("opt_bit_type_list");
    try {
      jj_consume_token(TOKEN_DIV);
      bit_type_list();
    } finally {
      trace_return("opt_bit_type_list");
    }
  }

  final public void bit_type_list() throws ParseException {
    trace_call("bit_type_list");
    try {
      bit_type();
      label_19:
      while (true) {
        if (jj_2_82(2)) {
          ;
        } else {
          break label_19;
        }
        jj_consume_token(TOKEN_MINUS);
        bit_type();
      }
    } finally {
      trace_return("bit_type_list");
    }
  }

  final public void bit_type() throws ParseException {
    trace_call("bit_type");
    try {
      if (jj_2_83(2)) {
        jj_consume_token(TOKEN_ATOM);
        jj_consume_token(TOKEN_COLON);
        jj_consume_token(TOKEN_INTEGER);
      } else if (jj_2_84(2)) {
        jj_consume_token(TOKEN_ATOM);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("bit_type");
    }
  }

  final public void top_type() throws ParseException {
    trace_call("top_type");
    try {
      if (jj_2_85(2)) {
        jj_consume_token(TOKEN_VAR);
        jj_consume_token(TOKEN_COLONCOLON);
        top_type_100();
      } else if (jj_2_86(2)) {
        top_type_100();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("top_type");
    }
  }

  final public void top_type_100() throws ParseException {
    trace_call("top_type_100");
    try {
      type_200();
      if (jj_2_87(2)) {
        jj_consume_token(TOKEN_OR);
        top_type_100();
      } else {
        ;
      }
    } finally {
      trace_return("top_type_100");
    }
  }

  final public void top_types() throws ParseException {
    trace_call("top_types");
    try {
      top_type();
      label_20:
      while (true) {
        if (jj_2_88(2)) {
          ;
        } else {
          break label_20;
        }
        jj_consume_token(TOKEN_COMMA);
        top_type();
      }
    } finally {
      trace_return("top_types");
    }
  }

  final public void type() throws ParseException {
    trace_call("type");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_LPAREN:
        jj_consume_token(TOKEN_LPAREN);
        top_type();
        jj_consume_token(TOKEN_RPAREN);
        break;
      case TOKEN_VAR:
        jj_consume_token(TOKEN_VAR);
        break;
      default:
        jj_la1[24] = jj_gen;
        if (jj_2_89(2)) {
          jj_consume_token(TOKEN_ATOM);
        } else if (jj_2_90(3)) {
          jj_consume_token(TOKEN_ATOM);
          jj_consume_token(TOKEN_LPAREN);
          jj_consume_token(TOKEN_RPAREN);
        } else if (jj_2_91(1000)) {
          jj_consume_token(TOKEN_ATOM);
          jj_consume_token(TOKEN_LPAREN);
          top_types();
          jj_consume_token(TOKEN_RPAREN);
        } else if (jj_2_92(5)) {
          jj_consume_token(TOKEN_ATOM);
          jj_consume_token(TOKEN_COLON);
          jj_consume_token(TOKEN_ATOM);
          jj_consume_token(TOKEN_LPAREN);
          jj_consume_token(TOKEN_RPAREN);
        } else if (jj_2_93(1000)) {
          jj_consume_token(TOKEN_ATOM);
          jj_consume_token(TOKEN_COLON);
          jj_consume_token(TOKEN_ATOM);
          jj_consume_token(TOKEN_LPAREN);
          top_types();
          jj_consume_token(TOKEN_RPAREN);
        } else if (jj_2_94(2)) {
          jj_consume_token(TOKEN_LSQUAREPAREN);
          jj_consume_token(TOKEN_RSQUAREPAREN);
        } else if (jj_2_95(1000)) {
          jj_consume_token(TOKEN_LSQUAREPAREN);
          top_type();
          jj_consume_token(TOKEN_RSQUAREPAREN);
        } else if (jj_2_96(1000)) {
          jj_consume_token(TOKEN_LSQUAREPAREN);
          top_type();
          jj_consume_token(TOKEN_COMMA);
          jj_consume_token(TOKEN_DOTDOTDOT);
          jj_consume_token(TOKEN_RSQUAREPAREN);
        } else if (jj_2_97(3)) {
          jj_consume_token(TOKEN_HASH);
          jj_consume_token(TOKEN_LCURLYBRACE);
          jj_consume_token(TOKEN_RCURLYBRACE);
        } else if (jj_2_98(1000)) {
          jj_consume_token(TOKEN_HASH);
          jj_consume_token(TOKEN_LCURLYBRACE);
          map_pair_types();
          jj_consume_token(TOKEN_RCURLYBRACE);
        } else if (jj_2_99(2)) {
          jj_consume_token(TOKEN_LCURLYBRACE);
          jj_consume_token(TOKEN_RCURLYBRACE);
        } else if (jj_2_100(1000)) {
          jj_consume_token(TOKEN_LCURLYBRACE);
          top_types();
          jj_consume_token(TOKEN_RCURLYBRACE);
        } else if (jj_2_101(4)) {
          jj_consume_token(TOKEN_HASH);
          jj_consume_token(TOKEN_ATOM);
          jj_consume_token(TOKEN_LCURLYBRACE);
          jj_consume_token(TOKEN_RCURLYBRACE);
        } else if (jj_2_102(1000)) {
          jj_consume_token(TOKEN_HASH);
          jj_consume_token(TOKEN_ATOM);
          jj_consume_token(TOKEN_LCURLYBRACE);
          field_types();
          jj_consume_token(TOKEN_RCURLYBRACE);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOKEN_LESSLESS:
            binary_type();
            break;
          case TOKEN_INTEGER:
            jj_consume_token(TOKEN_INTEGER);
            break;
          case TOKEN_CHAR:
            jj_consume_token(TOKEN_CHAR);
            break;
          default:
            jj_la1[25] = jj_gen;
            if (jj_2_103(3)) {
              jj_consume_token(TOKEN_FUN);
              jj_consume_token(TOKEN_LPAREN);
              jj_consume_token(TOKEN_RPAREN);
            } else if (jj_2_104(1000)) {
              jj_consume_token(TOKEN_FUN);
              jj_consume_token(TOKEN_LPAREN);
              fun_type_100();
              jj_consume_token(TOKEN_RPAREN);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } finally {
      trace_return("type");
    }
  }

  final public void typed_expr() throws ParseException {
    trace_call("typed_expr");
    try {
      expr();
      jj_consume_token(TOKEN_COLONCOLON);
      top_type();
    } finally {
      trace_return("typed_expr");
    }
  }

  final public void typed_attr_val() throws ParseException {
    trace_call("typed_attr_val");
    try {
      if (jj_2_105(1000)) {
        expr();
        jj_consume_token(TOKEN_COMMA);
        typed_record_fields();
      } else if (jj_2_106(1000)) {
        expr();
        jj_consume_token(TOKEN_COLONCOLON);
        top_type();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("typed_attr_val");
    }
  }

  final public void type_sig() throws ParseException {
    trace_call("type_sig");
    try {
      fun_type();
      if (jj_2_107(2)) {
        jj_consume_token(TOKEN_WHEN);
        type_guards();
      } else {
        ;
      }
    } finally {
      trace_return("type_sig");
    }
  }

  final public void type_sigs() throws ParseException {
    trace_call("type_sigs");
    try {
      type_sig();
      label_21:
      while (true) {
        if (jj_2_108(2)) {
          ;
        } else {
          break label_21;
        }
        jj_consume_token(TOKEN_SEMICOLON);
        type_sig();
      }
    } finally {
      trace_return("type_sigs");
    }
  }

  final public void type_guard() throws ParseException {
    trace_call("type_guard");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_ATOM:
        jj_consume_token(TOKEN_ATOM);
        jj_consume_token(TOKEN_LPAREN);
        top_types();
        jj_consume_token(TOKEN_RPAREN);
        break;
      case TOKEN_VAR:
        jj_consume_token(TOKEN_VAR);
        jj_consume_token(TOKEN_COLONCOLON);
        top_type();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("type_guard");
    }
  }

  final public void type_guards() throws ParseException {
    trace_call("type_guards");
    try {
      type_guard();
      label_22:
      while (true) {
        if (jj_2_109(2)) {
          ;
        } else {
          break label_22;
        }
        jj_consume_token(TOKEN_COMMA);
        type_guard();
      }
    } finally {
      trace_return("type_guards");
    }
  }

  final public void fun_type() throws ParseException {
    trace_call("fun_type");
    try {
      if (jj_2_110(1000)) {
        jj_consume_token(TOKEN_LPAREN);
        jj_consume_token(TOKEN_RPAREN);
        jj_consume_token(TOKEN_MINUSGREATER);
        top_type();
      } else if (jj_2_111(1000)) {
        jj_consume_token(TOKEN_LPAREN);
        top_types();
        jj_consume_token(TOKEN_RPAREN);
        jj_consume_token(TOKEN_MINUSGREATER);
        top_type();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("fun_type");
    }
  }

  final public void fun_type_100() throws ParseException {
    trace_call("fun_type_100");
    try {
      if (jj_2_112(1000)) {
        jj_consume_token(TOKEN_LPAREN);
        jj_consume_token(TOKEN_DOTDOTDOT);
        jj_consume_token(TOKEN_RPAREN);
        jj_consume_token(TOKEN_MINUSGREATER);
        top_type();
      } else if (jj_2_113(1000)) {
        fun_type();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("fun_type_100");
    }
  }

  final public void binary_type() throws ParseException {
    trace_call("binary_type");
    try {
      if (jj_2_114(2)) {
        jj_consume_token(TOKEN_LESSLESS);
        jj_consume_token(TOKEN_GREATERGREATER);
      } else if (jj_2_115(1000)) {
        jj_consume_token(TOKEN_LESSLESS);
        bin_base_type();
        jj_consume_token(TOKEN_GREATERGREATER);
      } else if (jj_2_116(1000)) {
        jj_consume_token(TOKEN_LESSLESS);
        bin_unit_type();
        jj_consume_token(TOKEN_GREATERGREATER);
      } else if (jj_2_117(1000)) {
        jj_consume_token(TOKEN_LESSLESS);
        bin_base_type();
        jj_consume_token(TOKEN_COMMA);
        bin_unit_type();
        jj_consume_token(TOKEN_GREATERGREATER);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("binary_type");
    }
  }

  final public void type_spec() throws ParseException {
    trace_call("type_spec");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_ATOM:
        spec_fun();
        type_sigs();
        break;
      case TOKEN_LPAREN:
        jj_consume_token(TOKEN_LPAREN);
        spec_fun();
        type_sigs();
        jj_consume_token(TOKEN_RPAREN);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("type_spec");
    }
  }

  final public void spec_fun() throws ParseException {
    trace_call("spec_fun");
    try {
      jj_consume_token(TOKEN_ATOM);
      if (jj_2_118(2)) {
        jj_consume_token(TOKEN_COLON);
        jj_consume_token(TOKEN_ATOM);
      } else {
        ;
      }
    } finally {
      trace_return("spec_fun");
    }
  }

  final public void typed_exprs() throws ParseException {
    trace_call("typed_exprs");
    try {
      if (jj_2_120(1000)) {
        typed_expr();
        if (jj_2_119(2)) {
          jj_consume_token(TOKEN_COMMA);
          typed_exprs();
        } else {
          ;
        }
      } else if (jj_2_121(1000)) {
        expr();
        jj_consume_token(TOKEN_COMMA);
        typed_exprs();
      } else if (jj_2_122(1000)) {
        typed_expr();
        jj_consume_token(TOKEN_COMMA);
        exprs();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("typed_exprs");
    }
  }

  final public void typed_record_fields() throws ParseException {
    trace_call("typed_record_fields");
    try {
      jj_consume_token(TOKEN_LCURLYBRACE);
      typed_exprs();
      jj_consume_token(TOKEN_RCURLYBRACE);
    } finally {
      trace_return("typed_record_fields");
    }
  }

  final public void field_types() throws ParseException {
    trace_call("field_types");
    try {
      field_type();
      label_23:
      while (true) {
        if (jj_2_123(2)) {
          ;
        } else {
          break label_23;
        }
        jj_consume_token(TOKEN_COMMA);
        field_type();
      }
    } finally {
      trace_return("field_types");
    }
  }

  final public void field_type() throws ParseException {
    trace_call("field_type");
    try {
      jj_consume_token(TOKEN_ATOM);
      jj_consume_token(TOKEN_COLONCOLON);
      top_type();
    } finally {
      trace_return("field_type");
    }
  }

  final public void map_pair_types() throws ParseException {
    trace_call("map_pair_types");
    try {
      map_pair_type();
      label_24:
      while (true) {
        if (jj_2_124(2)) {
          ;
        } else {
          break label_24;
        }
        jj_consume_token(TOKEN_COMMA);
        map_pair_type();
      }
    } finally {
      trace_return("map_pair_types");
    }
  }

  final public void map_pair_type() throws ParseException {
    trace_call("map_pair_type");
    try {
      if (jj_2_125(1000)) {
        top_type();
        jj_consume_token(TOKEN_EQUALGREATER);
        top_type();
      } else if (jj_2_126(1000)) {
        top_type();
        jj_consume_token(TOKEN_COLONEQUAL);
        top_type();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("map_pair_type");
    }
  }

  final public void bin_base_type() throws ParseException {
    trace_call("bin_base_type");
    try {
      jj_consume_token(TOKEN_VAR);
      jj_consume_token(TOKEN_COLON);
      type();
    } finally {
      trace_return("bin_base_type");
    }
  }

  final public void bin_unit_type() throws ParseException {
    trace_call("bin_unit_type");
    try {
      jj_consume_token(TOKEN_VAR);
      jj_consume_token(TOKEN_COLON);
      jj_consume_token(TOKEN_VAR);
      jj_consume_token(TOKEN_MULT);
      type();
    } finally {
      trace_return("bin_unit_type");
    }
  }

  final public void type_200() throws ParseException {
    trace_call("type_200");
    try {
      type_300();
      if (jj_2_127(2)) {
        jj_consume_token(TOKEN_DOTDOT);
        type_300();
      } else {
        ;
      }
    } finally {
      trace_return("type_200");
    }
  }

  final public void type_300() throws ParseException {
    trace_call("type_300");
    try {
      type_400();
      label_25:
      while (true) {
        if (jj_2_128(2)) {
          ;
        } else {
          break label_25;
        }
        add_op();
        type_400();
      }
    } finally {
      trace_return("type_300");
    }
  }

  final public void type_400() throws ParseException {
    trace_call("type_400");
    try {
      type_500();
      label_26:
      while (true) {
        if (jj_2_129(2)) {
          ;
        } else {
          break label_26;
        }
        mult_op();
        type_500();
      }
    } finally {
      trace_return("type_400");
    }
  }

  final public void type_500() throws ParseException {
    trace_call("type_500");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_BNOT:
      case TOKEN_NOT:
      case TOKEN_PLUS:
      case TOKEN_MINUS:
        prefix_op();
        type();
        break;
      case TOKEN_LPAREN:
      case TOKEN_LCURLYBRACE:
      case TOKEN_LSQUAREPAREN:
      case TOKEN_HASH:
      case TOKEN_FUN:
      case TOKEN_LESSLESS:
      case TOKEN_CHAR:
      case TOKEN_INTEGER:
      case TOKEN_ATOM:
      case TOKEN_VAR:
        type();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("type_500");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_3R_58() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(TOKEN_LESSLESS)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(TOKEN_OROR)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(TOKEN_GREATERGREATER)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(TOKEN_LESSEQUAL)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(TOKEN_LSQUAREPAREN)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(TOKEN_OROR)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(TOKEN_RSQUAREPAREN)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(TOKEN_COLON)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(TOKEN_OR)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(TOKEN_RSQUAREPAREN)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(TOKEN_LSQUAREPAREN)) return true;
    if (jj_scan_token(TOKEN_RSQUAREPAREN)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(TOKEN_LSQUAREPAREN)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(TOKEN_BEGIN)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_104()) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(TOKEN_EQUAL)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_40()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_39()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(TOKEN_ANDALSO)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_44()) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(TOKEN_ORELSE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_154() {
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_129() {
    if (jj_3R_42()) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_98()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_128() {
    if (jj_3R_40()) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_127() {
    if (jj_scan_token(TOKEN_DOTDOT)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_44()) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(TOKEN_EXCLAMATION)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(TOKEN_CATCH)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(TOKEN_SEMICOLON)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_124() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(TOKEN_MINUSGREATER)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_127()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(TOKEN_WHEN)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(TOKEN_VAR)) return true;
    if (jj_scan_token(TOKEN_COLON)) return true;
    if (jj_scan_token(TOKEN_VAR)) return true;
    if (jj_scan_token(TOKEN_MULT)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(TOKEN_VAR)) return true;
    if (jj_scan_token(TOKEN_COLON)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_123() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_3R_153()) return true;
    if (jj_3R_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3_126() {
    if (jj_3R_76()) return true;
    if (jj_scan_token(TOKEN_COLONEQUAL)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_125()) {
    jj_scanpos = xsp;
    if (jj_3_126()) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_124()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_125() {
    if (jj_3R_76()) return true;
    if (jj_scan_token(TOKEN_EQUALGREATER)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_COLONCOLON)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_123()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_118() {
    if (jj_scan_token(TOKEN_COLON)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(TOKEN_MINUS)) return true;
    if (jj_scan_token(TOKEN_CALLBACK)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(TOKEN_MINUS)) return true;
    if (jj_scan_token(TOKEN_SPEC)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(TOKEN_MINUS)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(TOKEN_MINUS)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(TOKEN_MINUS)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_122() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_121() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_120()) {
    jj_scanpos = xsp;
    if (jj_3_121()) {
    jj_scanpos = xsp;
    if (jj_3_122()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(TOKEN_DOT)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(TOKEN_DOT)) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_119()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_118()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_159()) return true;
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_159()) return true;
    if (jj_3R_160()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_117() {
    if (jj_scan_token(TOKEN_LESSLESS)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(TOKEN_GREATERGREATER)) return true;
    return false;
  }

  private boolean jj_3_109() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_116() {
    if (jj_scan_token(TOKEN_LESSLESS)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(TOKEN_GREATERGREATER)) return true;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_scan_token(TOKEN_LESSLESS)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(TOKEN_GREATERGREATER)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3_117()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_114() {
    if (jj_scan_token(TOKEN_LESSLESS)) return true;
    if (jj_scan_token(TOKEN_GREATERGREATER)) return true;
    return false;
  }

  private boolean jj_3_113() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_112()) {
    jj_scanpos = xsp;
    if (jj_3_113()) return true;
    }
    return false;
  }

  private boolean jj_3_112() {
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_scan_token(TOKEN_DOTDOTDOT)) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    if (jj_scan_token(TOKEN_MINUSGREATER)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_111() {
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    if (jj_scan_token(TOKEN_MINUSGREATER)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_110()) {
    jj_scanpos = xsp;
    if (jj_3_111()) return true;
    }
    return false;
  }

  private boolean jj_3_108() {
    if (jj_scan_token(TOKEN_SEMICOLON)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    if (jj_scan_token(TOKEN_MINUSGREATER)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_scan_token(TOKEN_WHEN)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(TOKEN_VAR)) return true;
    if (jj_scan_token(TOKEN_COLONCOLON)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_107()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(TOKEN_COLONCOLON)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(TOKEN_COLONCOLON)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) return true;
    }
    return false;
  }

  private boolean jj_3_104() {
    if (jj_scan_token(TOKEN_FUN)) return true;
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_scan_token(TOKEN_FUN)) return true;
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_scan_token(TOKEN_LSQUAREPAREN)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_scan_token(TOKEN_DOTDOTDOT)) return true;
    if (jj_scan_token(TOKEN_RSQUAREPAREN)) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(TOKEN_LSQUAREPAREN)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(TOKEN_RSQUAREPAREN)) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_scan_token(TOKEN_LSQUAREPAREN)) return true;
    if (jj_scan_token(TOKEN_RSQUAREPAREN)) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_COLON)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_COLON)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(TOKEN_OR)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) {
    jj_scanpos = xsp;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_89() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_scan_token(TOKEN_MINUS)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_128()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) return true;
    }
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(TOKEN_VAR)) return true;
    if (jj_scan_token(TOKEN_COLONCOLON)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_84() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_COLON)) return true;
    if (jj_scan_token(TOKEN_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(TOKEN_DIV)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(TOKEN_COLON)) return true;
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_44()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_127()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(TOKEN_DOT)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(TOKEN_LESSLESS)) return true;
    if (jj_scan_token(TOKEN_GREATERGREATER)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(TOKEN_LESSLESS)) return true;
    if (jj_3R_144()) return true;
    if (jj_scan_token(TOKEN_GREATERGREATER)) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(TOKEN_STRING)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_165() {
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_77() {
    if (jj_scan_token(TOKEN_SEMICOLON)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_165()) return true;
    if (jj_scan_token(TOKEN_STRING)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_3R_67()) return true;
    if (jj_scan_token(TOKEN_COLON)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(TOKEN_SEMICOLON)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_126() {
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) return true;
    }
    return false;
  }

  private boolean jj_3_74() {
    if (jj_scan_token(TOKEN_LPAREN)) return true;
    if (jj_scan_token(TOKEN_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_49()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_126()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    if (jj_3R_145()) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(TOKEN_AFTER)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(TOKEN_CATCH)) return true;
    if (jj_3R_71()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(TOKEN_CATCH)) return true;
    if (jj_3R_71()) return true;
    if (jj_scan_token(TOKEN_AFTER)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(TOKEN_TRY)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(TOKEN_OF)) return true;
    if (jj_3R_66()) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(TOKEN_SEMICOLON)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(TOKEN_TRY)) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_100()) return true;
    if (jj_3R_145()) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(TOKEN_VAR)) return true;
    if (jj_3R_100()) return true;
    if (jj_3R_145()) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(TOKEN_DOT)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(TOKEN_FUN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(TOKEN_FUN)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(TOKEN_COLON)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(TOKEN_DIV)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(TOKEN_FUN)) return true;
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_DIV)) return true;
    if (jj_scan_token(TOKEN_INTEGER)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(TOKEN_SEMICOLON)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(TOKEN_RECEIVE)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(TOKEN_AFTER)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(TOKEN_RECEIVE)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(TOKEN_RECEIVE)) return true;
    if (jj_scan_token(TOKEN_AFTER)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_32()) return true;
    if (jj_3R_145()) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(TOKEN_SEMICOLON)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(TOKEN_CASE)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(TOKEN_OF)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_121()) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(TOKEN_IF)) return true;
    if (jj_3R_157()) return true;
    if (jj_scan_token(TOKEN_END)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_120()) return true;
    if (jj_scan_token(TOKEN_COLONEQUAL)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_120()) return true;
    if (jj_scan_token(TOKEN_EQUALGREATER)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(TOKEN_COMMA)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(TOKEN_LCURLYBRACE)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(TOKEN_RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(TOKEN_HASH)) return true;
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(TOKEN_VAR)) return true;
    if (jj_scan_token(TOKEN_EQUAL)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(TOKEN_ATOM)) return true;
    if (jj_scan_token(TOKEN_EQUAL)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(TOKEN_LESSMINUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ErlangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40000000,0x2de40a20,0x0,0x2ce00220,0x3080,0x80000,0x40000,0x80200,0x0,0x20,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x2ce00a20,0x20,0x0,0x0,0x20,0x4040a20,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400,0x0,0x40000606,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x606,0x1f8,0x1fe00,0x60000,0x7f80000,0x40000000,0x0,0x10,0x40000606,0x0,0x40000000,0x0,0x0,0x40000606,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x800,0x0,0x3f00,0x3f00,0x0,0x0,0x0,0x0,0x0,0x2800,0x2000,0x2800,0x2200,0x0,0x1f00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f00,0x2000,0x300,0x2800,0x800,0x2b00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[129];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Erlang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Erlang(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ErlangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Erlang(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ErlangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Erlang(ErlangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ErlangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[79];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 129; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }

/* Generated By:JavaCC: Do not edit this line. ErlangTokenManager.java */
package erlang.parser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** Token Manager. */
public class ErlangTokenManager implements ErlangConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1f9e7fff00000L) != 0L || (active1 & 0xe0L) != 0L)
         {
            jjmatchedKind = 75;
            return 7;
         }
         if ((active0 & 0x4040000000100L) != 0L)
            return 23;
         return -1;
      case 1:
         if ((active0 & 0x179e6e7f00000L) != 0L || (active1 & 0xe0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 1;
            }
            return 7;
         }
         if ((active0 & 0x800118000000L) != 0L)
            return 7;
         return -1;
      case 2:
         if ((active0 & 0x108361700000L) != 0L || (active1 & 0x60L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 2;
            }
            return 7;
         }
         if ((active0 & 0x1696486800000L) != 0L || (active1 & 0x80L) != 0L)
            return 7;
         return -1;
      case 3:
         if ((active0 & 0x1a1300000L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
            return 7;
         }
         if ((active0 & 0x108240400000L) != 0L || (active1 & 0x20L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 0x1a0000000L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x1300000L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 0xa0000000L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 6;
            return 7;
         }
         if ((active0 & 0xa0000000L) != 0L)
            return 7;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 64);
      case 34:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 35:
         return jjStopAtPos(0, 18);
      case 40:
         return jjStopAtPos(0, 5);
      case 41:
         return jjStopAtPos(0, 6);
      case 42:
         return jjStopAtPos(0, 35);
      case 43:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 7);
      case 45:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x4000000000100L, 0x0L);
      case 46:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 47:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 58:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x4L);
      case 59:
         return jjStopAtPos(0, 16);
      case 60:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x4800000000008000L, 0x0L);
      case 61:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x1628000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x8080000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10080100000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x788200200000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1400000L, 0x40L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800110000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4020000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 9);
      case 124:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 10);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         break;
      case 43:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 45:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 46:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 58:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 60:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 61:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 62:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8001400000L, active1, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020200000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 7);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 7);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10282000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080400000000L, active1, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100800000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 124:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         break;
      case 61:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         break;
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 7);
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000L, active1, 0x20L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 109:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 7);
         break;
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200000000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 7);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 7);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 7);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 7);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000L, active1, 0L);
      case 118:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 7);
         break;
      case 121:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      case 99:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 7);
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x20100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x40L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 7);
         break;
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 7);
         break;
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 7);
         break;
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 7);
         break;
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 7);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 7);
         break;
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 107:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(13, 16);
                  else if (curChar == 36)
                     jjAddStates(4, 5);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddTwoStates(11, 9);
                  break;
               case 12:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(13, 16);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 35)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 46)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(0, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe00000001L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(7);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 95)
                     jjCheckNAdd(11);
                  break;
               case 1:
                  if (kind > 72)
                     kind = 72;
                  break;
               case 2:
                  if (curChar == 92)
                     jjAddStates(6, 7);
                  break;
               case 6:
                  if ((0x7fffffe00000001L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 95)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddTwoStates(11, 9);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 72)
                     kind = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   13, 14, 16, 17, 1, 2, 1, 3, 20, 21, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\50", "\51", "\54", "\55\76", "\173", "\175", 
"\133", "\135", "\174", "\174\174", "\74\55", "\73", "\72", "\43", "\56", 
"\141\146\164\145\162", "\142\145\147\151\156", "\143\141\163\145", "\164\162\171", 
"\143\141\164\143\150", "\145\156\144", "\146\165\156", "\151\146", "\157\146", 
"\162\145\143\145\151\166\145", "\167\150\145\156", "\141\156\144\141\154\163\157", 
"\157\162\145\154\163\145", "\142\156\157\164", "\156\157\164", "\52", "\57", "\144\151\166", 
"\162\145\155", "\142\141\156\144", "\141\156\144", "\53", "\55", "\142\157\162", 
"\142\170\157\162", "\142\163\154", "\142\163\162", "\157\162", "\170\157\162", "\53\53", 
"\55\55", "\75\75", "\57\75", "\75\74", "\74", "\76\75", "\76", "\75\72\75", 
"\75\57\75", "\74\75", "\75\76", "\72\75", "\74\74", "\76\76", "\41", "\75", "\72\72", 
"\56\56", "\56\56\56", "\163\160\145\143", "\143\141\154\154\142\141\143\153", 
"\144\157\164", null, null, null, null, "\42\42", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x3fffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[23];
private final int[] jjstateSet = new int[46];
protected char curChar;
/** Constructor. */
public ErlangTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ErlangTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

/* Generated By:JavaCC: Do not edit this line. ErlangConstants.java */
package erlang.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ErlangConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TOKEN_LPAREN = 5;
  /** RegularExpression Id. */
  int TOKEN_RPAREN = 6;
  /** RegularExpression Id. */
  int TOKEN_COMMA = 7;
  /** RegularExpression Id. */
  int TOKEN_MINUSGREATER = 8;
  /** RegularExpression Id. */
  int TOKEN_LCURLYBRACE = 9;
  /** RegularExpression Id. */
  int TOKEN_RCURLYBRACE = 10;
  /** RegularExpression Id. */
  int TOKEN_LSQUAREPAREN = 11;
  /** RegularExpression Id. */
  int TOKEN_RSQUAREPAREN = 12;
  /** RegularExpression Id. */
  int TOKEN_OR = 13;
  /** RegularExpression Id. */
  int TOKEN_OROR = 14;
  /** RegularExpression Id. */
  int TOKEN_LESSMINUS = 15;
  /** RegularExpression Id. */
  int TOKEN_SEMICOLON = 16;
  /** RegularExpression Id. */
  int TOKEN_COLON = 17;
  /** RegularExpression Id. */
  int TOKEN_HASH = 18;
  /** RegularExpression Id. */
  int TOKEN_DOT = 19;
  /** RegularExpression Id. */
  int TOKEN_AFTER = 20;
  /** RegularExpression Id. */
  int TOKEN_BEGIN = 21;
  /** RegularExpression Id. */
  int TOKEN_CASE = 22;
  /** RegularExpression Id. */
  int TOKEN_TRY = 23;
  /** RegularExpression Id. */
  int TOKEN_CATCH = 24;
  /** RegularExpression Id. */
  int TOKEN_END = 25;
  /** RegularExpression Id. */
  int TOKEN_FUN = 26;
  /** RegularExpression Id. */
  int TOKEN_IF = 27;
  /** RegularExpression Id. */
  int TOKEN_OF = 28;
  /** RegularExpression Id. */
  int TOKEN_RECEIVE = 29;
  /** RegularExpression Id. */
  int TOKEN_WHEN = 30;
  /** RegularExpression Id. */
  int TOKEN_ANDALSO = 31;
  /** RegularExpression Id. */
  int TOKEN_ORELSE = 32;
  /** RegularExpression Id. */
  int TOKEN_BNOT = 33;
  /** RegularExpression Id. */
  int TOKEN_NOT = 34;
  /** RegularExpression Id. */
  int TOKEN_MULT = 35;
  /** RegularExpression Id. */
  int TOKEN_DIV = 36;
  /** RegularExpression Id. */
  int TOKEN_DIVINT = 37;
  /** RegularExpression Id. */
  int TOKEN_REM = 38;
  /** RegularExpression Id. */
  int TOKEN_BAND = 39;
  /** RegularExpression Id. */
  int TOKEN_AND = 40;
  /** RegularExpression Id. */
  int TOKEN_PLUS = 41;
  /** RegularExpression Id. */
  int TOKEN_MINUS = 42;
  /** RegularExpression Id. */
  int TOKEN_BOR = 43;
  /** RegularExpression Id. */
  int TOKEN_BXOR = 44;
  /** RegularExpression Id. */
  int TOKEN_BSL = 45;
  /** RegularExpression Id. */
  int TOKEN_BSR = 46;
  /** RegularExpression Id. */
  int TOKEN_ORW = 47;
  /** RegularExpression Id. */
  int TOKEN_XOR = 48;
  /** RegularExpression Id. */
  int TOKEN_PLUSPLUS = 49;
  /** RegularExpression Id. */
  int TOKEN_MINUSMINUS = 50;
  /** RegularExpression Id. */
  int TOKEN_EQUALEQUAL = 51;
  /** RegularExpression Id. */
  int TOKEN_NOTEQUAL = 52;
  /** RegularExpression Id. */
  int TOKEN_EQUALORLESS = 53;
  /** RegularExpression Id. */
  int TOKEN_LESS = 54;
  /** RegularExpression Id. */
  int TOKEN_GREATEROREQUAL = 55;
  /** RegularExpression Id. */
  int TOKEN_GREATER = 56;
  /** RegularExpression Id. */
  int TOKEN_EXACTLYEQUAL = 57;
  /** RegularExpression Id. */
  int TOKEN_EXACTLYNOTEQUAL = 58;
  /** RegularExpression Id. */
  int TOKEN_LESSEQUAL = 59;
  /** RegularExpression Id. */
  int TOKEN_EQUALGREATER = 60;
  /** RegularExpression Id. */
  int TOKEN_COLONEQUAL = 61;
  /** RegularExpression Id. */
  int TOKEN_LESSLESS = 62;
  /** RegularExpression Id. */
  int TOKEN_GREATERGREATER = 63;
  /** RegularExpression Id. */
  int TOKEN_EXCLAMATION = 64;
  /** RegularExpression Id. */
  int TOKEN_EQUAL = 65;
  /** RegularExpression Id. */
  int TOKEN_COLONCOLON = 66;
  /** RegularExpression Id. */
  int TOKEN_DOTDOT = 67;
  /** RegularExpression Id. */
  int TOKEN_DOTDOTDOT = 68;
  /** RegularExpression Id. */
  int TOKEN_SPEC = 69;
  /** RegularExpression Id. */
  int TOKEN_CALLBACK = 70;
  /** RegularExpression Id. */
  int TOKEN_DOTW = 71;
  /** RegularExpression Id. */
  int TOKEN_CHAR = 72;
  /** RegularExpression Id. */
  int TOKEN_INTEGER = 73;
  /** RegularExpression Id. */
  int TOKEN_FLOAT = 74;
  /** RegularExpression Id. */
  int TOKEN_ATOM = 75;
  /** RegularExpression Id. */
  int TOKEN_STRING = 76;
  /** RegularExpression Id. */
  int TOKEN_VAR = 77;
  /** RegularExpression Id. */
  int NAMECHAR = 78;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"->\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"|\"",
    "\"||\"",
    "\"<-\"",
    "\";\"",
    "\":\"",
    "\"#\"",
    "\".\"",
    "\"after\"",
    "\"begin\"",
    "\"case\"",
    "\"try\"",
    "\"catch\"",
    "\"end\"",
    "\"fun\"",
    "\"if\"",
    "\"of\"",
    "\"receive\"",
    "\"when\"",
    "\"andalso\"",
    "\"orelse\"",
    "\"bnot\"",
    "\"not\"",
    "\"*\"",
    "\"/\"",
    "\"div\"",
    "\"rem\"",
    "\"band\"",
    "\"and\"",
    "\"+\"",
    "\"-\"",
    "\"bor\"",
    "\"bxor\"",
    "\"bsl\"",
    "\"bsr\"",
    "\"or\"",
    "\"xor\"",
    "\"++\"",
    "\"--\"",
    "\"==\"",
    "\"/=\"",
    "\"=<\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"=:=\"",
    "\"=/=\"",
    "\"<=\"",
    "\"=>\"",
    "\":=\"",
    "\"<<\"",
    "\">>\"",
    "\"!\"",
    "\"=\"",
    "\"::\"",
    "\"..\"",
    "\"...\"",
    "\"spec\"",
    "\"callback\"",
    "\"dot\"",
    "<TOKEN_CHAR>",
    "<TOKEN_INTEGER>",
    "<TOKEN_FLOAT>",
    "<TOKEN_ATOM>",
    "\"\\\"\\\"\"",
    "<TOKEN_VAR>",
    "<NAMECHAR>",
  };

}

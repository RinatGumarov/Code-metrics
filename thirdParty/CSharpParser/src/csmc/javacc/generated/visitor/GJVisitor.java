//
// Generated by JTB 1.3.2
//

package csmc.javacc.generated.visitor;
import csmc.javacc.generated.syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R,A> {

   //
   // GJ Auto class visitors
   //

   public R visit(NodeList n, A argu);
   public R visit(NodeListOptional n, A argu);
   public R visit(NodeOptional n, A argu);
   public R visit(NodeSequence n, A argu);
   public R visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> [ <UNICODE_BOM> ]
    * f1 -> Start()
    * f2 -> <EOF>
    */
   public R visit(Input n, A argu);

   /**
    * f0 -> CompilationUnit()
    */
   public R visit(Start n, A argu);

   /**
    * f0 -> ExternAliasDirectiveList()
    * f1 -> UsingDirectiveList()
    * f2 -> GlobalAttributesOpt()
    * f3 -> NamespaceMemberDeclarationList()
    */
   public R visit(CompilationUnit n, A argu);

   /**
    * f0 -> [ ExternAliasDirective() ExternAliasDirectiveList() ]
    */
   public R visit(ExternAliasDirectiveList n, A argu);

   /**
    * f0 -> [ UsingDirective() UsingDirectiveList() ]
    */
   public R visit(UsingDirectiveList n, A argu);

   /**
    * f0 -> [ GlobalAttributes() ]
    */
   public R visit(GlobalAttributesOpt n, A argu);

   /**
    * f0 -> [ NamespaceMemberDeclaration() NamespaceMemberDeclarationList() ]
    */
   public R visit(NamespaceMemberDeclarationList n, A argu);

   /**
    * f0 -> <EXTERN>
    * f1 -> <ALIAS>
    * f2 -> Identifier()
    * f3 -> <SEMICOLON>
    */
   public R visit(ExternAliasDirective n, A argu);

   /**
    * f0 -> UsingAliasDirective()
    *       | UsingStaticDirective()
    *       | UsingNamespaceDirective()
    */
   public R visit(UsingDirective n, A argu);

   /**
    * f0 -> <USING>
    * f1 -> Identifier()
    * f2 -> <EQUAL>
    * f3 -> NamespaceOrTypeName()
    * f4 -> <SEMICOLON>
    */
   public R visit(UsingAliasDirective n, A argu);

   /**
    * f0 -> QualifiedAliasMember() NamespaceOrTypeNamePrime()
    *       | Identifier() TypeArgumentListOpt() NamespaceOrTypeNamePrime()
    */
   public R visit(NamespaceOrTypeName n, A argu);

   /**
    * f0 -> [ <DOT> Identifier() TypeArgumentListOpt() NamespaceOrTypeNamePrime() ]
    */
   public R visit(NamespaceOrTypeNamePrime n, A argu);

   /**
    * f0 -> [ TypeArgumentList() ]
    */
   public R visit(TypeArgumentListOpt n, A argu);

   /**
    * f0 -> <LESS>
    * f1 -> TypeArguments()
    * f2 -> <GREATER>
    */
   public R visit(TypeArgumentList n, A argu);

   /**
    * f0 -> TypeArgument()
    * f1 -> MoreTypeArguments()
    */
   public R visit(TypeArguments n, A argu);

   /**
    * f0 -> [ <COMMA> TypeArgument() MoreTypeArguments() ]
    */
   public R visit(MoreTypeArguments n, A argu);

   /**
    * f0 -> Type()
    */
   public R visit(TypeArgument n, A argu);

   /**
    * f0 -> SimpleType() TypePrime()
    *       | ClassType() TypePrime()
    *       | <VOID> <ASTERISK> TypePrime()
    */
   public R visit(Type n, A argu);

   /**
    * f0 -> [ ( <QUESTION> TypePrime() | RankSpecifierList() TypePrime() | <ASTERISK> TypePrime() ) ]
    */
   public R visit(TypePrime n, A argu);

   /**
    * f0 -> NamespaceOrTypeName()
    */
   public R visit(TypeName n, A argu);

   /**
    * f0 -> NumericType()
    *       | <BOOL>
    */
   public R visit(SimpleType n, A argu);

   /**
    * f0 -> IntegralType()
    *       | FloatingPointType()
    *       | <DECIMAL>
    */
   public R visit(NumericType n, A argu);

   /**
    * f0 -> <SBYTE>
    *       | <BYTE>
    *       | <SHORT>
    *       | <USHORT>
    *       | <INT>
    *       | <UINT>
    *       | <LONG>
    *       | <ULONG>
    *       | <CHAR>
    */
   public R visit(IntegralType n, A argu);

   /**
    * f0 -> <FLOAT>
    *       | <DOUBLE>
    */
   public R visit(FloatingPointType n, A argu);

   /**
    * f0 -> NonNullableValueType()
    * f1 -> <QUESTION>
    */
   public R visit(NullableType n, A argu);

   /**
    * f0 -> Type()
    */
   public R visit(NonNullableValueType n, A argu);

   /**
    * f0 -> TypeName()
    */
   public R visit(EnumType n, A argu);

   /**
    * f0 -> TypeName()
    *       | <OBJECT>
    *       | <DYNAMIC>
    *       | <STRING>
    */
   public R visit(ClassType n, A argu);

   /**
    * f0 -> TypeName()
    */
   public R visit(InterfaceType n, A argu);

   /**
    * f0 -> NonArrayType()
    * f1 -> RankSpecifierList()
    */
   public R visit(ArrayType n, A argu);

   /**
    * f0 -> SimpleType() TypePrimeNonArray()
    *       | ClassType() TypePrimeNonArray()
    *       | <VOID> <ASTERISK> TypePrimeNonArray()
    */
   public R visit(NonArrayType n, A argu);

   /**
    * f0 -> [ ( <QUESTION> TypePrimeNonArray() | <ASTERISK> TypePrimeNonArray() ) ]
    */
   public R visit(TypePrimeNonArray n, A argu);

   /**
    * f0 -> RankSpecifier() RankSpecifierList()
    *       | RankSpecifier()
    */
   public R visit(RankSpecifierList n, A argu);

   /**
    * f0 -> <LBRACKET>
    * f1 -> DimSeparatorList()
    * f2 -> <RBRACKET>
    */
   public R visit(RankSpecifier n, A argu);

   /**
    * f0 -> [ DimSeparator() DimSeparatorList() ]
    */
   public R visit(DimSeparatorList n, A argu);

   /**
    * f0 -> <COMMA>
    */
   public R visit(DimSeparator n, A argu);

   /**
    * f0 -> TypeName()
    */
   public R visit(DelegateType n, A argu);

   /**
    * f0 -> Identifier()
    */
   public R visit(TypeParameter n, A argu);

   /**
    * f0 -> PointerType()
    */
   public R visit(TypeUnsafe n, A argu);

   /**
    * f0 -> Type()
    */
   public R visit(PointerType n, A argu);

   /**
    * f0 -> Type()
    */
   public R visit(UnmanagedType n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> <DBL_COLON>
    * f2 -> Identifier()
    * f3 -> TypeArgumentListOpt()
    */
   public R visit(QualifiedAliasMember n, A argu);

   /**
    * f0 -> <USING>
    * f1 -> NamespaceName()
    * f2 -> <SEMICOLON>
    */
   public R visit(UsingNamespaceDirective n, A argu);

   /**
    * f0 -> NamespaceOrTypeName()
    */
   public R visit(NamespaceName n, A argu);

   /**
    * f0 -> <USING>
    * f1 -> <STATIC>
    * f2 -> TypeName()
    * f3 -> <SEMICOLON>
    */
   public R visit(UsingStaticDirective n, A argu);

   /**
    * f0 -> GlobalAttributesSectionList()
    */
   public R visit(GlobalAttributes n, A argu);

   /**
    * f0 -> GlobalAttributesSection() GlobalAttributesSectionList()
    *       | GlobalAttributesSection()
    */
   public R visit(GlobalAttributesSectionList n, A argu);

   /**
    * f0 -> <LBRACKET> GlobalAttributeTargetSpecifier() AttributeList() <COMMA> <RBRACKET>
    *       | <LBRACKET> GlobalAttributeTargetSpecifier() AttributeList() <RBRACKET>
    */
   public R visit(GlobalAttributesSection n, A argu);

   /**
    * f0 -> GlobalAttributeSpecifier()
    * f1 -> <COLON>
    */
   public R visit(GlobalAttributeTargetSpecifier n, A argu);

   /**
    * f0 -> <ASSEMBLY>
    *       | <MODULE>
    */
   public R visit(GlobalAttributeSpecifier n, A argu);

   /**
    * f0 -> Attribute()
    * f1 -> MoreAttributes()
    */
   public R visit(AttributeList n, A argu);

   /**
    * f0 -> AttributeName()
    * f1 -> AttributeArgumentsOpt()
    */
   public R visit(Attribute n, A argu);

   /**
    * f0 -> [ <COMMA> Attribute() MoreAttributes() ]
    */
   public R visit(MoreAttributes n, A argu);

   /**
    * f0 -> TypeName()
    */
   public R visit(AttributeName n, A argu);

   /**
    * f0 -> [ AttributeArguments() ]
    */
   public R visit(AttributeArgumentsOpt n, A argu);

   /**
    * f0 -> <LPAREN>
    * f1 -> [ UniversalArgumentList() ]
    * f2 -> <RPAREN>
    */
   public R visit(AttributeArguments n, A argu);

   /**
    * f0 -> UniversalArgument()
    * f1 -> MoreUniversalArguments()
    */
   public R visit(UniversalArgumentList n, A argu);

   /**
    * f0 -> [ <COMMA> UniversalArgument() MoreUniversalArguments() ]
    */
   public R visit(MoreUniversalArguments n, A argu);

   /**
    * f0 -> NamedArgument()
    *       | PositionalArgument()
    */
   public R visit(UniversalArgument n, A argu);

   /**
    * f0 -> [ PositionalArgumentList() ]
    */
   public R visit(PositionalArgumentListOpt n, A argu);

   /**
    * f0 -> PositionalArgument()
    * f1 -> MorePositionalArguments()
    */
   public R visit(PositionalArgumentList n, A argu);

   /**
    * f0 -> AttributeArgumentExpression()
    */
   public R visit(PositionalArgument n, A argu);

   /**
    * f0 -> Expression()
    */
   public R visit(AttributeArgumentExpression n, A argu);

   /**
    * f0 -> [ <COMMA> PositionalArgument() MorePositionalArguments() ]
    */
   public R visit(MorePositionalArguments n, A argu);

   /**
    * f0 -> NamedArgument()
    * f1 -> MoreNamedArguments()
    */
   public R visit(NamedArgumentList n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> <COLON>
    * f2 -> AttributeArgumentExpression()
    */
   public R visit(NamedArgument n, A argu);

   /**
    * f0 -> [ <COMMA> NamedArgument() MoreNamedArguments() ]
    */
   public R visit(MoreNamedArguments n, A argu);

   /**
    * f0 -> NamespaceDeclaration()
    *       | TypeDeclaration()
    */
   public R visit(NamespaceMemberDeclaration n, A argu);

   /**
    * f0 -> <NAMESPACE>
    * f1 -> QualifiedIdentifier()
    * f2 -> NamespaceBody()
    * f3 -> SemicolonOpt()
    */
   public R visit(NamespaceDeclaration n, A argu);

   /**
    * f0 -> [ <SEMICOLON> ]
    */
   public R visit(SemicolonOpt n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> MoreIdentifiers()
    */
   public R visit(QualifiedIdentifier n, A argu);

   /**
    * f0 -> [ <DOT> Identifier() MoreIdentifiers() ]
    */
   public R visit(MoreIdentifiers n, A argu);

   /**
    * f0 -> <LBRACE>
    * f1 -> ExternAliasDirectiveList()
    * f2 -> UsingDirectiveList()
    * f3 -> NamespaceMemberDeclarationList()
    * f4 -> <RBRACE>
    */
   public R visit(NamespaceBody n, A argu);

   /**
    * f0 -> ClassDeclaration()
    *       | StructDeclaration()
    *       | InterfaceDeclaration()
    *       | EnumDeclaration()
    *       | DelegateDeclaration()
    */
   public R visit(TypeDeclaration n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> ClassModifierList()
    * f2 -> PartialOpt()
    * f3 -> <CLASS>
    * f4 -> Identifier()
    * f5 -> TypeParameterListOpt()
    * f6 -> ClassBaseOpt()
    * f7 -> TypeParameterConstraintsClauseList()
    * f8 -> ClassBody()
    * f9 -> SemicolonOpt()
    */
   public R visit(ClassDeclaration n, A argu);

   /**
    * f0 -> ( AttributeSection() )*
    */
   public R visit(AttributesOpt n, A argu);

   /**
    * f0 -> [ ClassModifier() ClassModifierList() ]
    */
   public R visit(ClassModifierList n, A argu);

   /**
    * f0 -> [ <PARTIAL> ]
    */
   public R visit(PartialOpt n, A argu);

   /**
    * f0 -> [ TypeParameterList() ]
    */
   public R visit(TypeParameterListOpt n, A argu);

   /**
    * f0 -> [ ClassBase() ]
    */
   public R visit(ClassBaseOpt n, A argu);

   /**
    * f0 -> [ TypeParameterConstraintsClause() TypeParameterConstraintsClauseList() ]
    */
   public R visit(TypeParameterConstraintsClauseList n, A argu);

   /**
    * f0 -> AttributeSectionList()
    */
   public R visit(Attributes n, A argu);

   /**
    * f0 -> AttributeSection() AttributeSectionList()
    *       | AttributeSection()
    */
   public R visit(AttributeSectionList n, A argu);

   /**
    * f0 -> <LBRACKET> AttributeTargetSpecifierOpt() AttributeList() <COMMA> <RBRACKET>
    *       | <LBRACKET> AttributeTargetSpecifierOpt() AttributeList() <RBRACKET>
    */
   public R visit(AttributeSection n, A argu);

   /**
    * f0 -> [ AttributeTargetSpecifier() ]
    */
   public R visit(AttributeTargetSpecifierOpt n, A argu);

   /**
    * f0 -> AttributeTarget()
    * f1 -> <COLON>
    */
   public R visit(AttributeTargetSpecifier n, A argu);

   /**
    * f0 -> <FIELD>
    *       | <EVENT>
    *       | <METHOD>
    *       | <PARAM>
    *       | <PROPERTY>
    *       | <RETURN>
    *       | <TYPE>
    */
   public R visit(AttributeTarget n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <ABSTRACT>
    *       | <SEALED>
    *       | <STATIC>
    *       | ClassModifierUnsafe()
    */
   public R visit(ClassModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(ClassModifierUnsafe n, A argu);

   /**
    * f0 -> <LESS>
    * f1 -> TypeParameters()
    * f2 -> <GREATER>
    */
   public R visit(TypeParameterList n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> TypeParameter()
    * f2 -> TypeParametersPrime()
    */
   public R visit(TypeParameters n, A argu);

   /**
    * f0 -> [ <COMMA> AttributesOpt() TypeParameter() TypeParametersPrime() ]
    */
   public R visit(TypeParametersPrime n, A argu);

   /**
    * f0 -> <COLON> ClassType() <COMMA> InterfaceTypeList()
    *       | <OBJECT>
    *       | <DYNAMIC>
    *       | <STRING>
    *       | <COLON> InterfaceTypeList()
    */
   public R visit(ClassBase n, A argu);

   /**
    * f0 -> InterfaceType()
    * f1 -> MoreInterfaceTypes()
    */
   public R visit(InterfaceTypeList n, A argu);

   /**
    * f0 -> [ <COMMA> InterfaceType() MoreInterfaceTypes() ]
    */
   public R visit(MoreInterfaceTypes n, A argu);

   /**
    * f0 -> <WHERE>
    * f1 -> TypeParameter()
    * f2 -> <COLON>
    * f3 -> TypeParameterConstraints()
    */
   public R visit(TypeParameterConstraintsClause n, A argu);

   /**
    * f0 -> PrimaryConstraint() <COMMA> SecondaryConstraints() <COMMA> ConstructorConstraint()
    *       | PrimaryConstraint() <COMMA> SecondaryConstraints()
    *       | PrimaryConstraint() <COMMA> ConstructorConstraint()
    *       | PrimaryConstraint()
    *       | SecondaryConstraints() <COMMA> ConstructorConstraint()
    *       | SecondaryConstraints()
    *       | ConstructorConstraint()
    */
   public R visit(TypeParameterConstraints n, A argu);

   /**
    * f0 -> ClassType()
    *       | <CLASS>
    *       | <STRUCT>
    */
   public R visit(PrimaryConstraint n, A argu);

   /**
    * f0 -> InterfaceType()
    * f1 -> SecondaryConstraintsPrime()
    */
   public R visit(SecondaryConstraints n, A argu);

   /**
    * f0 -> [ <COMMA> InterfaceType() SecondaryConstraintsPrime() ]
    */
   public R visit(SecondaryConstraintsPrime n, A argu);

   /**
    * f0 -> <NEW>
    * f1 -> <LPAREN>
    * f2 -> <RPAREN>
    */
   public R visit(ConstructorConstraint n, A argu);

   /**
    * f0 -> <LBRACE>
    * f1 -> ClassMemberDeclarationList()
    * f2 -> <RBRACE>
    */
   public R visit(ClassBody n, A argu);

   /**
    * f0 -> [ ClassMemberDeclaration() ClassMemberDeclarationList() ]
    */
   public R visit(ClassMemberDeclarationList n, A argu);

   /**
    * f0 -> MethodDeclaration()
    *       | ConstantDeclaration()
    *       | EventDeclaration()
    *       | IndexerDeclaration()
    *       | OperatorDeclaration()
    *       | DestructorDeclaration()
    *       | ConstructorDeclaration()
    *       | StaticConstructorDeclaration()
    *       | PropertyDeclaration()
    *       | FieldDeclaration()
    *       | TypeDeclaration()
    */
   public R visit(ClassMemberDeclaration n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> MethodModifierList()
    * f2 -> PartialOpt()
    * f3 -> ReturnType()
    * f4 -> MemberName()
    * f5 -> TypeParameterListOpt()
    * f6 -> <LPAREN>
    */
   public R visit(MethodHeaderLookahead n, A argu);

   /**
    * f0 -> AttributesOpt() ExternOpt() <TILDE>
    *       | AttributesOpt() ExternOpt() UnsafeOpt() <TILDE>
    *       | AttributesOpt() UnsafeOpt() ExternOpt() <TILDE>
    */
   public R visit(DestructorDeclarationLookahead n, A argu);

   /**
    * f0 -> Type() <THIS>
    *       | Type() InterfaceType() <DOT> <THIS> <LBRACKET>
    */
   public R visit(IndexerDeclaratorLookahead n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> ConstantModifierList()
    * f2 -> <CONST>
    * f3 -> Type()
    * f4 -> ConstantDeclarators()
    * f5 -> <SEMICOLON>
    */
   public R visit(ConstantDeclaration n, A argu);

   /**
    * f0 -> [ ConstantModifier() ConstantModifierList() ]
    */
   public R visit(ConstantModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    */
   public R visit(ConstantModifier n, A argu);

   /**
    * f0 -> ConstantDeclarator()
    * f1 -> MoreConstantDeclarators()
    */
   public R visit(ConstantDeclarators n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> <EQUAL>
    * f2 -> ConstantExpression()
    */
   public R visit(ConstantDeclarator n, A argu);

   /**
    * f0 -> Expression()
    */
   public R visit(ConstantExpression n, A argu);

   /**
    * f0 -> [ <COMMA> ConstantDeclarator() MoreConstantDeclarators() ]
    */
   public R visit(MoreConstantDeclarators n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> FieldModifierList()
    * f2 -> Type()
    * f3 -> VariableDeclarators()
    * f4 -> <SEMICOLON>
    */
   public R visit(FieldDeclaration n, A argu);

   /**
    * f0 -> [ FieldModifier() FieldModifierList() ]
    */
   public R visit(FieldModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <STATIC>
    *       | <READONLY>
    *       | <VOLATILE>
    *       | FieldModifierUnsafe()
    */
   public R visit(FieldModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(FieldModifierUnsafe n, A argu);

   /**
    * f0 -> VariableDeclarator()
    * f1 -> MoreVariableDeclarators()
    */
   public R visit(VariableDeclarators n, A argu);

   /**
    * f0 -> Identifier() <EQUAL> VariableInitializer()
    *       | Identifier()
    */
   public R visit(VariableDeclarator n, A argu);

   /**
    * f0 -> Expression()
    *       | ArrayInitializer()
    */
   public R visit(VariableInitializer n, A argu);

   /**
    * f0 -> [ <COMMA> VariableDeclarator() MoreVariableDeclarators() ]
    */
   public R visit(MoreVariableDeclarators n, A argu);

   /**
    * f0 -> MethodHeader()
    * f1 -> MethodBody()
    */
   public R visit(MethodDeclaration n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> MethodModifierList()
    * f2 -> PartialOpt()
    * f3 -> ReturnType()
    * f4 -> MemberName()
    * f5 -> TypeParameterListOpt()
    * f6 -> <LPAREN>
    * f7 -> FormalParameterListOpt()
    * f8 -> <RPAREN>
    * f9 -> TypeParameterConstraintsClauseList()
    */
   public R visit(MethodHeader n, A argu);

   /**
    * f0 -> [ MethodModifier() MethodModifierList() ]
    */
   public R visit(MethodModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <STATIC>
    *       | <VIRTUAL>
    *       | <SEALED>
    *       | <OVERRIDE>
    *       | <ABSTRACT>
    *       | <EXTERN>
    *       | <ASYNC>
    *       | MethodModifierUnsafe()
    */
   public R visit(MethodModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(MethodModifierUnsafe n, A argu);

   /**
    * f0 -> <VOID>
    *       | Type()
    */
   public R visit(ReturnType n, A argu);

   /**
    * f0 -> InterfaceType()
    *       | Identifier()
    */
   public R visit(MemberName n, A argu);

   /**
    * f0 -> [ FormalParameterList() ]
    */
   public R visit(FormalParameterListOpt n, A argu);

   /**
    * f0 -> ParameterArray()
    *       | FixedParameters()
    */
   public R visit(FormalParameterList n, A argu);

   /**
    * f0 -> FixedParameter()
    * f1 -> MoreFixedParameters()
    * f2 -> ParameterArrayOpt()
    */
   public R visit(FixedParameters n, A argu);

   /**
    * f0 -> [ <COMMA> FixedParameter() MoreFixedParameters() ParameterArrayOpt() ]
    */
   public R visit(MoreFixedParameters n, A argu);

   /**
    * f0 -> [ <COMMA> ParameterArray() ]
    */
   public R visit(ParameterArrayOpt n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> ParameterModifierOpt()
    * f2 -> Type()
    * f3 -> Identifier()
    * f4 -> DefaultArgumentOpt()
    */
   public R visit(FixedParameter n, A argu);

   /**
    * f0 -> [ ParameterModifier() ]
    */
   public R visit(ParameterModifierOpt n, A argu);

   /**
    * f0 -> <REF>
    *       | <OUT>
    *       | <THIS>
    */
   public R visit(ParameterModifier n, A argu);

   /**
    * f0 -> [ DefaultArgument() ]
    */
   public R visit(DefaultArgumentOpt n, A argu);

   /**
    * f0 -> <EQUAL>
    * f1 -> Expression()
    */
   public R visit(DefaultArgument n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> <PARAMS>
    * f2 -> ArrayType()
    * f3 -> Identifier()
    */
   public R visit(ParameterArray n, A argu);

   /**
    * f0 -> Block()
    *       | <EQUAL_GREATER> Expression() <SEMICOLON>
    *       | <SEMICOLON>
    */
   public R visit(MethodBody n, A argu);

   /**
    * f0 -> StatementList()
    */
   public R visit(StatementListOpt n, A argu);

   /**
    * f0 -> [ Statement() StatementList() ]
    */
   public R visit(StatementList n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> PropertyModifierList()
    * f2 -> Type()
    * f3 -> MemberName()
    * f4 -> PropertyBody()
    */
   public R visit(PropertyDeclaration n, A argu);

   /**
    * f0 -> [ PropertyModifier() PropertyModifierList() ]
    */
   public R visit(PropertyModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <STATIC>
    *       | <VIRTUAL>
    *       | <SEALED>
    *       | <OVERRIDE>
    *       | <ABSTRACT>
    *       | <EXTERN>
    */
   public R visit(PropertyModifier n, A argu);

   /**
    * f0 -> <LBRACE> AccessorDeclarations() <RBRACE> PropertyInitializerOpt()
    *       | <EQUAL_GREATER> Expression() <SEMICOLON>
    */
   public R visit(PropertyBody n, A argu);

   /**
    * f0 -> GetAccessorDeclaration() SetAccessorDeclaration()
    *       | GetAccessorDeclaration()
    *       | SetAccessorDeclaration() GetAccessorDeclaration()
    *       | SetAccessorDeclaration()
    */
   public R visit(AccessorDeclarations n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> AccessorModifierOpt()
    * f2 -> <GET>
    * f3 -> AccessorBody()
    */
   public R visit(GetAccessorDeclaration n, A argu);

   /**
    * f0 -> [ AccessorModifier() ]
    */
   public R visit(AccessorModifierOpt n, A argu);

   /**
    * f0 -> <PROTECTED> <INTERNAL>
    *       | <INTERNAL> <PROTECTED>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    */
   public R visit(AccessorModifier n, A argu);

   /**
    * f0 -> Block()
    *       | <SEMICOLON>
    */
   public R visit(AccessorBody n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> AccessorModifierOpt()
    * f2 -> <SET>
    * f3 -> AccessorBody()
    */
   public R visit(SetAccessorDeclaration n, A argu);

   /**
    * f0 -> [ PropertyInitializer() ]
    */
   public R visit(PropertyInitializerOpt n, A argu);

   /**
    * f0 -> <EQUAL>
    * f1 -> VariableInitializer()
    * f2 -> <SEMICOLON>
    */
   public R visit(PropertyInitializer n, A argu);

   /**
    * f0 -> AttributesOpt() EventModifierList() <EVENT> Type() MemberName() <LBRACE> EventAccessorDeclarations() <RBRACE>
    *       | AttributesOpt() EventModifierList() <EVENT> Type() VariableDeclarators() <SEMICOLON>
    */
   public R visit(EventDeclaration n, A argu);

   /**
    * f0 -> [ EventModifier() EventModifierList() ]
    */
   public R visit(EventModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <STATIC>
    *       | <VIRTUAL>
    *       | <SEALED>
    *       | <OVERRIDE>
    *       | <ABSTRACT>
    *       | <EXTERN>
    *       | EventModifierUnsafe()
    */
   public R visit(EventModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(EventModifierUnsafe n, A argu);

   /**
    * f0 -> AddAccessorDeclaration() RemoveAccessorDeclaration()
    *       | RemoveAccessorDeclaration() AddAccessorDeclaration()
    */
   public R visit(EventAccessorDeclarations n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> <ADD>
    * f2 -> Block()
    */
   public R visit(AddAccessorDeclaration n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> <REMOVE>
    * f2 -> Block()
    */
   public R visit(RemoveAccessorDeclaration n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> IndexerModifierList()
    * f2 -> IndexerDeclarator()
    * f3 -> IndexerBody()
    */
   public R visit(IndexerDeclaration n, A argu);

   /**
    * f0 -> [ IndexerModifier() IndexerModifierList() ]
    */
   public R visit(IndexerModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <VIRTUAL>
    *       | <SEALED>
    *       | <OVERRIDE>
    *       | <ABSTRACT>
    *       | <EXTERN>
    *       | IndexerModifierUnsafe()
    */
   public R visit(IndexerModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(IndexerModifierUnsafe n, A argu);

   /**
    * f0 -> Type() <THIS> <LBRACKET> FormalParameterList() <RBRACKET>
    *       | Type() InterfaceType() <DOT> <THIS> <LBRACKET> FormalParameterList() <RBRACKET>
    */
   public R visit(IndexerDeclarator n, A argu);

   /**
    * f0 -> <LBRACE> AccessorDeclarations() <RBRACE>
    *       | <EQUAL_GREATER> Expression() <SEMICOLON>
    */
   public R visit(IndexerBody n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> OperatorModifierList()
    * f2 -> OperatorDeclarator()
    * f3 -> OperatorBody()
    */
   public R visit(OperatorDeclaration n, A argu);

   /**
    * f0 -> [ OperatorModifier() OperatorModifierList() ]
    */
   public R visit(OperatorModifierList n, A argu);

   /**
    * f0 -> <PUBLIC>
    *       | <STATIC>
    *       | <EXTERN>
    *       | OperatorModifierUnsafe()
    */
   public R visit(OperatorModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(OperatorModifierUnsafe n, A argu);

   /**
    * f0 -> BinaryOperatorDeclarator()
    *       | ConversionOperatorDeclarator()
    *       | UnaryOperatorDeclarator()
    */
   public R visit(OperatorDeclarator n, A argu);

   /**
    * f0 -> Type()
    * f1 -> <OPERATOR>
    * f2 -> OverloadableUnaryOperator()
    * f3 -> <LPAREN>
    * f4 -> Type()
    * f5 -> Identifier()
    * f6 -> <RPAREN>
    */
   public R visit(UnaryOperatorDeclarator n, A argu);

   /**
    * f0 -> <PLUS>
    *       | <MINUS>
    *       | <EXCLAMATION>
    *       | <TILDE>
    *       | <DBL_PLUS>
    *       | <DBL_MINUS>
    *       | <TRUE>
    *       | <FALSE>
    */
   public R visit(OverloadableUnaryOperator n, A argu);

   /**
    * f0 -> Type()
    * f1 -> <OPERATOR>
    * f2 -> OverloadableBinaryOperator()
    * f3 -> <LPAREN>
    * f4 -> Type()
    * f5 -> Identifier()
    * f6 -> <COMMA>
    * f7 -> Type()
    * f8 -> Identifier()
    * f9 -> <RPAREN>
    */
   public R visit(BinaryOperatorDeclarator n, A argu);

   /**
    * f0 -> <PLUS>
    *       | <MINUS>
    *       | <ASTERISK>
    *       | <SLASH>
    *       | <PERCENT>
    *       | <AMPERSAND>
    *       | <VERTICAL>
    *       | <CARET>
    *       | <DBL_LESS>
    *       | <DBL_GREATER>
    *       | <DBL_EQUAL>
    *       | <EXCL_EQUAL>
    *       | <GREATER>
    *       | <LESS>
    *       | <GREATER_EQUAL>
    *       | <LESS_EQUAL>
    */
   public R visit(OverloadableBinaryOperator n, A argu);

   /**
    * f0 -> <IMPLICIT> <OPERATOR> Type() <LPAREN> Type() Identifier() DefaultArgumentOpt() <RPAREN>
    *       | <EXPLICIT> <OPERATOR> Type() <LPAREN> Type() Identifier() DefaultArgumentOpt() <RPAREN>
    */
   public R visit(ConversionOperatorDeclarator n, A argu);

   /**
    * f0 -> Block()
    *       | <EQUAL_GREATER> Expression() <SEMICOLON>
    *       | <SEMICOLON>
    */
   public R visit(OperatorBody n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> ConstructorModifierList()
    * f2 -> ConstructorDeclarator()
    * f3 -> ConstructorBody()
    */
   public R visit(ConstructorDeclaration n, A argu);

   /**
    * f0 -> [ ConstructorModifier() ConstructorModifierList() ]
    */
   public R visit(ConstructorModifierList n, A argu);

   /**
    * f0 -> <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <EXTERN>
    *       | ConstructorModifierUnsafe()
    */
   public R visit(ConstructorModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(ConstructorModifierUnsafe n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> <LPAREN>
    * f2 -> FormalParameterListOpt()
    * f3 -> <RPAREN>
    * f4 -> ConstructorInitializerOpt()
    */
   public R visit(ConstructorDeclarator n, A argu);

   /**
    * f0 -> [ ConstructorInitializer() ]
    */
   public R visit(ConstructorInitializerOpt n, A argu);

   /**
    * f0 -> <COLON> <BASE> <LPAREN> ArgumentListOpt() <RPAREN>
    *       | <COLON> <THIS> <LPAREN> ArgumentListOpt() <RPAREN>
    */
   public R visit(ConstructorInitializer n, A argu);

   /**
    * f0 -> [ ArgumentList() ]
    */
   public R visit(ArgumentListOpt n, A argu);

   /**
    * f0 -> Argument()
    * f1 -> MoreArguments()
    */
   public R visit(ArgumentList n, A argu);

   /**
    * f0 -> ArgumentNameOpt()
    * f1 -> ArgumentValue()
    */
   public R visit(Argument n, A argu);

   /**
    * f0 -> [ <COMMA> Argument() MoreArguments() ]
    */
   public R visit(MoreArguments n, A argu);

   /**
    * f0 -> [ ArgumentName() ]
    */
   public R visit(ArgumentNameOpt n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> <COLON>
    */
   public R visit(ArgumentName n, A argu);

   /**
    * f0 -> Expression()
    *       | <REF> VariableReference()
    *       | <OUT> VariableReference()
    */
   public R visit(ArgumentValue n, A argu);

   /**
    * f0 -> Expression()
    */
   public R visit(VariableReference n, A argu);

   /**
    * f0 -> Block()
    *       | <SEMICOLON>
    */
   public R visit(ConstructorBody n, A argu);

   /**
    * f0 -> AttributesOpt() ExternOpt() <TILDE> Identifier() <LPAREN> <RPAREN> DestructorBody()
    *       | DestructorDeclarationUnsafe()
    */
   public R visit(DestructorDeclaration n, A argu);

   /**
    * f0 -> [ <EXTERN> ]
    */
   public R visit(ExternOpt n, A argu);

   /**
    * f0 -> Block()
    *       | <SEMICOLON>
    */
   public R visit(DestructorBody n, A argu);

   /**
    * f0 -> AttributesOpt() ExternOpt() UnsafeOpt() <TILDE> Identifier() <LPAREN> <RPAREN> DestructorBody()
    *       | AttributesOpt() UnsafeOpt() ExternOpt() <TILDE> Identifier() <LPAREN> <RPAREN> DestructorBody()
    */
   public R visit(DestructorDeclarationUnsafe n, A argu);

   /**
    * f0 -> [ <UNSAFE> ]
    */
   public R visit(UnsafeOpt n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> StaticConstructorModifiers()
    * f2 -> Identifier()
    * f3 -> <LPAREN>
    * f4 -> <RPAREN>
    * f5 -> StaticConstructorBody()
    */
   public R visit(StaticConstructorDeclaration n, A argu);

   /**
    * f0 -> ( <EXTERN> | <UNSAFE> )*
    * f1 -> <STATIC>
    * f2 -> ( <EXTERN> | <UNSAFE> )*
    */
   public R visit(StaticConstructorModifiers n, A argu);

   /**
    * f0 -> ( <EXTERN> | <UNSAFE> )*
    * f1 -> <STATIC>
    * f2 -> ( <EXTERN> | <UNSAFE> )*
    */
   public R visit(StaticConstructorModifiersUnsafe n, A argu);

   /**
    * f0 -> Block()
    *       | <SEMICOLON>
    */
   public R visit(StaticConstructorBody n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> StructModifierList()
    * f2 -> PartialOpt()
    * f3 -> <STRUCT>
    * f4 -> Identifier()
    * f5 -> TypeParameterListOpt()
    * f6 -> StructInterfacesOpt()
    * f7 -> TypeParameterConstraintsClauseList()
    * f8 -> StructBody()
    * f9 -> SemicolonOpt()
    */
   public R visit(StructDeclaration n, A argu);

   /**
    * f0 -> [ StructModifier() StructModifierList() ]
    */
   public R visit(StructModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | StructModifierUnsafe()
    */
   public R visit(StructModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(StructModifierUnsafe n, A argu);

   /**
    * f0 -> [ StructInterfaces() ]
    */
   public R visit(StructInterfacesOpt n, A argu);

   /**
    * f0 -> <COLON>
    * f1 -> InterfaceTypeList()
    */
   public R visit(StructInterfaces n, A argu);

   /**
    * f0 -> <LBRACE>
    * f1 -> ( StructMemberDeclaration() )*
    * f2 -> <RBRACE>
    */
   public R visit(StructBody n, A argu);

   /**
    * f0 -> StructMemberDeclarationUnsafe()
    *       | ConstantDeclaration()
    *       | PropertyDeclaration()
    *       | MethodDeclaration()
    *       | EventDeclaration()
    *       | IndexerDeclaration()
    *       | OperatorDeclaration()
    *       | ConstructorDeclaration()
    *       | StaticConstructorDeclaration()
    *       | FieldDeclaration()
    *       | TypeDeclaration()
    */
   public R visit(StructMemberDeclaration n, A argu);

   /**
    * f0 -> FixedSizedBufferDeclaration()
    */
   public R visit(StructMemberDeclarationUnsafe n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> FixedSizeBufferModifierList()
    * f2 -> <FIXED>
    * f3 -> BufferElementType()
    * f4 -> FixedSizeBufferDeclaratorList()
    * f5 -> <SEMICOLON>
    */
   public R visit(FixedSizedBufferDeclaration n, A argu);

   /**
    * f0 -> [ FixedSizeBufferModifier() FixedSizeBufferModifierList() ]
    */
   public R visit(FixedSizeBufferModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <UNSAFE>
    */
   public R visit(FixedSizeBufferModifier n, A argu);

   /**
    * f0 -> Type()
    */
   public R visit(BufferElementType n, A argu);

   /**
    * f0 -> ( FixedSizeBufferDeclarator() )+
    */
   public R visit(FixedSizeBufferDeclaratorList n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> <LBRACKET>
    * f2 -> ConstantExpression()
    * f3 -> <RBRACKET>
    */
   public R visit(FixedSizeBufferDeclarator n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> InterfaceModifierList()
    * f2 -> PartialOpt()
    * f3 -> <INTERFACE>
    * f4 -> Identifier()
    * f5 -> VariantTypeParameterListOpt()
    * f6 -> InterfaceBaseOpt()
    * f7 -> TypeParameterConstraintsClauseList()
    * f8 -> InterfaceBody()
    * f9 -> SemicolonOpt()
    */
   public R visit(InterfaceDeclaration n, A argu);

   /**
    * f0 -> [ InterfaceModifier() InterfaceModifierList() ]
    */
   public R visit(InterfaceModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | InterfaceModifierUnsafe()
    */
   public R visit(InterfaceModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(InterfaceModifierUnsafe n, A argu);

   /**
    * f0 -> [ VariantTypeParameterList() ]
    */
   public R visit(VariantTypeParameterListOpt n, A argu);

   /**
    * f0 -> <LESS>
    * f1 -> VariantTypeParameters()
    * f2 -> <GREATER>
    */
   public R visit(VariantTypeParameterList n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> VarianceAnnotationOpt()
    * f2 -> TypeParameter()
    * f3 -> VariantTypeParametersPrime()
    */
   public R visit(VariantTypeParameters n, A argu);

   /**
    * f0 -> [ <COMMA> AttributesOpt() VarianceAnnotationOpt() TypeParameter() VariantTypeParametersPrime() ]
    */
   public R visit(VariantTypeParametersPrime n, A argu);

   /**
    * f0 -> [ VarianceAnnotation() ]
    */
   public R visit(VarianceAnnotationOpt n, A argu);

   /**
    * f0 -> <IN>
    *       | <OUT>
    */
   public R visit(VarianceAnnotation n, A argu);

   /**
    * f0 -> [ InterfaceBase() ]
    */
   public R visit(InterfaceBaseOpt n, A argu);

   /**
    * f0 -> <COLON>
    * f1 -> InterfaceTypeList()
    */
   public R visit(InterfaceBase n, A argu);

   /**
    * f0 -> <LBRACE>
    * f1 -> InterfaceMemberDeclarationList()
    * f2 -> <RBRACE>
    */
   public R visit(InterfaceBody n, A argu);

   /**
    * f0 -> [ InterfaceMemberPrefix() InterfaceMemberDeclaration() InterfaceMemberDeclarationList() ]
    */
   public R visit(InterfaceMemberDeclarationList n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> NewOpt()
    */
   public R visit(InterfaceMemberPrefix n, A argu);

   /**
    * f0 -> InterfaceEventDeclaration()
    *       | InterfaceIndexerDeclaration()
    *       | InterfacePropertyDeclaration()
    *       | InterfaceMethodDeclaration()
    */
   public R visit(InterfaceMemberDeclaration n, A argu);

   /**
    * f0 -> ReturnType()
    * f1 -> Identifier()
    * f2 -> [ TypeParameterList() ]
    * f3 -> <LPAREN>
    * f4 -> FormalParameterListOpt()
    * f5 -> <RPAREN>
    * f6 -> TypeParameterConstraintsClauseList()
    * f7 -> <SEMICOLON>
    */
   public R visit(InterfaceMethodDeclaration n, A argu);

   /**
    * f0 -> [ <NEW> ]
    */
   public R visit(NewOpt n, A argu);

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> <LBRACE>
    * f3 -> InterfaceAccessors()
    * f4 -> <RBRACE>
    */
   public R visit(InterfacePropertyDeclaration n, A argu);

   /**
    * f0 -> AttributesOpt() <GET> <SEMICOLON> AttributesOpt() <SET> <SEMICOLON>
    *       | AttributesOpt() <SET> <SEMICOLON> AttributesOpt() <GET> <SEMICOLON>
    *       | AttributesOpt() <GET> <SEMICOLON>
    *       | AttributesOpt() <SET> <SEMICOLON>
    */
   public R visit(InterfaceAccessors n, A argu);

   /**
    * f0 -> <EVENT>
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> <SEMICOLON>
    */
   public R visit(InterfaceEventDeclaration n, A argu);

   /**
    * f0 -> Type()
    * f1 -> <THIS>
    * f2 -> <LBRACKET>
    * f3 -> FormalParameterList()
    * f4 -> <RBRACKET>
    * f5 -> <LBRACE>
    * f6 -> InterfaceAccessors()
    * f7 -> <RBRACE>
    */
   public R visit(InterfaceIndexerDeclaration n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> EnumModifierList()
    * f2 -> <ENUM>
    * f3 -> Identifier()
    * f4 -> EnumBaseOpt()
    * f5 -> EnumBody()
    * f6 -> SemicolonOpt()
    */
   public R visit(EnumDeclaration n, A argu);

   /**
    * f0 -> [ EnumModifier() EnumModifierList() ]
    */
   public R visit(EnumModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    */
   public R visit(EnumModifier n, A argu);

   /**
    * f0 -> [ EnumBase() ]
    */
   public R visit(EnumBaseOpt n, A argu);

   /**
    * f0 -> <COLON>
    * f1 -> IntegralType()
    */
   public R visit(EnumBase n, A argu);

   /**
    * f0 -> <LBRACE> EnumMemberDeclarations() <COMMA> <RBRACE>
    *       | <LBRACE> EnumMemberDeclarations() <RBRACE>
    *       | <LBRACE> <RBRACE>
    */
   public R visit(EnumBody n, A argu);

   /**
    * f0 -> EnumMemberDeclaration()
    * f1 -> MoreEnumMemberDeclarations()
    */
   public R visit(EnumMemberDeclarations n, A argu);

   /**
    * f0 -> [ <COMMA> EnumMemberDeclaration() MoreEnumMemberDeclarations() ]
    */
   public R visit(MoreEnumMemberDeclarations n, A argu);

   /**
    * f0 -> AttributesOpt() Identifier() <EQUAL> ConstantExpression()
    *       | AttributesOpt() Identifier()
    */
   public R visit(EnumMemberDeclaration n, A argu);

   /**
    * f0 -> AttributesOpt()
    * f1 -> DelegateModifierList()
    * f2 -> <DELEGATE>
    * f3 -> ReturnType()
    * f4 -> Identifier()
    * f5 -> VariantTypeParameterListOpt()
    * f6 -> <LPAREN>
    * f7 -> FormalParameterListOpt()
    * f8 -> <RPAREN>
    * f9 -> TypeParameterConstraintsClauseList()
    * f10 -> SemicolonOpt()
    */
   public R visit(DelegateDeclaration n, A argu);

   /**
    * f0 -> [ DelegateModifier() DelegateModifierList() ]
    */
   public R visit(DelegateModifierList n, A argu);

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | DelegateModifierUnsafe()
    */
   public R visit(DelegateModifier n, A argu);

   /**
    * f0 -> <UNSAFE>
    */
   public R visit(DelegateModifierUnsafe n, A argu);

   /**
    * f0 -> QueryExpression()
    *       | LambdaExpression()
    *       | Assignment()
    *       | ConditionalExpression()
    */
   public R visit(Expression n, A argu);

   /**
    * f0 -> QueryExpression()
    *       | ConditionalExpression()
    *       | LambdaExpression()
    */
   public R visit(NonAssignmentExpression n, A argu);

   /**
    * f0 -> NullCoalescingExpression() <QUESTION> Expression() <COLON> Expression()
    *       | NullCoalescingExpression()
    */
   public R visit(ConditionalExpression n, A argu);

   /**
    * f0 -> ConditionalOrExpression() <DBL_QUESTION> NullCoalescingExpression()
    *       | ConditionalOrExpression()
    */
   public R visit(NullCoalescingExpression n, A argu);

   /**
    * f0 -> ConditionalAndExpression()
    * f1 -> ConditionalOrExpressionPrime()
    */
   public R visit(ConditionalOrExpression n, A argu);

   /**
    * f0 -> [ <DBL_VERTICAL> ConditionalAndExpression() ConditionalOrExpressionPrime() ]
    */
   public R visit(ConditionalOrExpressionPrime n, A argu);

   /**
    * f0 -> InclusiveOrExpression()
    * f1 -> ConditionalAndExpressionPrime()
    */
   public R visit(ConditionalAndExpression n, A argu);

   /**
    * f0 -> [ <DBL_AMPERSAND> InclusiveOrExpression() ConditionalAndExpressionPrime() ]
    */
   public R visit(ConditionalAndExpressionPrime n, A argu);

   /**
    * f0 -> ExclusiveOrExpression()
    * f1 -> InclusiveOrExpressionPrime()
    */
   public R visit(InclusiveOrExpression n, A argu);

   /**
    * f0 -> [ <VERTICAL> ExclusiveOrExpression() InclusiveOrExpressionPrime() ]
    */
   public R visit(InclusiveOrExpressionPrime n, A argu);

   /**
    * f0 -> AndExpression()
    * f1 -> ExclusiveOrExpressionPrime()
    */
   public R visit(ExclusiveOrExpression n, A argu);

   /**
    * f0 -> [ <CARET> AndExpression() ExclusiveOrExpressionPrime() ]
    */
   public R visit(ExclusiveOrExpressionPrime n, A argu);

   /**
    * f0 -> EqualityExpression()
    * f1 -> AndExpressionPrime()
    */
   public R visit(AndExpression n, A argu);

   /**
    * f0 -> [ <AMPERSAND> EqualityExpression() AndExpressionPrime() ]
    */
   public R visit(AndExpressionPrime n, A argu);

   /**
    * f0 -> RelationalExpression()
    * f1 -> EqualityExpressionPrime()
    */
   public R visit(EqualityExpression n, A argu);

   /**
    * f0 -> [ ( <DBL_EQUAL> RelationalExpression() EqualityExpressionPrime() | <EXCL_EQUAL> RelationalExpression() EqualityExpressionPrime() ) ]
    */
   public R visit(EqualityExpressionPrime n, A argu);

   /**
    * f0 -> ShiftExpression()
    * f1 -> RelationalExpressionPrime()
    */
   public R visit(RelationalExpression n, A argu);

   /**
    * f0 -> [ ( <LESS> ShiftExpression() RelationalExpressionPrime() | <GREATER> ShiftExpression() RelationalExpressionPrime() | <LESS_EQUAL> ShiftExpression() RelationalExpressionPrime() | <GREATER_EQUAL> ShiftExpression() RelationalExpressionPrime() | <IS> Type() RelationalExpressionPrime() | <AS> Type() RelationalExpressionPrime() ) ]
    */
   public R visit(RelationalExpressionPrime n, A argu);

   /**
    * f0 -> AdditiveExpression()
    * f1 -> ShiftExpressionPrime()
    */
   public R visit(ShiftExpression n, A argu);

   /**
    * f0 -> [ ( <DBL_LESS> AdditiveExpression() ShiftExpressionPrime() | <DBL_GREATER> AdditiveExpression() ShiftExpressionPrime() ) ]
    */
   public R visit(ShiftExpressionPrime n, A argu);

   /**
    * f0 -> MultiplicativeExpression()
    * f1 -> AdditiveExpressionPrime()
    */
   public R visit(AdditiveExpression n, A argu);

   /**
    * f0 -> [ ( <PLUS> MultiplicativeExpression() AdditiveExpressionPrime() | <MINUS> MultiplicativeExpression() AdditiveExpressionPrime() ) ]
    */
   public R visit(AdditiveExpressionPrime n, A argu);

   /**
    * f0 -> UnaryExpression()
    * f1 -> MultiplicativeExpressionPrime()
    */
   public R visit(MultiplicativeExpression n, A argu);

   /**
    * f0 -> [ ( <ASTERISK> UnaryExpression() MultiplicativeExpressionPrime() | <SLASH> UnaryExpression() MultiplicativeExpressionPrime() | <PERCENT> UnaryExpression() MultiplicativeExpressionPrime() ) ]
    */
   public R visit(MultiplicativeExpressionPrime n, A argu);

   /**
    * f0 -> CastExpression()
    *       | NullConditionalExpression()
    *       | <PLUS> UnaryExpression()
    *       | <MINUS> UnaryExpression()
    *       | <EXCLAMATION> UnaryExpression()
    *       | <TILDE> UnaryExpression()
    *       | PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | AwaitExpression()
    *       | UnaryExpressionUnsafe()
    *       | PrimaryExpression()
    */
   public R visit(UnaryExpression n, A argu);

   /**
    * f0 -> ArrayCreationExpression() PrimaryExpressionPrime()
    *       | PrimaryNoArrayCreationExpressionPrime() <LBRACKET> ExpressionList() <RBRACKET> PrimaryExpressionPrime()
    *       | PrimaryNoArrayCreationExpressionPrime() PrimaryExpressionPrime()
    *       | SizeofExpression() PrimaryExpressionPrime()
    *       | PredefinedType() <DOT> Identifier() TypeArgumentListOpt() PrimaryExpressionPrime()
    *       | QualifiedAliasMember() <DOT> Identifier() PrimaryExpressionPrime()
    */
   public R visit(PrimaryExpression n, A argu);

   /**
    * f0 -> [ <DOT> Identifier() TypeArgumentListOpt() PrimaryExpressionPrime() | <LPAREN> ArgumentListOpt() <RPAREN> PrimaryExpressionPrime() | <MINUS_GREATER> Identifier() PrimaryExpressionPrime() | <DBL_PLUS> PrimaryExpressionPrime() | <DBL_MINUS> PrimaryExpressionPrime() | <LBRACKET> ExpressionList() <RBRACKET> PrimaryExpressionPrime() ]
    */
   public R visit(PrimaryExpressionPrime n, A argu);

   /**
    * f0 -> Literal()
    *       | AnonymousMethodExpression()
    *       | SimpleName()
    *       | ParanthesizedExpression()
    *       | ThisAccess()
    *       | BaseAccess()
    *       | ObjectCreationExpression()
    *       | DelegateCreationExpression()
    *       | AnonymousObjectCreationExpression()
    *       | TypeofExpression()
    *       | CheckedExpression()
    *       | UncheckedExpression()
    *       | DefaultValueExpression()
    *       | NameofExpression()
    */
   public R visit(PrimaryNoArrayCreationExpressionPrime n, A argu);

   /**
    * f0 -> Literal() PrimaryNoArrayCreationExpressionPrime2()
    *       | AnonymousMethodExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | SimpleName() PrimaryNoArrayCreationExpressionPrime2()
    *       | ParanthesizedExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | MemberAccess() PrimaryNoArrayCreationExpressionPrime2()
    *       | InvocationExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | ThisAccess() PrimaryNoArrayCreationExpressionPrime2()
    *       | BaseAccess() PrimaryNoArrayCreationExpressionPrime2()
    *       | PostIncrementExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | PostDecrementExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | ObjectCreationExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | DelegateCreationExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | AnonymousObjectCreationExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | TypeofExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | CheckedExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | UncheckedExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | DefaultValueExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | NameofExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | PointerMemberAccess() PrimaryNoArrayCreationExpressionPrime2()
    *       | SizeofExpression() PrimaryNoArrayCreationExpressionPrime2()
    */
   public R visit(PrimaryNoArrayCreationExpression n, A argu);

   /**
    * f0 -> [ <LBRACKET> ExpressionList() <RBRACKET> PrimaryNoArrayCreationExpressionPrime2() ]
    */
   public R visit(PrimaryNoArrayCreationExpressionPrime2 n, A argu);

   /**
    * f0 -> <TRUE>
    *       | <FALSE>
    *       | <INTEGER_LITERAL>
    *       | <REAL_LITERAL>
    *       | <CHARACTER_LITERAL>
    *       | <STRING_LITERAL>
    *       | <NULL>
    */
   public R visit(Literal n, A argu);

   /**
    * f0 -> <IDENTIFIER>
    *       | <ADD>
    *       | <ALIAS>
    *       | <ASYNC>
    *       | <ASCENDING>
    *       | <ASSEMBLY>
    *       | <AWAIT>
    *       | <BY>
    *       | <DESCENDING>
    *       | <DYNAMIC>
    *       | <EQUALS>
    *       | <FIELD>
    *       | <FROM>
    *       | <GET>
    *       | <GROUP>
    *       | <INTO>
    *       | <JOIN>
    *       | <LET>
    *       | <METHOD>
    *       | <MODULE>
    *       | <NAMEOF>
    *       | <ON>
    *       | <ORDERBY>
    *       | <PARAM>
    *       | <PARTIAL>
    *       | <PROPERTY>
    *       | <REMOVE>
    *       | <SELECT>
    *       | <SET>
    *       | <TYPE>
    *       | <VAR>
    *       | <WHEN>
    *       | <WHERE>
    *       | <YIELD>
    */
   public R visit(Identifier n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> TypeArgumentListOpt()
    */
   public R visit(SimpleName n, A argu);

   /**
    * f0 -> <LPAREN>
    * f1 -> Expression()
    * f2 -> <RPAREN>
    */
   public R visit(ParanthesizedExpression n, A argu);

   /**
    * f0 -> PrimaryExpression() <DOT> Identifier() TypeArgumentListOpt()
    *       | PredefinedType() <DOT> Identifier() TypeArgumentListOpt()
    *       | QualifiedAliasMember() <DOT> Identifier()
    */
   public R visit(MemberAccess n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <LPAREN>
    * f2 -> ArgumentListOpt()
    * f3 -> <RPAREN>
    */
   public R visit(InvocationExpression n, A argu);

   /**
    * f0 -> PrimaryNoArrayCreationExpression()
    * f1 -> <LBRACKET>
    * f2 -> ExpressionList()
    * f3 -> <RBRACKET>
    */
   public R visit(ElementAccess n, A argu);

   /**
    * f0 -> Expression()
    * f1 -> MoreExpressions()
    */
   public R visit(ExpressionList n, A argu);

   /**
    * f0 -> [ <COMMA> Expression() MoreExpressions() ]
    */
   public R visit(MoreExpressions n, A argu);

   /**
    * f0 -> <THIS>
    */
   public R visit(ThisAccess n, A argu);

   /**
    * f0 -> <BASE> <DOT> Identifier()
    *       | <BASE> <LBRACKET> ExpressionList() <RBRACKET>
    */
   public R visit(BaseAccess n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <DBL_PLUS>
    */
   public R visit(PostIncrementExpression n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <DBL_MINUS>
    */
   public R visit(PostDecrementExpression n, A argu);

   /**
    * f0 -> <NEW> Type() <LPAREN> ArgumentListOpt() <RPAREN> ObjectOrCollectionInitializerOpt()
    *       | <NEW> Type() ObjectOrCollectionInitializerOpt()
    */
   public R visit(ObjectCreationExpression n, A argu);

   /**
    * f0 -> [ ObjectOrCollectionInitializer() ]
    */
   public R visit(ObjectOrCollectionInitializerOpt n, A argu);

   /**
    * f0 -> CollectionInitializer()
    *       | ObjectInitializer()
    */
   public R visit(ObjectOrCollectionInitializer n, A argu);

   /**
    * f0 -> <LBRACE> MemberInitializerList() <COMMA> <RBRACE>
    *       | <LBRACE> MemberInitializerListOpt() <RBRACE>
    */
   public R visit(ObjectInitializer n, A argu);

   /**
    * f0 -> [ MemberInitializerList() ]
    */
   public R visit(MemberInitializerListOpt n, A argu);

   /**
    * f0 -> MemberInitializer()
    * f1 -> MoreMemberInitializers()
    */
   public R visit(MemberInitializerList n, A argu);

   /**
    * f0 -> [ <COMMA> MemberInitializer() MoreMemberInitializers() ]
    */
   public R visit(MoreMemberInitializers n, A argu);

   /**
    * f0 -> InitializerTarget()
    * f1 -> <EQUAL>
    * f2 -> InitializerValue()
    */
   public R visit(MemberInitializer n, A argu);

   /**
    * f0 -> Identifier()
    *       | <LBRACKET> ArgumentList() <RBRACKET>
    */
   public R visit(InitializerTarget n, A argu);

   /**
    * f0 -> Expression()
    *       | ObjectOrCollectionInitializer()
    */
   public R visit(InitializerValue n, A argu);

   /**
    * f0 -> <LBRACE> ElementInitializerList() <COMMA> <RBRACE>
    *       | <LBRACE> ElementInitializerList() <RBRACE>
    */
   public R visit(CollectionInitializer n, A argu);

   /**
    * f0 -> ElementInitializer()
    * f1 -> MoreElementInitializers()
    */
   public R visit(ElementInitializerList n, A argu);

   /**
    * f0 -> [ <COMMA> ElementInitializer() MoreElementInitializers() ]
    */
   public R visit(MoreElementInitializers n, A argu);

   /**
    * f0 -> NonAssignmentExpression()
    *       | <LBRACE> ExpressionList() <RBRACE>
    */
   public R visit(ElementInitializer n, A argu);

   /**
    * f0 -> <NEW>
    * f1 -> DelegateType()
    * f2 -> <LPAREN>
    * f3 -> Expression()
    * f4 -> <RPAREN>
    */
   public R visit(DelegateCreationExpression n, A argu);

   /**
    * f0 -> <NEW>
    * f1 -> AnonymousObjectInitializer()
    */
   public R visit(AnonymousObjectCreationExpression n, A argu);

   /**
    * f0 -> <LBRACE> MemberDeclarattorListOpt() <COMMA> <RBRACE>
    *       | <LBRACE> MemberDeclarattorListOpt() <RBRACE>
    */
   public R visit(AnonymousObjectInitializer n, A argu);

   /**
    * f0 -> [ MemberDeclaratorList() ]
    */
   public R visit(MemberDeclarattorListOpt n, A argu);

   /**
    * f0 -> MemberDeclarator()
    * f1 -> MoreMemberDeclarators()
    */
   public R visit(MemberDeclaratorList n, A argu);

   /**
    * f0 -> [ <COMMA> MemberDeclarator() MoreMemberDeclarators() ]
    */
   public R visit(MoreMemberDeclarators n, A argu);

   /**
    * f0 -> Identifier() <EQUAL> Expression()
    *       | SimpleName()
    *       | MemberAccess()
    *       | BaseAccess()
    *       | NullConditionalMemberAccess()
    */
   public R visit(MemberDeclarator n, A argu);

   /**
    * f0 -> PrimaryExpression() NullConditionalOperationsOpt() <QUESTION> <DOT> Identifier() TypeArgumentListOpt()
    *       | PrimaryExpression() NullConditionalOperationsOpt() <DOT> Identifier() TypeArgumentListOpt()
    */
   public R visit(NullConditionalMemberAccess n, A argu);

   /**
    * f0 -> [ NullConditionalOperations() ]
    */
   public R visit(NullConditionalOperationsOpt n, A argu);

   /**
    * f0 -> <QUESTION> <DOT> Identifier() TypeArgumentListOpt() NullConditionalOperationsPrimeOpt()
    *       | <QUESTION> <LBRACKET> ArgumentList() <RBRACKET> NullConditionalOperationsPrimeOpt()
    */
   public R visit(NullConditionalOperations n, A argu);

   /**
    * f0 -> [ NullConditionalOperationsPrime() ]
    */
   public R visit(NullConditionalOperationsPrimeOpt n, A argu);

   /**
    * f0 -> <QUESTION> <DOT> Identifier() TypeArgumentListOpt() NullConditionalOperationsPrimeOpt()
    *       | <QUESTION> <LBRACKET> ArgumentList() <RBRACKET> NullConditionalOperationsPrimeOpt()
    *       | <DOT> Identifier() TypeArgumentListOpt() NullConditionalOperationsPrimeOpt()
    *       | <LBRACKET> ArgumentList() <RBRACKET> NullConditionalOperationsPrimeOpt()
    *       | <LPAREN> ArgumentListOpt() <RPAREN> NullConditionalOperationsPrimeOpt()
    */
   public R visit(NullConditionalOperationsPrime n, A argu);

   /**
    * f0 -> <TYPEOF> <LPAREN> <VOID> <RPAREN>
    *       | <TYPEOF> <LPAREN> Type() <RPAREN>
    *       | <TYPEOF> <LPAREN> UnboundTypeName() <RPAREN>
    */
   public R visit(TypeofExpression n, A argu);

   /**
    * f0 -> Identifier() <DBL_COLON> Identifier() GenericDimensionSpecifierOpt() UnboundTypeNamePrime()
    *       | Identifier() GenericDimensionSpecifierOpt() UnboundTypeNamePrime()
    */
   public R visit(UnboundTypeName n, A argu);

   /**
    * f0 -> [ <DOT> Identifier() GenericDimensionSpecifierOpt() UnboundTypeNamePrime() ]
    */
   public R visit(UnboundTypeNamePrime n, A argu);

   /**
    * f0 -> [ GenericDimensionSpecifier() ]
    */
   public R visit(GenericDimensionSpecifierOpt n, A argu);

   /**
    * f0 -> <LESS>
    * f1 -> CommaList()
    * f2 -> <GREATER>
    */
   public R visit(GenericDimensionSpecifier n, A argu);

   /**
    * f0 -> [ <COMMA> CommaList() ]
    */
   public R visit(CommaList n, A argu);

   /**
    * f0 -> <CHECKED>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    */
   public R visit(CheckedExpression n, A argu);

   /**
    * f0 -> <UNCHECKED>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    */
   public R visit(UncheckedExpression n, A argu);

   /**
    * f0 -> <_DEFAULT>
    * f1 -> <LPAREN>
    * f2 -> Type()
    * f3 -> <RPAREN>
    */
   public R visit(DefaultValueExpression n, A argu);

   /**
    * f0 -> <NAMEOF>
    * f1 -> <LPAREN>
    * f2 -> NamedEntity()
    * f3 -> <RPAREN>
    */
   public R visit(NameofExpression n, A argu);

   /**
    * f0 -> SimpleName() NamedEntityPrime()
    *       | NamedEntityTargetPrime() <DOT> Identifier() TypeArgumentListOpt() NamedEntityPrime()
    */
   public R visit(NamedEntity n, A argu);

   /**
    * f0 -> [ <DOT> Identifier() TypeArgumentListOpt() NamedEntityPrime() ]
    */
   public R visit(NamedEntityPrime n, A argu);

   /**
    * f0 -> <THIS>
    *       | <BASE>
    *       | PredefinedType()
    *       | QualifiedAliasMember()
    */
   public R visit(NamedEntityTargetPrime n, A argu);

   /**
    * f0 -> NamedEntity()
    *       | PredefinedType()
    *       | QualifiedAliasMember()
    *       | <THIS>
    *       | <BASE>
    */
   public R visit(NamedEntityTarget n, A argu);

   /**
    * f0 -> <BOOL>
    *       | <BYTE>
    *       | <CHAR>
    *       | <DECIMAL>
    *       | <DOUBLE>
    *       | <FLOAT>
    *       | <INT>
    *       | <LONG>
    *       | <OBJECT>
    *       | <SBYTE>
    *       | <SHORT>
    *       | <STRING>
    *       | <UINT>
    *       | <ULONG>
    *       | <USHORT>
    */
   public R visit(PredefinedType n, A argu);

   /**
    * f0 -> ( <ASYNC> )?
    * f1 -> <DELEGATE>
    * f2 -> ExplicitAnonymousFunctionSignatureOpt()
    * f3 -> Block()
    */
   public R visit(AnonymousMethodExpression n, A argu);

   /**
    * f0 -> [ ExplicitAnonymousFunctionSignature() ]
    */
   public R visit(ExplicitAnonymousFunctionSignatureOpt n, A argu);

   /**
    * f0 -> <LPAREN>
    * f1 -> ExplicitAnonymousFunctionParameterListOpt()
    * f2 -> <RPAREN>
    */
   public R visit(ExplicitAnonymousFunctionSignature n, A argu);

   /**
    * f0 -> [ ExplicitAnonymousFunctionParameterList() ]
    */
   public R visit(ExplicitAnonymousFunctionParameterListOpt n, A argu);

   /**
    * f0 -> ExplicitAnonymousFunctionParameter()
    * f1 -> MoreExplicitAnonymousFunctionParameters()
    */
   public R visit(ExplicitAnonymousFunctionParameterList n, A argu);

   /**
    * f0 -> [ <COMMA> ExplicitAnonymousFunctionParameter() MoreExplicitAnonymousFunctionParameters() ]
    */
   public R visit(MoreExplicitAnonymousFunctionParameters n, A argu);

   /**
    * f0 -> AnonymousFunctionParameterModifierOpt()
    * f1 -> Type()
    * f2 -> Identifier()
    */
   public R visit(ExplicitAnonymousFunctionParameter n, A argu);

   /**
    * f0 -> [ AnonymousFunctionParameterModifier() ]
    */
   public R visit(AnonymousFunctionParameterModifierOpt n, A argu);

   /**
    * f0 -> <REF>
    *       | <OUT>
    */
   public R visit(AnonymousFunctionParameterModifier n, A argu);

   /**
    * f0 -> PointerMemberAccess()
    *       | PointerElementAccess()
    *       | SizeofExpression()
    */
   public R visit(PrimaryNoArrayCreationExpressionUnsafe n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <MINUS_GREATER>
    * f2 -> Identifier()
    */
   public R visit(PointerMemberAccess n, A argu);

   /**
    * f0 -> PrimaryNoArrayCreationExpression()
    * f1 -> <LBRACKET>
    * f2 -> Expression()
    * f3 -> <RBRACKET>
    */
   public R visit(PointerElementAccess n, A argu);

   /**
    * f0 -> <SIZEOF>
    * f1 -> <LPAREN>
    * f2 -> UnmanagedType()
    * f3 -> <RPAREN>
    */
   public R visit(SizeofExpression n, A argu);

   /**
    * f0 -> <NEW> NonArrayType() <LBRACKET> ExpressionList() <RBRACKET> RankSpecifierListOpt() ArrayInitializerOpt()
    *       | <NEW> ArrayType() ArrayInitializer()
    *       | <NEW> RankSpecifier() ArrayInitializer()
    */
   public R visit(ArrayCreationExpression n, A argu);

   /**
    * f0 -> [ RankSpecifierList() ]
    */
   public R visit(RankSpecifierListOpt n, A argu);

   /**
    * f0 -> [ ArrayInitializer() ]
    */
   public R visit(ArrayInitializerOpt n, A argu);

   /**
    * f0 -> <LBRACE>
    * f1 -> VariableInitializerListOpt()
    * f2 -> [ <COMMA> ]
    * f3 -> <RBRACE>
    */
   public R visit(ArrayInitializer n, A argu);

   /**
    * f0 -> [ VariableInitializerList() ]
    */
   public R visit(VariableInitializerListOpt n, A argu);

   /**
    * f0 -> VariableInitializer()
    * f1 -> MoreVariableInitializers()
    */
   public R visit(VariableInitializerList n, A argu);

   /**
    * f0 -> [ <COMMA> VariableInitializer() MoreVariableInitializers() ]
    */
   public R visit(MoreVariableInitializers n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> NullConditionalOperations()
    */
   public R visit(NullConditionalExpression n, A argu);

   /**
    * f0 -> <DBL_PLUS>
    * f1 -> UnaryExpression()
    */
   public R visit(PreIncrementExpression n, A argu);

   /**
    * f0 -> <DBL_MINUS>
    * f1 -> UnaryExpression()
    */
   public R visit(PreDecrementExpression n, A argu);

   /**
    * f0 -> <LPAREN>
    * f1 -> Type()
    * f2 -> <RPAREN>
    * f3 -> UnaryExpression()
    */
   public R visit(CastExpression n, A argu);

   /**
    * f0 -> <AWAIT>
    * f1 -> UnaryExpression()
    */
   public R visit(AwaitExpression n, A argu);

   /**
    * f0 -> PointerIndirectionExpression()
    *       | AddressofExpression()
    */
   public R visit(UnaryExpressionUnsafe n, A argu);

   /**
    * f0 -> <ASTERISK>
    * f1 -> UnaryExpression()
    */
   public R visit(PointerIndirectionExpression n, A argu);

   /**
    * f0 -> <AMPERSAND>
    * f1 -> UnaryExpression()
    */
   public R visit(AddressofExpression n, A argu);

   /**
    * f0 -> LamdaExpressionModifierList()
    * f1 -> AnonymousFunctionSignature()
    * f2 -> <EQUAL_GREATER>
    * f3 -> AnonymousFunctionBody()
    */
   public R visit(LambdaExpression n, A argu);

   /**
    * f0 -> ( LambdaExpressionModifier() )*
    */
   public R visit(LamdaExpressionModifierList n, A argu);

   /**
    * f0 -> <ASYNC>
    */
   public R visit(LambdaExpressionModifier n, A argu);

   /**
    * f0 -> ExplicitAnonymousFunctionSignature()
    *       | ImplicitAnonymousFunctionSignature()
    */
   public R visit(AnonymousFunctionSignature n, A argu);

   /**
    * f0 -> <LPAREN> ImplicitAnonymousFunctionParameterListOpt() <RPAREN>
    *       | ImplicitAnonymousFunctionParameter()
    */
   public R visit(ImplicitAnonymousFunctionSignature n, A argu);

   /**
    * f0 -> [ ImplicitAnonymousFunctionParameterList() ]
    */
   public R visit(ImplicitAnonymousFunctionParameterListOpt n, A argu);

   /**
    * f0 -> ImplicitAnonymousFunctionParameter()
    * f1 -> MoreImplicitAnonymousFunctionParameters()
    */
   public R visit(ImplicitAnonymousFunctionParameterList n, A argu);

   /**
    * f0 -> [ <COMMA> ImplicitAnonymousFunctionParameter() MoreImplicitAnonymousFunctionParameters() ]
    */
   public R visit(MoreImplicitAnonymousFunctionParameters n, A argu);

   /**
    * f0 -> Identifier()
    */
   public R visit(ImplicitAnonymousFunctionParameter n, A argu);

   /**
    * f0 -> Expression()
    *       | Block()
    */
   public R visit(AnonymousFunctionBody n, A argu);

   /**
    * f0 -> FromClause()
    * f1 -> QueryBody()
    */
   public R visit(QueryExpression n, A argu);

   /**
    * f0 -> <FROM>
    * f1 -> [ Type() ]
    * f2 -> Identifier()
    * f3 -> <IN>
    * f4 -> Expression()
    */
   public R visit(FromClause n, A argu);

   /**
    * f0 -> [ Type() ]
    */
   public R visit(TypeOpt n, A argu);

   /**
    * f0 -> ( QueryBodyClause() )*
    * f1 -> SelectOrGroupClause()
    * f2 -> QueryContinuationOpt()
    */
   public R visit(QueryBody n, A argu);

   /**
    * f0 -> [ QueryBodyClauses() ]
    */
   public R visit(QueryBodyClausesOpt n, A argu);

   /**
    * f0 -> [ QueryContinuation() ]
    */
   public R visit(QueryContinuationOpt n, A argu);

   /**
    * f0 -> QueryBodyClause() QueryBodyClauses()
    *       | QueryBodyClause()
    */
   public R visit(QueryBodyClauses n, A argu);

   /**
    * f0 -> FromClause()
    *       | LetClause()
    *       | JoinIntoOptClause()
    *       | WhereClause()
    *       | OrderbyClause()
    */
   public R visit(QueryBodyClause n, A argu);

   /**
    * f0 -> <LET>
    * f1 -> Identifier()
    * f2 -> <EQUAL>
    * f3 -> Expression()
    */
   public R visit(LetClause n, A argu);

   /**
    * f0 -> <WHERE>
    * f1 -> BooleanExpression()
    */
   public R visit(WhereClause n, A argu);

   /**
    * f0 -> Expression()
    */
   public R visit(BooleanExpression n, A argu);

   /**
    * f0 -> <JOIN>
    * f1 -> [ Type() ]
    * f2 -> Identifier()
    * f3 -> <IN>
    * f4 -> Expression()
    * f5 -> <ON>
    * f6 -> Expression()
    * f7 -> <EQUALS>
    * f8 -> Expression()
    */
   public R visit(JoinClause n, A argu);

   /**
    * f0 -> <JOIN>
    * f1 -> [ Type() ]
    * f2 -> Identifier()
    * f3 -> <IN>
    * f4 -> Expression()
    * f5 -> <ON>
    * f6 -> Expression()
    * f7 -> <EQUALS>
    * f8 -> Expression()
    * f9 -> <INTO>
    * f10 -> Identifier()
    */
   public R visit(JoinIntoClause n, A argu);

   /**
    * f0 -> <JOIN> Identifier() <IN> Expression() <ON> Expression() <EQUALS> Expression() [ <INTO> Identifier() ]
    *       | <JOIN> Type() Identifier() <IN> Expression() <ON> Expression() <EQUALS> Expression() [ <INTO> Identifier() ]
    */
   public R visit(JoinIntoOptClause n, A argu);

   /**
    * f0 -> <ORDERBY>
    * f1 -> Orderings()
    */
   public R visit(OrderbyClause n, A argu);

   /**
    * f0 -> Ordering()
    * f1 -> MoreOrderings()
    */
   public R visit(Orderings n, A argu);

   /**
    * f0 -> [ <COMMA> Ordering() MoreOrderings() ]
    */
   public R visit(MoreOrderings n, A argu);

   /**
    * f0 -> Expression()
    * f1 -> OrderingDirectionOpt()
    */
   public R visit(Ordering n, A argu);

   /**
    * f0 -> [ OrderingDirection() ]
    */
   public R visit(OrderingDirectionOpt n, A argu);

   /**
    * f0 -> <ASCENDING>
    *       | <DESCENDING>
    */
   public R visit(OrderingDirection n, A argu);

   /**
    * f0 -> SelectClause()
    *       | GroupClause()
    */
   public R visit(SelectOrGroupClause n, A argu);

   /**
    * f0 -> <SELECT>
    * f1 -> Expression()
    */
   public R visit(SelectClause n, A argu);

   /**
    * f0 -> <GROUP>
    * f1 -> Expression()
    * f2 -> <BY>
    * f3 -> Expression()
    */
   public R visit(GroupClause n, A argu);

   /**
    * f0 -> <INTO>
    * f1 -> Identifier()
    * f2 -> QueryBody()
    */
   public R visit(QueryContinuation n, A argu);

   /**
    * f0 -> UnaryExpression()
    * f1 -> AssignmentOperator()
    * f2 -> Expression()
    */
   public R visit(Assignment n, A argu);

   /**
    * f0 -> <EQUAL>
    *       | <PLUS_EQUAL>
    *       | <MINUS_EQUAL>
    *       | <ASTERISK_EQUAL>
    *       | <SLASH_EQUAL>
    *       | <PERCENT_EQUAL>
    *       | <AMPERSAND_EQUAL>
    *       | <VERTICAL_EQUAL>
    *       | <CARET_EQUAL>
    *       | <DBL_LESS_EQUAL>
    *       | <DBL_GREATER_EQUAL>
    */
   public R visit(AssignmentOperator n, A argu);

   /**
    * f0 -> LabeledStatement()
    *       | LocalConstantDeclaration() <SEMICOLON>
    *       | EmbeddedStatement()
    *       | LocalVariableDeclaration() <SEMICOLON>
    */
   public R visit(Statement n, A argu);

   /**
    * f0 -> UnaryExpression() AssignmentOperator()
    *       | PrimaryExpression() NullConditionalOperations()
    *       | PrimaryExpression() <SEMICOLON>
    *       | <AWAIT>
    *       | <DBL_PLUS>
    *       | <DBL_MINUS>
    *       | <NEW>
    *       | <LBRACE>
    *       | <SEMICOLON>
    *       | <IF>
    *       | <SWITCH>
    *       | <WHILE>
    *       | <DO>
    *       | <FOR>
    *       | <FOREACH>
    *       | <BREAK>
    *       | <CONTINUE>
    *       | <GOTO>
    *       | <RETURN>
    *       | <THROW>
    *       | <TRY>
    *       | <CHECKED>
    *       | <UNCHECKED>
    *       | <LOCK>
    *       | <USING>
    *       | <YIELD>
    *       | <UNSAFE>
    *       | <FIXED>
    */
   public R visit(EmbeddedStatementLookahead n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> <COLON>
    * f2 -> Statement()
    */
   public R visit(LabeledStatement n, A argu);

   /**
    * f0 -> LocalConstantDeclaration() <SEMICOLON>
    *       | LocalVariableDeclaration() <SEMICOLON>
    */
   public R visit(DeclarationStatement n, A argu);

   /**
    * f0 -> LocalVariableType()
    * f1 -> LocalVariableDeclarators()
    */
   public R visit(LocalVariableDeclaration n, A argu);

   /**
    * f0 -> Type()
    *       | <VAR>
    */
   public R visit(LocalVariableType n, A argu);

   /**
    * f0 -> LocalVariableDeclarator()
    * f1 -> LocalVariableDeclaratorsPrime()
    */
   public R visit(LocalVariableDeclarators n, A argu);

   /**
    * f0 -> [ <COMMA> LocalVariableDeclarator() LocalVariableDeclaratorsPrime() ]
    */
   public R visit(LocalVariableDeclaratorsPrime n, A argu);

   /**
    * f0 -> Identifier() <EQUAL> LocalVariableInitializer()
    *       | Identifier()
    */
   public R visit(LocalVariableDeclarator n, A argu);

   /**
    * f0 -> LocalVariableInitializerUnsafe()
    *       | QueryExpression()
    *       | ArrayInitializer()
    *       | Assignment()
    *       | LambdaExpression()
    *       | ConditionalExpression()
    */
   public R visit(LocalVariableInitializer n, A argu);

   /**
    * f0 -> StackallocInitializer()
    */
   public R visit(LocalVariableInitializerUnsafe n, A argu);

   /**
    * f0 -> <STACKALLOC>
    * f1 -> UnmanagedType()
    * f2 -> <LBRACKET>
    * f3 -> Expression()
    * f4 -> <RBRACKET>
    */
   public R visit(StackallocInitializer n, A argu);

   /**
    * f0 -> <CONST>
    * f1 -> Type()
    * f2 -> ConstantDeclarators()
    */
   public R visit(LocalConstantDeclaration n, A argu);

   /**
    * f0 -> Block()
    *       | SelectionStatement()
    *       | IterationStatement()
    *       | JumpStatement()
    *       | TryStatement()
    *       | CheckedStatement()
    *       | UncheckedStatement()
    *       | LockStatement()
    *       | UsingStatement()
    *       | YieldStatement()
    *       | ExpressionStatement()
    *       | EmbeddedStatementUnsafe()
    *       | EmptyStatement()
    */
   public R visit(EmbeddedStatement n, A argu);

   /**
    * f0 -> <LBRACE>
    * f1 -> StatementList()
    * f2 -> <RBRACE>
    */
   public R visit(Block n, A argu);

   /**
    * f0 -> <SEMICOLON>
    */
   public R visit(EmptyStatement n, A argu);

   /**
    * f0 -> StatementExpression()
    * f1 -> <SEMICOLON>
    */
   public R visit(ExpressionStatement n, A argu);

   /**
    * f0 -> ObjectCreationExpression()
    *       | Assignment()
    *       | NullConditionalInvocationExpression()
    *       | PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | AwaitExpression()
    *       | PrimaryExpression()
    */
   public R visit(StatementExpression n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> NullConditionalOperations()
    */
   public R visit(NullConditionalInvocationExpression n, A argu);

   /**
    * f0 -> IfStatement()
    *       | SwitchStatement()
    */
   public R visit(SelectionStatement n, A argu);

   /**
    * f0 -> <IF> <LPAREN> BooleanExpression() <RPAREN> EmbeddedStatement() <ELSE> EmbeddedStatement()
    *       | <IF> <LPAREN> BooleanExpression() <RPAREN> EmbeddedStatement()
    */
   public R visit(IfStatement n, A argu);

   /**
    * f0 -> <SWITCH>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    * f4 -> SwitchBlock()
    */
   public R visit(SwitchStatement n, A argu);

   /**
    * f0 -> <LBRACE>
    * f1 -> SwitchSectionList()
    * f2 -> <RBRACE>
    */
   public R visit(SwitchBlock n, A argu);

   /**
    * f0 -> [ SwitchSection() SwitchSectionList() ]
    */
   public R visit(SwitchSectionList n, A argu);

   /**
    * f0 -> SwitchLabelList()
    * f1 -> StatementList()
    */
   public R visit(SwitchSection n, A argu);

   /**
    * f0 -> SwitchLabel() SwitchLabelList()
    *       | SwitchLabel()
    */
   public R visit(SwitchLabelList n, A argu);

   /**
    * f0 -> <CASE> ConstantExpression() <COLON>
    *       | <_DEFAULT> <COLON>
    */
   public R visit(SwitchLabel n, A argu);

   /**
    * f0 -> WhileStatement()
    *       | DoStatement()
    *       | ForStatement()
    *       | ForeachStatement()
    */
   public R visit(IterationStatement n, A argu);

   /**
    * f0 -> <WHILE>
    * f1 -> <LPAREN>
    * f2 -> BooleanExpression()
    * f3 -> <RPAREN>
    * f4 -> EmbeddedStatement()
    */
   public R visit(WhileStatement n, A argu);

   /**
    * f0 -> <DO>
    * f1 -> EmbeddedStatement()
    * f2 -> <WHILE>
    * f3 -> <LPAREN>
    * f4 -> BooleanExpression()
    * f5 -> <RPAREN>
    * f6 -> <SEMICOLON>
    */
   public R visit(DoStatement n, A argu);

   /**
    * f0 -> <FOR>
    * f1 -> <LPAREN>
    * f2 -> ForInitializerOpt()
    * f3 -> <SEMICOLON>
    * f4 -> ForConditionOpt()
    * f5 -> <SEMICOLON>
    * f6 -> ForIteratorOpt()
    * f7 -> <RPAREN>
    * f8 -> EmbeddedStatement()
    */
   public R visit(ForStatement n, A argu);

   /**
    * f0 -> [ ForInitializer() ]
    */
   public R visit(ForInitializerOpt n, A argu);

   /**
    * f0 -> [ ForCondition() ]
    */
   public R visit(ForConditionOpt n, A argu);

   /**
    * f0 -> [ ForIterator() ]
    */
   public R visit(ForIteratorOpt n, A argu);

   /**
    * f0 -> LocalVariableDeclaration()
    *       | StatementExpressionList()
    */
   public R visit(ForInitializer n, A argu);

   /**
    * f0 -> StatementExpression()
    * f1 -> MoreStatementExpressions()
    */
   public R visit(StatementExpressionList n, A argu);

   /**
    * f0 -> [ <COMMA> StatementExpression() MoreStatementExpressions() ]
    */
   public R visit(MoreStatementExpressions n, A argu);

   /**
    * f0 -> BooleanExpression()
    */
   public R visit(ForCondition n, A argu);

   /**
    * f0 -> StatementExpressionList()
    */
   public R visit(ForIterator n, A argu);

   /**
    * f0 -> <FOREACH>
    * f1 -> <LPAREN>
    * f2 -> LocalVariableType()
    * f3 -> Identifier()
    * f4 -> <IN>
    * f5 -> Expression()
    * f6 -> <RPAREN>
    * f7 -> EmbeddedStatement()
    */
   public R visit(ForeachStatement n, A argu);

   /**
    * f0 -> BreakStatement()
    *       | ContinueStatement()
    *       | GotoStatement()
    *       | ReturnStatement()
    *       | ThrowStatement()
    */
   public R visit(JumpStatement n, A argu);

   /**
    * f0 -> <BREAK>
    * f1 -> <SEMICOLON>
    */
   public R visit(BreakStatement n, A argu);

   /**
    * f0 -> <CONTINUE>
    * f1 -> <SEMICOLON>
    */
   public R visit(ContinueStatement n, A argu);

   /**
    * f0 -> <GOTO> <CASE> ConstantExpression() <SEMICOLON>
    *       | <GOTO> <_DEFAULT> <SEMICOLON>
    *       | <GOTO> Identifier() <SEMICOLON>
    */
   public R visit(GotoStatement n, A argu);

   /**
    * f0 -> <RETURN>
    * f1 -> ExpressionOpt()
    * f2 -> <SEMICOLON>
    */
   public R visit(ReturnStatement n, A argu);

   /**
    * f0 -> [ Expression() ]
    */
   public R visit(ExpressionOpt n, A argu);

   /**
    * f0 -> <THROW>
    * f1 -> ExpressionOpt()
    * f2 -> <SEMICOLON>
    */
   public R visit(ThrowStatement n, A argu);

   /**
    * f0 -> <TRY> Block() CatchClauseList() FinallyClause()
    *       | <TRY> Block() CatchClauseList()
    *       | <TRY> Block() FinallyClause()
    */
   public R visit(TryStatement n, A argu);

   /**
    * f0 -> CatchClause() CatchClauseList()
    *       | CatchClause()
    */
   public R visit(CatchClauseList n, A argu);

   /**
    * f0 -> <CATCH>
    * f1 -> ExceptionSpecifierOpt()
    * f2 -> ExceptionFilterOpt()
    * f3 -> Block()
    */
   public R visit(CatchClause n, A argu);

   /**
    * f0 -> [ ExceptionSpecifier() ]
    */
   public R visit(ExceptionSpecifierOpt n, A argu);

   /**
    * f0 -> [ ExceptionFilter() ]
    */
   public R visit(ExceptionFilterOpt n, A argu);

   /**
    * f0 -> <LPAREN>
    * f1 -> Type()
    * f2 -> IdentifierOpt()
    * f3 -> <RPAREN>
    */
   public R visit(ExceptionSpecifier n, A argu);

   /**
    * f0 -> [ Identifier() ]
    */
   public R visit(IdentifierOpt n, A argu);

   /**
    * f0 -> <WHEN>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    */
   public R visit(ExceptionFilter n, A argu);

   /**
    * f0 -> <FINALLY>
    * f1 -> Block()
    */
   public R visit(FinallyClause n, A argu);

   /**
    * f0 -> <CHECKED>
    * f1 -> Block()
    */
   public R visit(CheckedStatement n, A argu);

   /**
    * f0 -> <UNCHECKED>
    * f1 -> Block()
    */
   public R visit(UncheckedStatement n, A argu);

   /**
    * f0 -> <LOCK>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    * f4 -> EmbeddedStatement()
    */
   public R visit(LockStatement n, A argu);

   /**
    * f0 -> <USING>
    * f1 -> <LPAREN>
    * f2 -> ResourceAcquisition()
    * f3 -> <RPAREN>
    * f4 -> EmbeddedStatement()
    */
   public R visit(UsingStatement n, A argu);

   /**
    * f0 -> LocalVariableDeclaration()
    *       | Expression()
    */
   public R visit(ResourceAcquisition n, A argu);

   /**
    * f0 -> <YIELD> <RETURN> Expression() <SEMICOLON>
    *       | <YIELD> <BREAK> <SEMICOLON>
    */
   public R visit(YieldStatement n, A argu);

   /**
    * f0 -> UnsafeStatement()
    *       | FixedStatement()
    */
   public R visit(EmbeddedStatementUnsafe n, A argu);

   /**
    * f0 -> <UNSAFE>
    * f1 -> Block()
    */
   public R visit(UnsafeStatement n, A argu);

   /**
    * f0 -> <FIXED>
    * f1 -> <LPAREN>
    * f2 -> PointerType()
    * f3 -> FixedPointerDeclarators()
    * f4 -> <RPAREN>
    * f5 -> EmbeddedStatement()
    */
   public R visit(FixedStatement n, A argu);

   /**
    * f0 -> FixedPointerDeclarator()
    * f1 -> MoreFixedPointerDeclarators()
    */
   public R visit(FixedPointerDeclarators n, A argu);

   /**
    * f0 -> [ <COMMA> FixedPointerDeclarator() MoreFixedPointerDeclarators() ]
    */
   public R visit(MoreFixedPointerDeclarators n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> <EQUAL>
    * f2 -> FixedPointerInitializer()
    */
   public R visit(FixedPointerDeclarator n, A argu);

   /**
    * f0 -> <AMPERSAND> VariableReference()
    *       | Expression()
    */
   public R visit(FixedPointerInitializer n, A argu);

}

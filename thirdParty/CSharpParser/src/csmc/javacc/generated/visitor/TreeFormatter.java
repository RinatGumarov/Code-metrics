//
// Generated by JTB 1.3.2
//
package csmc.javacc.generated.visitor;

import csmc.javacc.generated.syntaxtree.*;
import java.util.*;

/**
 * A skeleton output formatter for your language grammar.  Using the
 * add() method along with force(), indent(), and outdent(), you can
 * easily specify how this visitor will format the given syntax tree.
 * See the JTB documentation for more details.
 *
 * Pass your syntax tree to this visitor, and then to the TreeDumper
 * visitor in order to "pretty print" your tree.
 */
public class TreeFormatter extends DepthFirstVisitor {
   private Vector<FormatCommand> cmdQueue = new Vector<FormatCommand>();
   private boolean lineWrap;
   private int wrapWidth;
   private int indentAmt;
   private int curLine = 1;
   private int curColumn = 1;
   private int curIndent = 0;

   /**
    * The default constructor assumes an indentation amount of 3 spaces
    * and no line-wrap.  You may alternately use the other constructor to
    * specify your own indentation amount and line width.
    */
   public TreeFormatter() { this(3, 0); }

   /**
    * This constructor accepts an indent amount and a line width which is
    * used to wrap long lines.  If a token's beginColumn value is greater
    * than the specified wrapWidth, it will be moved to the next line and
    * indented one extra level.  To turn off line-wrapping, specify a
    * wrapWidth of 0.
    *
    * @param   indentAmt   Amount of spaces per indentation level.
    * @param   wrapWidth   Wrap lines longer than wrapWidth.  0 for no wrap.
    */
   public TreeFormatter(int indentAmt, int wrapWidth) {
      this.indentAmt = indentAmt;
      this.wrapWidth = wrapWidth;

      if ( wrapWidth > 0 )
         lineWrap = true;
      else
         lineWrap = false;
   }

   /**
    * Accepts a NodeListInterface object and performs an optional format
    * command between each node in the list (but not after the last node).
    */
   protected void processList(NodeListInterface n) {
      processList(n, null);
   }

   protected void processList(NodeListInterface n, FormatCommand cmd) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         if ( cmd != null && e.hasMoreElements() )
            cmdQueue.addElement(cmd);
      }
   }

   /**
    * A Force command inserts a line break and indents the next line to
    * the current indentation level.  Use "add(force());".
    */
   protected FormatCommand force() { return force(1); }
   protected FormatCommand force(int i) {
      return new FormatCommand(FormatCommand.FORCE, i);
   }

   /**
    * An Indent command increases the indentation level by one (or a
    * user-specified amount).  Use "add(indent());".
    */
   protected FormatCommand indent() { return indent(1); }
   protected FormatCommand indent(int i) {
      return new FormatCommand(FormatCommand.INDENT, i);
   }

   /**
    * An Outdent command is the reverse of the Indent command: it reduces
    * the indentation level.  Use "add(outdent());".
    */
   protected FormatCommand outdent() { return outdent(1); }
   protected FormatCommand outdent(int i) {
      return new FormatCommand(FormatCommand.OUTDENT, i);
   }

   /**
    * A Space command simply adds one or a user-specified number of
    * spaces between tokens.  Use "add(space());".
    */
   protected FormatCommand space() { return space(1); }
   protected FormatCommand space(int i) {
      return new FormatCommand(FormatCommand.SPACE, i);
   }

   /**
    * Use this method to add FormatCommands to the command queue to be
    * executed when the next token in the tree is visited.
    */
   protected void add(FormatCommand cmd) {
      cmdQueue.addElement(cmd);
   }

   /**
    * Executes the commands waiting in the command queue, then inserts the
    * proper location information into the current NodeToken.
    *
    * If there are any special tokens preceding this token, they will be
    * given the current location information.  The token will follow on
    * the next line, at the proper indentation level.  If this is not the
    * behavior you want from special tokens, feel free to modify this
    * method.
    */
   public void visit(NodeToken n) {
      for ( Enumeration<FormatCommand> e = cmdQueue.elements(); e.hasMoreElements(); ) {
         FormatCommand cmd = e.nextElement();
         switch ( cmd.getCommand() ) {
         case FormatCommand.FORCE :
            curLine += cmd.getNumCommands();
            curColumn = curIndent + 1;
            break;
         case FormatCommand.INDENT :
            curIndent += indentAmt * cmd.getNumCommands();
            break;
         case FormatCommand.OUTDENT :
            if ( curIndent >= indentAmt )
               curIndent -= indentAmt * cmd.getNumCommands();
            break;
         case FormatCommand.SPACE :
            curColumn += cmd.getNumCommands();
            break;
         default :
            throw new TreeFormatterException(
               "Invalid value in command queue.");
         }
      }

      cmdQueue.removeAllElements();

      //
      // Handle all special tokens preceding this NodeToken
      //
      if ( n.numSpecials() > 0 )
         for ( Enumeration<NodeToken> e = n.specialTokens.elements();
               e.hasMoreElements(); ) {
            NodeToken special = e.nextElement();

            //
            // -Place the token.
            // -Move cursor to next line after the special token.
            // -Don't update curColumn--want to keep current indent level.
            //
            placeToken(special, curLine, curColumn);
            curLine = special.endLine + 1;
         }

      placeToken(n, curLine, curColumn);
      curLine = n.endLine;
      curColumn = n.endColumn;
   }

   /**
    * Inserts token location (beginLine, beginColumn, endLine, endColumn)
    * information into the NodeToken.  Takes into account line-wrap.
    * Does not update curLine and curColumn.
    */
   private void placeToken(NodeToken n, int line, int column) {
      int length = n.tokenImage.length();

      //
      // Find beginning of token.  Only line-wrap for single-line tokens
      //
      if ( !lineWrap || n.tokenImage.indexOf('\n') != -1 ||
           column + length <= wrapWidth )
         n.beginColumn = column;
      else {
         ++line;
         column = curIndent + indentAmt + 1;
         n.beginColumn = column;
      }

      n.beginLine = line;

      //
      // Find end of token; don't count \n if it's the last character
      //
      for ( int i = 0; i < length; ++i ) {
         if ( n.tokenImage.charAt(i) == '\n' && i < length - 1 ) {
            ++line;
            column = 1;
         }
         else
            ++column;
      }

      n.endLine = line;
      n.endColumn = column;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> [ <UNICODE_BOM> ]
    * f1 -> Start()
    * f2 -> <EOF>
    */
   public void visit(Input n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> CompilationUnit()
    */
   public void visit(Start n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ExternAliasDirectiveList()
    * f1 -> UsingDirectiveList()
    * f2 -> GlobalAttributesOpt()
    * f3 -> NamespaceMemberDeclarationList()
    */
   public void visit(CompilationUnit n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ ExternAliasDirective() ExternAliasDirectiveList() ]
    */
   public void visit(ExternAliasDirectiveList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ UsingDirective() UsingDirectiveList() ]
    */
   public void visit(UsingDirectiveList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ GlobalAttributes() ]
    */
   public void visit(GlobalAttributesOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ NamespaceMemberDeclaration() NamespaceMemberDeclarationList() ]
    */
   public void visit(NamespaceMemberDeclarationList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <EXTERN>
    * f1 -> <ALIAS>
    * f2 -> Identifier()
    * f3 -> <SEMICOLON>
    */
   public void visit(ExternAliasDirective n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> UsingAliasDirective()
    *       | UsingStaticDirective()
    *       | UsingNamespaceDirective()
    */
   public void visit(UsingDirective n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <USING>
    * f1 -> Identifier()
    * f2 -> <EQUAL>
    * f3 -> NamespaceOrTypeName()
    * f4 -> <SEMICOLON>
    */
   public void visit(UsingAliasDirective n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> QualifiedAliasMember() NamespaceOrTypeNamePrime()
    *       | Identifier() TypeArgumentListOpt() NamespaceOrTypeNamePrime()
    */
   public void visit(NamespaceOrTypeName n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <DOT> Identifier() TypeArgumentListOpt() NamespaceOrTypeNamePrime() ]
    */
   public void visit(NamespaceOrTypeNamePrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ TypeArgumentList() ]
    */
   public void visit(TypeArgumentListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <LESS>
    * f1 -> TypeArguments()
    * f2 -> <GREATER>
    */
   public void visit(TypeArgumentList n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> TypeArgument()
    * f1 -> MoreTypeArguments()
    */
   public void visit(TypeArguments n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> TypeArgument() MoreTypeArguments() ]
    */
   public void visit(MoreTypeArguments n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Type()
    */
   public void visit(TypeArgument n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> SimpleType() TypePrime()
    *       | ClassType() TypePrime()
    *       | <VOID> <ASTERISK> TypePrime()
    */
   public void visit(Type n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ ( <QUESTION> TypePrime() | RankSpecifierList() TypePrime() | <ASTERISK> TypePrime() ) ]
    */
   public void visit(TypePrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> NamespaceOrTypeName()
    */
   public void visit(TypeName n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> NumericType()
    *       | <BOOL>
    */
   public void visit(SimpleType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> IntegralType()
    *       | FloatingPointType()
    *       | <DECIMAL>
    */
   public void visit(NumericType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <SBYTE>
    *       | <BYTE>
    *       | <SHORT>
    *       | <USHORT>
    *       | <INT>
    *       | <UINT>
    *       | <LONG>
    *       | <ULONG>
    *       | <CHAR>
    */
   public void visit(IntegralType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <FLOAT>
    *       | <DOUBLE>
    */
   public void visit(FloatingPointType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> NonNullableValueType()
    * f1 -> <QUESTION>
    */
   public void visit(NullableType n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Type()
    */
   public void visit(NonNullableValueType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> TypeName()
    */
   public void visit(EnumType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> TypeName()
    *       | <OBJECT>
    *       | <DYNAMIC>
    *       | <STRING>
    */
   public void visit(ClassType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> TypeName()
    */
   public void visit(InterfaceType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> NonArrayType()
    * f1 -> RankSpecifierList()
    */
   public void visit(ArrayType n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> SimpleType() TypePrimeNonArray()
    *       | ClassType() TypePrimeNonArray()
    *       | <VOID> <ASTERISK> TypePrimeNonArray()
    */
   public void visit(NonArrayType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ ( <QUESTION> TypePrimeNonArray() | <ASTERISK> TypePrimeNonArray() ) ]
    */
   public void visit(TypePrimeNonArray n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> RankSpecifier() RankSpecifierList()
    *       | RankSpecifier()
    */
   public void visit(RankSpecifierList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LBRACKET>
    * f1 -> DimSeparatorList()
    * f2 -> <RBRACKET>
    */
   public void visit(RankSpecifier n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ DimSeparator() DimSeparatorList() ]
    */
   public void visit(DimSeparatorList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <COMMA>
    */
   public void visit(DimSeparator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> TypeName()
    */
   public void visit(DelegateType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Identifier()
    */
   public void visit(TypeParameter n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> PointerType()
    */
   public void visit(TypeUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Type()
    */
   public void visit(PointerType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Type()
    */
   public void visit(UnmanagedType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> <DBL_COLON>
    * f2 -> Identifier()
    * f3 -> TypeArgumentListOpt()
    */
   public void visit(QualifiedAliasMember n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <USING>
    * f1 -> NamespaceName()
    * f2 -> <SEMICOLON>
    */
   public void visit(UsingNamespaceDirective n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> NamespaceOrTypeName()
    */
   public void visit(NamespaceName n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <USING>
    * f1 -> <STATIC>
    * f2 -> TypeName()
    * f3 -> <SEMICOLON>
    */
   public void visit(UsingStaticDirective n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> GlobalAttributesSectionList()
    */
   public void visit(GlobalAttributes n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> GlobalAttributesSection() GlobalAttributesSectionList()
    *       | GlobalAttributesSection()
    */
   public void visit(GlobalAttributesSectionList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LBRACKET> GlobalAttributeTargetSpecifier() AttributeList() <COMMA> <RBRACKET>
    *       | <LBRACKET> GlobalAttributeTargetSpecifier() AttributeList() <RBRACKET>
    */
   public void visit(GlobalAttributesSection n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> GlobalAttributeSpecifier()
    * f1 -> <COLON>
    */
   public void visit(GlobalAttributeTargetSpecifier n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <ASSEMBLY>
    *       | <MODULE>
    */
   public void visit(GlobalAttributeSpecifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Attribute()
    * f1 -> MoreAttributes()
    */
   public void visit(AttributeList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> AttributeName()
    * f1 -> AttributeArgumentsOpt()
    */
   public void visit(Attribute n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> Attribute() MoreAttributes() ]
    */
   public void visit(MoreAttributes n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> TypeName()
    */
   public void visit(AttributeName n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ AttributeArguments() ]
    */
   public void visit(AttributeArgumentsOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <LPAREN>
    * f1 -> [ UniversalArgumentList() ]
    * f2 -> <RPAREN>
    */
   public void visit(AttributeArguments n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      n.f2.accept(this);
   }

   /**
    * f0 -> UniversalArgument()
    * f1 -> MoreUniversalArguments()
    */
   public void visit(UniversalArgumentList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> UniversalArgument() MoreUniversalArguments() ]
    */
   public void visit(MoreUniversalArguments n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> NamedArgument()
    *       | PositionalArgument()
    */
   public void visit(UniversalArgument n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ PositionalArgumentList() ]
    */
   public void visit(PositionalArgumentListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> PositionalArgument()
    * f1 -> MorePositionalArguments()
    */
   public void visit(PositionalArgumentList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> AttributeArgumentExpression()
    */
   public void visit(PositionalArgument n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Expression()
    */
   public void visit(AttributeArgumentExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <COMMA> PositionalArgument() MorePositionalArguments() ]
    */
   public void visit(MorePositionalArguments n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> NamedArgument()
    * f1 -> MoreNamedArguments()
    */
   public void visit(NamedArgumentList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> <COLON>
    * f2 -> AttributeArgumentExpression()
    */
   public void visit(NamedArgument n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ <COMMA> NamedArgument() MoreNamedArguments() ]
    */
   public void visit(MoreNamedArguments n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> NamespaceDeclaration()
    *       | TypeDeclaration()
    */
   public void visit(NamespaceMemberDeclaration n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <NAMESPACE>
    * f1 -> QualifiedIdentifier()
    * f2 -> NamespaceBody()
    * f3 -> SemicolonOpt()
    */
   public void visit(NamespaceDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ <SEMICOLON> ]
    */
   public void visit(SemicolonOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> MoreIdentifiers()
    */
   public void visit(QualifiedIdentifier n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <DOT> Identifier() MoreIdentifiers() ]
    */
   public void visit(MoreIdentifiers n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <LBRACE>
    * f1 -> ExternAliasDirectiveList()
    * f2 -> UsingDirectiveList()
    * f3 -> NamespaceMemberDeclarationList()
    * f4 -> <RBRACE>
    */
   public void visit(NamespaceBody n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> ClassDeclaration()
    *       | StructDeclaration()
    *       | InterfaceDeclaration()
    *       | EnumDeclaration()
    *       | DelegateDeclaration()
    */
   public void visit(TypeDeclaration n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> ClassModifierList()
    * f2 -> PartialOpt()
    * f3 -> <CLASS>
    * f4 -> Identifier()
    * f5 -> TypeParameterListOpt()
    * f6 -> ClassBaseOpt()
    * f7 -> TypeParameterConstraintsClauseList()
    * f8 -> ClassBody()
    * f9 -> SemicolonOpt()
    */
   public void visit(ClassDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
   }

   /**
    * f0 -> ( AttributeSection() )*
    */
   public void visit(AttributesOpt n) {
      if ( n.f0.present() ) {
         processList(n.f0);
      }
   }

   /**
    * f0 -> [ ClassModifier() ClassModifierList() ]
    */
   public void visit(ClassModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ <PARTIAL> ]
    */
   public void visit(PartialOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ TypeParameterList() ]
    */
   public void visit(TypeParameterListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ ClassBase() ]
    */
   public void visit(ClassBaseOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ TypeParameterConstraintsClause() TypeParameterConstraintsClauseList() ]
    */
   public void visit(TypeParameterConstraintsClauseList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AttributeSectionList()
    */
   public void visit(Attributes n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributeSection() AttributeSectionList()
    *       | AttributeSection()
    */
   public void visit(AttributeSectionList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LBRACKET> AttributeTargetSpecifierOpt() AttributeList() <COMMA> <RBRACKET>
    *       | <LBRACKET> AttributeTargetSpecifierOpt() AttributeList() <RBRACKET>
    */
   public void visit(AttributeSection n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ AttributeTargetSpecifier() ]
    */
   public void visit(AttributeTargetSpecifierOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AttributeTarget()
    * f1 -> <COLON>
    */
   public void visit(AttributeTargetSpecifier n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <FIELD>
    *       | <EVENT>
    *       | <METHOD>
    *       | <PARAM>
    *       | <PROPERTY>
    *       | <RETURN>
    *       | <TYPE>
    */
   public void visit(AttributeTarget n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <ABSTRACT>
    *       | <SEALED>
    *       | <STATIC>
    *       | ClassModifierUnsafe()
    */
   public void visit(ClassModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(ClassModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LESS>
    * f1 -> TypeParameters()
    * f2 -> <GREATER>
    */
   public void visit(TypeParameterList n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> TypeParameter()
    * f2 -> TypeParametersPrime()
    */
   public void visit(TypeParameters n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ <COMMA> AttributesOpt() TypeParameter() TypeParametersPrime() ]
    */
   public void visit(TypeParametersPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <COLON> ClassType() <COMMA> InterfaceTypeList()
    *       | <OBJECT>
    *       | <DYNAMIC>
    *       | <STRING>
    *       | <COLON> InterfaceTypeList()
    */
   public void visit(ClassBase n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> InterfaceType()
    * f1 -> MoreInterfaceTypes()
    */
   public void visit(InterfaceTypeList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> InterfaceType() MoreInterfaceTypes() ]
    */
   public void visit(MoreInterfaceTypes n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <WHERE>
    * f1 -> TypeParameter()
    * f2 -> <COLON>
    * f3 -> TypeParameterConstraints()
    */
   public void visit(TypeParameterConstraintsClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> PrimaryConstraint() <COMMA> SecondaryConstraints() <COMMA> ConstructorConstraint()
    *       | PrimaryConstraint() <COMMA> SecondaryConstraints()
    *       | PrimaryConstraint() <COMMA> ConstructorConstraint()
    *       | PrimaryConstraint()
    *       | SecondaryConstraints() <COMMA> ConstructorConstraint()
    *       | SecondaryConstraints()
    *       | ConstructorConstraint()
    */
   public void visit(TypeParameterConstraints n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ClassType()
    *       | <CLASS>
    *       | <STRUCT>
    */
   public void visit(PrimaryConstraint n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> InterfaceType()
    * f1 -> SecondaryConstraintsPrime()
    */
   public void visit(SecondaryConstraints n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> InterfaceType() SecondaryConstraintsPrime() ]
    */
   public void visit(SecondaryConstraintsPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    * f1 -> <LPAREN>
    * f2 -> <RPAREN>
    */
   public void visit(ConstructorConstraint n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> <LBRACE>
    * f1 -> ClassMemberDeclarationList()
    * f2 -> <RBRACE>
    */
   public void visit(ClassBody n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ ClassMemberDeclaration() ClassMemberDeclarationList() ]
    */
   public void visit(ClassMemberDeclarationList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> MethodDeclaration()
    *       | ConstantDeclaration()
    *       | EventDeclaration()
    *       | IndexerDeclaration()
    *       | OperatorDeclaration()
    *       | DestructorDeclaration()
    *       | ConstructorDeclaration()
    *       | StaticConstructorDeclaration()
    *       | PropertyDeclaration()
    *       | FieldDeclaration()
    *       | TypeDeclaration()
    */
   public void visit(ClassMemberDeclaration n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> MethodModifierList()
    * f2 -> PartialOpt()
    * f3 -> ReturnType()
    * f4 -> MemberName()
    * f5 -> TypeParameterListOpt()
    * f6 -> <LPAREN>
    */
   public void visit(MethodHeaderLookahead n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * f0 -> AttributesOpt() ExternOpt() <TILDE>
    *       | AttributesOpt() ExternOpt() UnsafeOpt() <TILDE>
    *       | AttributesOpt() UnsafeOpt() ExternOpt() <TILDE>
    */
   public void visit(DestructorDeclarationLookahead n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Type() <THIS>
    *       | Type() InterfaceType() <DOT> <THIS> <LBRACKET>
    */
   public void visit(IndexerDeclaratorLookahead n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> ConstantModifierList()
    * f2 -> <CONST>
    * f3 -> Type()
    * f4 -> ConstantDeclarators()
    * f5 -> <SEMICOLON>
    */
   public void visit(ConstantDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> [ ConstantModifier() ConstantModifierList() ]
    */
   public void visit(ConstantModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    */
   public void visit(ConstantModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ConstantDeclarator()
    * f1 -> MoreConstantDeclarators()
    */
   public void visit(ConstantDeclarators n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> <EQUAL>
    * f2 -> ConstantExpression()
    */
   public void visit(ConstantDeclarator n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> Expression()
    */
   public void visit(ConstantExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <COMMA> ConstantDeclarator() MoreConstantDeclarators() ]
    */
   public void visit(MoreConstantDeclarators n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> FieldModifierList()
    * f2 -> Type()
    * f3 -> VariableDeclarators()
    * f4 -> <SEMICOLON>
    */
   public void visit(FieldDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> [ FieldModifier() FieldModifierList() ]
    */
   public void visit(FieldModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <STATIC>
    *       | <READONLY>
    *       | <VOLATILE>
    *       | FieldModifierUnsafe()
    */
   public void visit(FieldModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(FieldModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> VariableDeclarator()
    * f1 -> MoreVariableDeclarators()
    */
   public void visit(VariableDeclarators n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Identifier() <EQUAL> VariableInitializer()
    *       | Identifier()
    */
   public void visit(VariableDeclarator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Expression()
    *       | ArrayInitializer()
    */
   public void visit(VariableInitializer n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <COMMA> VariableDeclarator() MoreVariableDeclarators() ]
    */
   public void visit(MoreVariableDeclarators n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> MethodHeader()
    * f1 -> MethodBody()
    */
   public void visit(MethodDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> MethodModifierList()
    * f2 -> PartialOpt()
    * f3 -> ReturnType()
    * f4 -> MemberName()
    * f5 -> TypeParameterListOpt()
    * f6 -> <LPAREN>
    * f7 -> FormalParameterListOpt()
    * f8 -> <RPAREN>
    * f9 -> TypeParameterConstraintsClauseList()
    */
   public void visit(MethodHeader n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
   }

   /**
    * f0 -> [ MethodModifier() MethodModifierList() ]
    */
   public void visit(MethodModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <STATIC>
    *       | <VIRTUAL>
    *       | <SEALED>
    *       | <OVERRIDE>
    *       | <ABSTRACT>
    *       | <EXTERN>
    *       | <ASYNC>
    *       | MethodModifierUnsafe()
    */
   public void visit(MethodModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(MethodModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <VOID>
    *       | Type()
    */
   public void visit(ReturnType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> InterfaceType()
    *       | Identifier()
    */
   public void visit(MemberName n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ FormalParameterList() ]
    */
   public void visit(FormalParameterListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> ParameterArray()
    *       | FixedParameters()
    */
   public void visit(FormalParameterList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> FixedParameter()
    * f1 -> MoreFixedParameters()
    * f2 -> ParameterArrayOpt()
    */
   public void visit(FixedParameters n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ <COMMA> FixedParameter() MoreFixedParameters() ParameterArrayOpt() ]
    */
   public void visit(MoreFixedParameters n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ <COMMA> ParameterArray() ]
    */
   public void visit(ParameterArrayOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> ParameterModifierOpt()
    * f2 -> Type()
    * f3 -> Identifier()
    * f4 -> DefaultArgumentOpt()
    */
   public void visit(FixedParameter n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> [ ParameterModifier() ]
    */
   public void visit(ParameterModifierOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <REF>
    *       | <OUT>
    *       | <THIS>
    */
   public void visit(ParameterModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ DefaultArgument() ]
    */
   public void visit(DefaultArgumentOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <EQUAL>
    * f1 -> Expression()
    */
   public void visit(DefaultArgument n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> <PARAMS>
    * f2 -> ArrayType()
    * f3 -> Identifier()
    */
   public void visit(ParameterArray n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> Block()
    *       | <EQUAL_GREATER> Expression() <SEMICOLON>
    *       | <SEMICOLON>
    */
   public void visit(MethodBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> StatementList()
    */
   public void visit(StatementListOpt n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ Statement() StatementList() ]
    */
   public void visit(StatementList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> PropertyModifierList()
    * f2 -> Type()
    * f3 -> MemberName()
    * f4 -> PropertyBody()
    */
   public void visit(PropertyDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> [ PropertyModifier() PropertyModifierList() ]
    */
   public void visit(PropertyModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <STATIC>
    *       | <VIRTUAL>
    *       | <SEALED>
    *       | <OVERRIDE>
    *       | <ABSTRACT>
    *       | <EXTERN>
    */
   public void visit(PropertyModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LBRACE> AccessorDeclarations() <RBRACE> PropertyInitializerOpt()
    *       | <EQUAL_GREATER> Expression() <SEMICOLON>
    */
   public void visit(PropertyBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> GetAccessorDeclaration() SetAccessorDeclaration()
    *       | GetAccessorDeclaration()
    *       | SetAccessorDeclaration() GetAccessorDeclaration()
    *       | SetAccessorDeclaration()
    */
   public void visit(AccessorDeclarations n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> AccessorModifierOpt()
    * f2 -> <GET>
    * f3 -> AccessorBody()
    */
   public void visit(GetAccessorDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ AccessorModifier() ]
    */
   public void visit(AccessorModifierOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <PROTECTED> <INTERNAL>
    *       | <INTERNAL> <PROTECTED>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    */
   public void visit(AccessorModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Block()
    *       | <SEMICOLON>
    */
   public void visit(AccessorBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> AccessorModifierOpt()
    * f2 -> <SET>
    * f3 -> AccessorBody()
    */
   public void visit(SetAccessorDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ PropertyInitializer() ]
    */
   public void visit(PropertyInitializerOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <EQUAL>
    * f1 -> VariableInitializer()
    * f2 -> <SEMICOLON>
    */
   public void visit(PropertyInitializer n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> AttributesOpt() EventModifierList() <EVENT> Type() MemberName() <LBRACE> EventAccessorDeclarations() <RBRACE>
    *       | AttributesOpt() EventModifierList() <EVENT> Type() VariableDeclarators() <SEMICOLON>
    */
   public void visit(EventDeclaration n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ EventModifier() EventModifierList() ]
    */
   public void visit(EventModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <STATIC>
    *       | <VIRTUAL>
    *       | <SEALED>
    *       | <OVERRIDE>
    *       | <ABSTRACT>
    *       | <EXTERN>
    *       | EventModifierUnsafe()
    */
   public void visit(EventModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(EventModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AddAccessorDeclaration() RemoveAccessorDeclaration()
    *       | RemoveAccessorDeclaration() AddAccessorDeclaration()
    */
   public void visit(EventAccessorDeclarations n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> <ADD>
    * f2 -> Block()
    */
   public void visit(AddAccessorDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> <REMOVE>
    * f2 -> Block()
    */
   public void visit(RemoveAccessorDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> IndexerModifierList()
    * f2 -> IndexerDeclarator()
    * f3 -> IndexerBody()
    */
   public void visit(IndexerDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ IndexerModifier() IndexerModifierList() ]
    */
   public void visit(IndexerModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <VIRTUAL>
    *       | <SEALED>
    *       | <OVERRIDE>
    *       | <ABSTRACT>
    *       | <EXTERN>
    *       | IndexerModifierUnsafe()
    */
   public void visit(IndexerModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(IndexerModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Type() <THIS> <LBRACKET> FormalParameterList() <RBRACKET>
    *       | Type() InterfaceType() <DOT> <THIS> <LBRACKET> FormalParameterList() <RBRACKET>
    */
   public void visit(IndexerDeclarator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LBRACE> AccessorDeclarations() <RBRACE>
    *       | <EQUAL_GREATER> Expression() <SEMICOLON>
    */
   public void visit(IndexerBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> OperatorModifierList()
    * f2 -> OperatorDeclarator()
    * f3 -> OperatorBody()
    */
   public void visit(OperatorDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ OperatorModifier() OperatorModifierList() ]
    */
   public void visit(OperatorModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <PUBLIC>
    *       | <STATIC>
    *       | <EXTERN>
    *       | OperatorModifierUnsafe()
    */
   public void visit(OperatorModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(OperatorModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> BinaryOperatorDeclarator()
    *       | ConversionOperatorDeclarator()
    *       | UnaryOperatorDeclarator()
    */
   public void visit(OperatorDeclarator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Type()
    * f1 -> <OPERATOR>
    * f2 -> OverloadableUnaryOperator()
    * f3 -> <LPAREN>
    * f4 -> Type()
    * f5 -> Identifier()
    * f6 -> <RPAREN>
    */
   public void visit(UnaryOperatorDeclarator n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * f0 -> <PLUS>
    *       | <MINUS>
    *       | <EXCLAMATION>
    *       | <TILDE>
    *       | <DBL_PLUS>
    *       | <DBL_MINUS>
    *       | <TRUE>
    *       | <FALSE>
    */
   public void visit(OverloadableUnaryOperator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Type()
    * f1 -> <OPERATOR>
    * f2 -> OverloadableBinaryOperator()
    * f3 -> <LPAREN>
    * f4 -> Type()
    * f5 -> Identifier()
    * f6 -> <COMMA>
    * f7 -> Type()
    * f8 -> Identifier()
    * f9 -> <RPAREN>
    */
   public void visit(BinaryOperatorDeclarator n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
   }

   /**
    * f0 -> <PLUS>
    *       | <MINUS>
    *       | <ASTERISK>
    *       | <SLASH>
    *       | <PERCENT>
    *       | <AMPERSAND>
    *       | <VERTICAL>
    *       | <CARET>
    *       | <DBL_LESS>
    *       | <DBL_GREATER>
    *       | <DBL_EQUAL>
    *       | <EXCL_EQUAL>
    *       | <GREATER>
    *       | <LESS>
    *       | <GREATER_EQUAL>
    *       | <LESS_EQUAL>
    */
   public void visit(OverloadableBinaryOperator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <IMPLICIT> <OPERATOR> Type() <LPAREN> Type() Identifier() DefaultArgumentOpt() <RPAREN>
    *       | <EXPLICIT> <OPERATOR> Type() <LPAREN> Type() Identifier() DefaultArgumentOpt() <RPAREN>
    */
   public void visit(ConversionOperatorDeclarator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Block()
    *       | <EQUAL_GREATER> Expression() <SEMICOLON>
    *       | <SEMICOLON>
    */
   public void visit(OperatorBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> ConstructorModifierList()
    * f2 -> ConstructorDeclarator()
    * f3 -> ConstructorBody()
    */
   public void visit(ConstructorDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ ConstructorModifier() ConstructorModifierList() ]
    */
   public void visit(ConstructorModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <EXTERN>
    *       | ConstructorModifierUnsafe()
    */
   public void visit(ConstructorModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(ConstructorModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> <LPAREN>
    * f2 -> FormalParameterListOpt()
    * f3 -> <RPAREN>
    * f4 -> ConstructorInitializerOpt()
    */
   public void visit(ConstructorDeclarator n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> [ ConstructorInitializer() ]
    */
   public void visit(ConstructorInitializerOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <COLON> <BASE> <LPAREN> ArgumentListOpt() <RPAREN>
    *       | <COLON> <THIS> <LPAREN> ArgumentListOpt() <RPAREN>
    */
   public void visit(ConstructorInitializer n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ ArgumentList() ]
    */
   public void visit(ArgumentListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Argument()
    * f1 -> MoreArguments()
    */
   public void visit(ArgumentList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ArgumentNameOpt()
    * f1 -> ArgumentValue()
    */
   public void visit(Argument n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> Argument() MoreArguments() ]
    */
   public void visit(MoreArguments n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ ArgumentName() ]
    */
   public void visit(ArgumentNameOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> <COLON>
    */
   public void visit(ArgumentName n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Expression()
    *       | <REF> VariableReference()
    *       | <OUT> VariableReference()
    */
   public void visit(ArgumentValue n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Expression()
    */
   public void visit(VariableReference n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Block()
    *       | <SEMICOLON>
    */
   public void visit(ConstructorBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt() ExternOpt() <TILDE> Identifier() <LPAREN> <RPAREN> DestructorBody()
    *       | DestructorDeclarationUnsafe()
    */
   public void visit(DestructorDeclaration n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <EXTERN> ]
    */
   public void visit(ExternOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Block()
    *       | <SEMICOLON>
    */
   public void visit(DestructorBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt() ExternOpt() UnsafeOpt() <TILDE> Identifier() <LPAREN> <RPAREN> DestructorBody()
    *       | AttributesOpt() UnsafeOpt() ExternOpt() <TILDE> Identifier() <LPAREN> <RPAREN> DestructorBody()
    */
   public void visit(DestructorDeclarationUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <UNSAFE> ]
    */
   public void visit(UnsafeOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> StaticConstructorModifiers()
    * f2 -> Identifier()
    * f3 -> <LPAREN>
    * f4 -> <RPAREN>
    * f5 -> StaticConstructorBody()
    */
   public void visit(StaticConstructorDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> ( <EXTERN> | <UNSAFE> )*
    * f1 -> <STATIC>
    * f2 -> ( <EXTERN> | <UNSAFE> )*
    */
   public void visit(StaticConstructorModifiers n) {
      if ( n.f0.present() ) {
         processList(n.f0);
      }
      n.f1.accept(this);
      if ( n.f2.present() ) {
         processList(n.f2);
      }
   }

   /**
    * f0 -> ( <EXTERN> | <UNSAFE> )*
    * f1 -> <STATIC>
    * f2 -> ( <EXTERN> | <UNSAFE> )*
    */
   public void visit(StaticConstructorModifiersUnsafe n) {
      if ( n.f0.present() ) {
         processList(n.f0);
      }
      n.f1.accept(this);
      if ( n.f2.present() ) {
         processList(n.f2);
      }
   }

   /**
    * f0 -> Block()
    *       | <SEMICOLON>
    */
   public void visit(StaticConstructorBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> StructModifierList()
    * f2 -> PartialOpt()
    * f3 -> <STRUCT>
    * f4 -> Identifier()
    * f5 -> TypeParameterListOpt()
    * f6 -> StructInterfacesOpt()
    * f7 -> TypeParameterConstraintsClauseList()
    * f8 -> StructBody()
    * f9 -> SemicolonOpt()
    */
   public void visit(StructDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
   }

   /**
    * f0 -> [ StructModifier() StructModifierList() ]
    */
   public void visit(StructModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | StructModifierUnsafe()
    */
   public void visit(StructModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(StructModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ StructInterfaces() ]
    */
   public void visit(StructInterfacesOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <COLON>
    * f1 -> InterfaceTypeList()
    */
   public void visit(StructInterfaces n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <LBRACE>
    * f1 -> ( StructMemberDeclaration() )*
    * f2 -> <RBRACE>
    */
   public void visit(StructBody n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
      n.f2.accept(this);
   }

   /**
    * f0 -> StructMemberDeclarationUnsafe()
    *       | ConstantDeclaration()
    *       | PropertyDeclaration()
    *       | MethodDeclaration()
    *       | EventDeclaration()
    *       | IndexerDeclaration()
    *       | OperatorDeclaration()
    *       | ConstructorDeclaration()
    *       | StaticConstructorDeclaration()
    *       | FieldDeclaration()
    *       | TypeDeclaration()
    */
   public void visit(StructMemberDeclaration n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> FixedSizedBufferDeclaration()
    */
   public void visit(StructMemberDeclarationUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> FixedSizeBufferModifierList()
    * f2 -> <FIXED>
    * f3 -> BufferElementType()
    * f4 -> FixedSizeBufferDeclaratorList()
    * f5 -> <SEMICOLON>
    */
   public void visit(FixedSizedBufferDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> [ FixedSizeBufferModifier() FixedSizeBufferModifierList() ]
    */
   public void visit(FixedSizeBufferModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | <UNSAFE>
    */
   public void visit(FixedSizeBufferModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Type()
    */
   public void visit(BufferElementType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ( FixedSizeBufferDeclarator() )+
    */
   public void visit(FixedSizeBufferDeclaratorList n) {
      processList(n.f0);
   }

   /**
    * f0 -> Identifier()
    * f1 -> <LBRACKET>
    * f2 -> ConstantExpression()
    * f3 -> <RBRACKET>
    */
   public void visit(FixedSizeBufferDeclarator n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> InterfaceModifierList()
    * f2 -> PartialOpt()
    * f3 -> <INTERFACE>
    * f4 -> Identifier()
    * f5 -> VariantTypeParameterListOpt()
    * f6 -> InterfaceBaseOpt()
    * f7 -> TypeParameterConstraintsClauseList()
    * f8 -> InterfaceBody()
    * f9 -> SemicolonOpt()
    */
   public void visit(InterfaceDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
   }

   /**
    * f0 -> [ InterfaceModifier() InterfaceModifierList() ]
    */
   public void visit(InterfaceModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | InterfaceModifierUnsafe()
    */
   public void visit(InterfaceModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(InterfaceModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ VariantTypeParameterList() ]
    */
   public void visit(VariantTypeParameterListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <LESS>
    * f1 -> VariantTypeParameters()
    * f2 -> <GREATER>
    */
   public void visit(VariantTypeParameterList n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> VarianceAnnotationOpt()
    * f2 -> TypeParameter()
    * f3 -> VariantTypeParametersPrime()
    */
   public void visit(VariantTypeParameters n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ <COMMA> AttributesOpt() VarianceAnnotationOpt() TypeParameter() VariantTypeParametersPrime() ]
    */
   public void visit(VariantTypeParametersPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ VarianceAnnotation() ]
    */
   public void visit(VarianceAnnotationOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <IN>
    *       | <OUT>
    */
   public void visit(VarianceAnnotation n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ InterfaceBase() ]
    */
   public void visit(InterfaceBaseOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <COLON>
    * f1 -> InterfaceTypeList()
    */
   public void visit(InterfaceBase n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <LBRACE>
    * f1 -> InterfaceMemberDeclarationList()
    * f2 -> <RBRACE>
    */
   public void visit(InterfaceBody n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ InterfaceMemberPrefix() InterfaceMemberDeclaration() InterfaceMemberDeclarationList() ]
    */
   public void visit(InterfaceMemberDeclarationList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> NewOpt()
    */
   public void visit(InterfaceMemberPrefix n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> InterfaceEventDeclaration()
    *       | InterfaceIndexerDeclaration()
    *       | InterfacePropertyDeclaration()
    *       | InterfaceMethodDeclaration()
    */
   public void visit(InterfaceMemberDeclaration n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ReturnType()
    * f1 -> Identifier()
    * f2 -> [ TypeParameterList() ]
    * f3 -> <LPAREN>
    * f4 -> FormalParameterListOpt()
    * f5 -> <RPAREN>
    * f6 -> TypeParameterConstraintsClauseList()
    * f7 -> <SEMICOLON>
    */
   public void visit(InterfaceMethodDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
   }

   /**
    * f0 -> [ <NEW> ]
    */
   public void visit(NewOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> <LBRACE>
    * f3 -> InterfaceAccessors()
    * f4 -> <RBRACE>
    */
   public void visit(InterfacePropertyDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> AttributesOpt() <GET> <SEMICOLON> AttributesOpt() <SET> <SEMICOLON>
    *       | AttributesOpt() <SET> <SEMICOLON> AttributesOpt() <GET> <SEMICOLON>
    *       | AttributesOpt() <GET> <SEMICOLON>
    *       | AttributesOpt() <SET> <SEMICOLON>
    */
   public void visit(InterfaceAccessors n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <EVENT>
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> <SEMICOLON>
    */
   public void visit(InterfaceEventDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> Type()
    * f1 -> <THIS>
    * f2 -> <LBRACKET>
    * f3 -> FormalParameterList()
    * f4 -> <RBRACKET>
    * f5 -> <LBRACE>
    * f6 -> InterfaceAccessors()
    * f7 -> <RBRACE>
    */
   public void visit(InterfaceIndexerDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> EnumModifierList()
    * f2 -> <ENUM>
    * f3 -> Identifier()
    * f4 -> EnumBaseOpt()
    * f5 -> EnumBody()
    * f6 -> SemicolonOpt()
    */
   public void visit(EnumDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * f0 -> [ EnumModifier() EnumModifierList() ]
    */
   public void visit(EnumModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    */
   public void visit(EnumModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ EnumBase() ]
    */
   public void visit(EnumBaseOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <COLON>
    * f1 -> IntegralType()
    */
   public void visit(EnumBase n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <LBRACE> EnumMemberDeclarations() <COMMA> <RBRACE>
    *       | <LBRACE> EnumMemberDeclarations() <RBRACE>
    *       | <LBRACE> <RBRACE>
    */
   public void visit(EnumBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> EnumMemberDeclaration()
    * f1 -> MoreEnumMemberDeclarations()
    */
   public void visit(EnumMemberDeclarations n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> EnumMemberDeclaration() MoreEnumMemberDeclarations() ]
    */
   public void visit(MoreEnumMemberDeclarations n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AttributesOpt() Identifier() <EQUAL> ConstantExpression()
    *       | AttributesOpt() Identifier()
    */
   public void visit(EnumMemberDeclaration n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AttributesOpt()
    * f1 -> DelegateModifierList()
    * f2 -> <DELEGATE>
    * f3 -> ReturnType()
    * f4 -> Identifier()
    * f5 -> VariantTypeParameterListOpt()
    * f6 -> <LPAREN>
    * f7 -> FormalParameterListOpt()
    * f8 -> <RPAREN>
    * f9 -> TypeParameterConstraintsClauseList()
    * f10 -> SemicolonOpt()
    */
   public void visit(DelegateDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
   }

   /**
    * f0 -> [ DelegateModifier() DelegateModifierList() ]
    */
   public void visit(DelegateModifierList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <NEW>
    *       | <PUBLIC>
    *       | <PROTECTED>
    *       | <INTERNAL>
    *       | <PRIVATE>
    *       | DelegateModifierUnsafe()
    */
   public void visit(DelegateModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    */
   public void visit(DelegateModifierUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> QueryExpression()
    *       | LambdaExpression()
    *       | Assignment()
    *       | ConditionalExpression()
    */
   public void visit(Expression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> QueryExpression()
    *       | ConditionalExpression()
    *       | LambdaExpression()
    */
   public void visit(NonAssignmentExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> NullCoalescingExpression() <QUESTION> Expression() <COLON> Expression()
    *       | NullCoalescingExpression()
    */
   public void visit(ConditionalExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ConditionalOrExpression() <DBL_QUESTION> NullCoalescingExpression()
    *       | ConditionalOrExpression()
    */
   public void visit(NullCoalescingExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ConditionalAndExpression()
    * f1 -> ConditionalOrExpressionPrime()
    */
   public void visit(ConditionalOrExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <DBL_VERTICAL> ConditionalAndExpression() ConditionalOrExpressionPrime() ]
    */
   public void visit(ConditionalOrExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> InclusiveOrExpression()
    * f1 -> ConditionalAndExpressionPrime()
    */
   public void visit(ConditionalAndExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <DBL_AMPERSAND> InclusiveOrExpression() ConditionalAndExpressionPrime() ]
    */
   public void visit(ConditionalAndExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> ExclusiveOrExpression()
    * f1 -> InclusiveOrExpressionPrime()
    */
   public void visit(InclusiveOrExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <VERTICAL> ExclusiveOrExpression() InclusiveOrExpressionPrime() ]
    */
   public void visit(InclusiveOrExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AndExpression()
    * f1 -> ExclusiveOrExpressionPrime()
    */
   public void visit(ExclusiveOrExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <CARET> AndExpression() ExclusiveOrExpressionPrime() ]
    */
   public void visit(ExclusiveOrExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> EqualityExpression()
    * f1 -> AndExpressionPrime()
    */
   public void visit(AndExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <AMPERSAND> EqualityExpression() AndExpressionPrime() ]
    */
   public void visit(AndExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> RelationalExpression()
    * f1 -> EqualityExpressionPrime()
    */
   public void visit(EqualityExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ ( <DBL_EQUAL> RelationalExpression() EqualityExpressionPrime() | <EXCL_EQUAL> RelationalExpression() EqualityExpressionPrime() ) ]
    */
   public void visit(EqualityExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> ShiftExpression()
    * f1 -> RelationalExpressionPrime()
    */
   public void visit(RelationalExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ ( <LESS> ShiftExpression() RelationalExpressionPrime() | <GREATER> ShiftExpression() RelationalExpressionPrime() | <LESS_EQUAL> ShiftExpression() RelationalExpressionPrime() | <GREATER_EQUAL> ShiftExpression() RelationalExpressionPrime() | <IS> Type() RelationalExpressionPrime() | <AS> Type() RelationalExpressionPrime() ) ]
    */
   public void visit(RelationalExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AdditiveExpression()
    * f1 -> ShiftExpressionPrime()
    */
   public void visit(ShiftExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ ( <DBL_LESS> AdditiveExpression() ShiftExpressionPrime() | <DBL_GREATER> AdditiveExpression() ShiftExpressionPrime() ) ]
    */
   public void visit(ShiftExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> MultiplicativeExpression()
    * f1 -> AdditiveExpressionPrime()
    */
   public void visit(AdditiveExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ ( <PLUS> MultiplicativeExpression() AdditiveExpressionPrime() | <MINUS> MultiplicativeExpression() AdditiveExpressionPrime() ) ]
    */
   public void visit(AdditiveExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> UnaryExpression()
    * f1 -> MultiplicativeExpressionPrime()
    */
   public void visit(MultiplicativeExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ ( <ASTERISK> UnaryExpression() MultiplicativeExpressionPrime() | <SLASH> UnaryExpression() MultiplicativeExpressionPrime() | <PERCENT> UnaryExpression() MultiplicativeExpressionPrime() ) ]
    */
   public void visit(MultiplicativeExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> CastExpression()
    *       | NullConditionalExpression()
    *       | <PLUS> UnaryExpression()
    *       | <MINUS> UnaryExpression()
    *       | <EXCLAMATION> UnaryExpression()
    *       | <TILDE> UnaryExpression()
    *       | PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | AwaitExpression()
    *       | UnaryExpressionUnsafe()
    *       | PrimaryExpression()
    */
   public void visit(UnaryExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ArrayCreationExpression() PrimaryExpressionPrime()
    *       | PrimaryNoArrayCreationExpressionPrime() <LBRACKET> ExpressionList() <RBRACKET> PrimaryExpressionPrime()
    *       | PrimaryNoArrayCreationExpressionPrime() PrimaryExpressionPrime()
    *       | SizeofExpression() PrimaryExpressionPrime()
    *       | PredefinedType() <DOT> Identifier() TypeArgumentListOpt() PrimaryExpressionPrime()
    *       | QualifiedAliasMember() <DOT> Identifier() PrimaryExpressionPrime()
    */
   public void visit(PrimaryExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <DOT> Identifier() TypeArgumentListOpt() PrimaryExpressionPrime() | <LPAREN> ArgumentListOpt() <RPAREN> PrimaryExpressionPrime() | <MINUS_GREATER> Identifier() PrimaryExpressionPrime() | <DBL_PLUS> PrimaryExpressionPrime() | <DBL_MINUS> PrimaryExpressionPrime() | <LBRACKET> ExpressionList() <RBRACKET> PrimaryExpressionPrime() ]
    */
   public void visit(PrimaryExpressionPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Literal()
    *       | AnonymousMethodExpression()
    *       | SimpleName()
    *       | ParanthesizedExpression()
    *       | ThisAccess()
    *       | BaseAccess()
    *       | ObjectCreationExpression()
    *       | DelegateCreationExpression()
    *       | AnonymousObjectCreationExpression()
    *       | TypeofExpression()
    *       | CheckedExpression()
    *       | UncheckedExpression()
    *       | DefaultValueExpression()
    *       | NameofExpression()
    */
   public void visit(PrimaryNoArrayCreationExpressionPrime n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Literal() PrimaryNoArrayCreationExpressionPrime2()
    *       | AnonymousMethodExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | SimpleName() PrimaryNoArrayCreationExpressionPrime2()
    *       | ParanthesizedExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | MemberAccess() PrimaryNoArrayCreationExpressionPrime2()
    *       | InvocationExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | ThisAccess() PrimaryNoArrayCreationExpressionPrime2()
    *       | BaseAccess() PrimaryNoArrayCreationExpressionPrime2()
    *       | PostIncrementExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | PostDecrementExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | ObjectCreationExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | DelegateCreationExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | AnonymousObjectCreationExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | TypeofExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | CheckedExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | UncheckedExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | DefaultValueExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | NameofExpression() PrimaryNoArrayCreationExpressionPrime2()
    *       | PointerMemberAccess() PrimaryNoArrayCreationExpressionPrime2()
    *       | SizeofExpression() PrimaryNoArrayCreationExpressionPrime2()
    */
   public void visit(PrimaryNoArrayCreationExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <LBRACKET> ExpressionList() <RBRACKET> PrimaryNoArrayCreationExpressionPrime2() ]
    */
   public void visit(PrimaryNoArrayCreationExpressionPrime2 n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <TRUE>
    *       | <FALSE>
    *       | <INTEGER_LITERAL>
    *       | <REAL_LITERAL>
    *       | <CHARACTER_LITERAL>
    *       | <STRING_LITERAL>
    *       | <NULL>
    */
   public void visit(Literal n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <IDENTIFIER>
    *       | <ADD>
    *       | <ALIAS>
    *       | <ASYNC>
    *       | <ASCENDING>
    *       | <ASSEMBLY>
    *       | <AWAIT>
    *       | <BY>
    *       | <DESCENDING>
    *       | <DYNAMIC>
    *       | <EQUALS>
    *       | <FIELD>
    *       | <FROM>
    *       | <GET>
    *       | <GROUP>
    *       | <INTO>
    *       | <JOIN>
    *       | <LET>
    *       | <METHOD>
    *       | <MODULE>
    *       | <NAMEOF>
    *       | <ON>
    *       | <ORDERBY>
    *       | <PARAM>
    *       | <PARTIAL>
    *       | <PROPERTY>
    *       | <REMOVE>
    *       | <SELECT>
    *       | <SET>
    *       | <TYPE>
    *       | <VAR>
    *       | <WHEN>
    *       | <WHERE>
    *       | <YIELD>
    */
   public void visit(Identifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> TypeArgumentListOpt()
    */
   public void visit(SimpleName n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <LPAREN>
    * f1 -> Expression()
    * f2 -> <RPAREN>
    */
   public void visit(ParanthesizedExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> PrimaryExpression() <DOT> Identifier() TypeArgumentListOpt()
    *       | PredefinedType() <DOT> Identifier() TypeArgumentListOpt()
    *       | QualifiedAliasMember() <DOT> Identifier()
    */
   public void visit(MemberAccess n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <LPAREN>
    * f2 -> ArgumentListOpt()
    * f3 -> <RPAREN>
    */
   public void visit(InvocationExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> PrimaryNoArrayCreationExpression()
    * f1 -> <LBRACKET>
    * f2 -> ExpressionList()
    * f3 -> <RBRACKET>
    */
   public void visit(ElementAccess n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> Expression()
    * f1 -> MoreExpressions()
    */
   public void visit(ExpressionList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> Expression() MoreExpressions() ]
    */
   public void visit(MoreExpressions n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <THIS>
    */
   public void visit(ThisAccess n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <BASE> <DOT> Identifier()
    *       | <BASE> <LBRACKET> ExpressionList() <RBRACKET>
    */
   public void visit(BaseAccess n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <DBL_PLUS>
    */
   public void visit(PostIncrementExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <DBL_MINUS>
    */
   public void visit(PostDecrementExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <NEW> Type() <LPAREN> ArgumentListOpt() <RPAREN> ObjectOrCollectionInitializerOpt()
    *       | <NEW> Type() ObjectOrCollectionInitializerOpt()
    */
   public void visit(ObjectCreationExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ ObjectOrCollectionInitializer() ]
    */
   public void visit(ObjectOrCollectionInitializerOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> CollectionInitializer()
    *       | ObjectInitializer()
    */
   public void visit(ObjectOrCollectionInitializer n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LBRACE> MemberInitializerList() <COMMA> <RBRACE>
    *       | <LBRACE> MemberInitializerListOpt() <RBRACE>
    */
   public void visit(ObjectInitializer n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ MemberInitializerList() ]
    */
   public void visit(MemberInitializerListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> MemberInitializer()
    * f1 -> MoreMemberInitializers()
    */
   public void visit(MemberInitializerList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> MemberInitializer() MoreMemberInitializers() ]
    */
   public void visit(MoreMemberInitializers n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> InitializerTarget()
    * f1 -> <EQUAL>
    * f2 -> InitializerValue()
    */
   public void visit(MemberInitializer n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> Identifier()
    *       | <LBRACKET> ArgumentList() <RBRACKET>
    */
   public void visit(InitializerTarget n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Expression()
    *       | ObjectOrCollectionInitializer()
    */
   public void visit(InitializerValue n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LBRACE> ElementInitializerList() <COMMA> <RBRACE>
    *       | <LBRACE> ElementInitializerList() <RBRACE>
    */
   public void visit(CollectionInitializer n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ElementInitializer()
    * f1 -> MoreElementInitializers()
    */
   public void visit(ElementInitializerList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> ElementInitializer() MoreElementInitializers() ]
    */
   public void visit(MoreElementInitializers n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> NonAssignmentExpression()
    *       | <LBRACE> ExpressionList() <RBRACE>
    */
   public void visit(ElementInitializer n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <NEW>
    * f1 -> DelegateType()
    * f2 -> <LPAREN>
    * f3 -> Expression()
    * f4 -> <RPAREN>
    */
   public void visit(DelegateCreationExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> <NEW>
    * f1 -> AnonymousObjectInitializer()
    */
   public void visit(AnonymousObjectCreationExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <LBRACE> MemberDeclarattorListOpt() <COMMA> <RBRACE>
    *       | <LBRACE> MemberDeclarattorListOpt() <RBRACE>
    */
   public void visit(AnonymousObjectInitializer n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ MemberDeclaratorList() ]
    */
   public void visit(MemberDeclarattorListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> MemberDeclarator()
    * f1 -> MoreMemberDeclarators()
    */
   public void visit(MemberDeclaratorList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> MemberDeclarator() MoreMemberDeclarators() ]
    */
   public void visit(MoreMemberDeclarators n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Identifier() <EQUAL> Expression()
    *       | SimpleName()
    *       | MemberAccess()
    *       | BaseAccess()
    *       | NullConditionalMemberAccess()
    */
   public void visit(MemberDeclarator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression() NullConditionalOperationsOpt() <QUESTION> <DOT> Identifier() TypeArgumentListOpt()
    *       | PrimaryExpression() NullConditionalOperationsOpt() <DOT> Identifier() TypeArgumentListOpt()
    */
   public void visit(NullConditionalMemberAccess n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ NullConditionalOperations() ]
    */
   public void visit(NullConditionalOperationsOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <QUESTION> <DOT> Identifier() TypeArgumentListOpt() NullConditionalOperationsPrimeOpt()
    *       | <QUESTION> <LBRACKET> ArgumentList() <RBRACKET> NullConditionalOperationsPrimeOpt()
    */
   public void visit(NullConditionalOperations n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ NullConditionalOperationsPrime() ]
    */
   public void visit(NullConditionalOperationsPrimeOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <QUESTION> <DOT> Identifier() TypeArgumentListOpt() NullConditionalOperationsPrimeOpt()
    *       | <QUESTION> <LBRACKET> ArgumentList() <RBRACKET> NullConditionalOperationsPrimeOpt()
    *       | <DOT> Identifier() TypeArgumentListOpt() NullConditionalOperationsPrimeOpt()
    *       | <LBRACKET> ArgumentList() <RBRACKET> NullConditionalOperationsPrimeOpt()
    *       | <LPAREN> ArgumentListOpt() <RPAREN> NullConditionalOperationsPrimeOpt()
    */
   public void visit(NullConditionalOperationsPrime n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <TYPEOF> <LPAREN> <VOID> <RPAREN>
    *       | <TYPEOF> <LPAREN> Type() <RPAREN>
    *       | <TYPEOF> <LPAREN> UnboundTypeName() <RPAREN>
    */
   public void visit(TypeofExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Identifier() <DBL_COLON> Identifier() GenericDimensionSpecifierOpt() UnboundTypeNamePrime()
    *       | Identifier() GenericDimensionSpecifierOpt() UnboundTypeNamePrime()
    */
   public void visit(UnboundTypeName n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <DOT> Identifier() GenericDimensionSpecifierOpt() UnboundTypeNamePrime() ]
    */
   public void visit(UnboundTypeNamePrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ GenericDimensionSpecifier() ]
    */
   public void visit(GenericDimensionSpecifierOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <LESS>
    * f1 -> CommaList()
    * f2 -> <GREATER>
    */
   public void visit(GenericDimensionSpecifier n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ <COMMA> CommaList() ]
    */
   public void visit(CommaList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <CHECKED>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    */
   public void visit(CheckedExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <UNCHECKED>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    */
   public void visit(UncheckedExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <_DEFAULT>
    * f1 -> <LPAREN>
    * f2 -> Type()
    * f3 -> <RPAREN>
    */
   public void visit(DefaultValueExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <NAMEOF>
    * f1 -> <LPAREN>
    * f2 -> NamedEntity()
    * f3 -> <RPAREN>
    */
   public void visit(NameofExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> SimpleName() NamedEntityPrime()
    *       | NamedEntityTargetPrime() <DOT> Identifier() TypeArgumentListOpt() NamedEntityPrime()
    */
   public void visit(NamedEntity n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ <DOT> Identifier() TypeArgumentListOpt() NamedEntityPrime() ]
    */
   public void visit(NamedEntityPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <THIS>
    *       | <BASE>
    *       | PredefinedType()
    *       | QualifiedAliasMember()
    */
   public void visit(NamedEntityTargetPrime n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> NamedEntity()
    *       | PredefinedType()
    *       | QualifiedAliasMember()
    *       | <THIS>
    *       | <BASE>
    */
   public void visit(NamedEntityTarget n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <BOOL>
    *       | <BYTE>
    *       | <CHAR>
    *       | <DECIMAL>
    *       | <DOUBLE>
    *       | <FLOAT>
    *       | <INT>
    *       | <LONG>
    *       | <OBJECT>
    *       | <SBYTE>
    *       | <SHORT>
    *       | <STRING>
    *       | <UINT>
    *       | <ULONG>
    *       | <USHORT>
    */
   public void visit(PredefinedType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ( <ASYNC> )?
    * f1 -> <DELEGATE>
    * f2 -> ExplicitAnonymousFunctionSignatureOpt()
    * f3 -> Block()
    */
   public void visit(AnonymousMethodExpression n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ ExplicitAnonymousFunctionSignature() ]
    */
   public void visit(ExplicitAnonymousFunctionSignatureOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <LPAREN>
    * f1 -> ExplicitAnonymousFunctionParameterListOpt()
    * f2 -> <RPAREN>
    */
   public void visit(ExplicitAnonymousFunctionSignature n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ ExplicitAnonymousFunctionParameterList() ]
    */
   public void visit(ExplicitAnonymousFunctionParameterListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> ExplicitAnonymousFunctionParameter()
    * f1 -> MoreExplicitAnonymousFunctionParameters()
    */
   public void visit(ExplicitAnonymousFunctionParameterList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> ExplicitAnonymousFunctionParameter() MoreExplicitAnonymousFunctionParameters() ]
    */
   public void visit(MoreExplicitAnonymousFunctionParameters n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> AnonymousFunctionParameterModifierOpt()
    * f1 -> Type()
    * f2 -> Identifier()
    */
   public void visit(ExplicitAnonymousFunctionParameter n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ AnonymousFunctionParameterModifier() ]
    */
   public void visit(AnonymousFunctionParameterModifierOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <REF>
    *       | <OUT>
    */
   public void visit(AnonymousFunctionParameterModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> PointerMemberAccess()
    *       | PointerElementAccess()
    *       | SizeofExpression()
    */
   public void visit(PrimaryNoArrayCreationExpressionUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <MINUS_GREATER>
    * f2 -> Identifier()
    */
   public void visit(PointerMemberAccess n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> PrimaryNoArrayCreationExpression()
    * f1 -> <LBRACKET>
    * f2 -> Expression()
    * f3 -> <RBRACKET>
    */
   public void visit(PointerElementAccess n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <SIZEOF>
    * f1 -> <LPAREN>
    * f2 -> UnmanagedType()
    * f3 -> <RPAREN>
    */
   public void visit(SizeofExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <NEW> NonArrayType() <LBRACKET> ExpressionList() <RBRACKET> RankSpecifierListOpt() ArrayInitializerOpt()
    *       | <NEW> ArrayType() ArrayInitializer()
    *       | <NEW> RankSpecifier() ArrayInitializer()
    */
   public void visit(ArrayCreationExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ RankSpecifierList() ]
    */
   public void visit(RankSpecifierListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ ArrayInitializer() ]
    */
   public void visit(ArrayInitializerOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <LBRACE>
    * f1 -> VariableInitializerListOpt()
    * f2 -> [ <COMMA> ]
    * f3 -> <RBRACE>
    */
   public void visit(ArrayInitializer n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      n.f3.accept(this);
   }

   /**
    * f0 -> [ VariableInitializerList() ]
    */
   public void visit(VariableInitializerListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> VariableInitializer()
    * f1 -> MoreVariableInitializers()
    */
   public void visit(VariableInitializerList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> VariableInitializer() MoreVariableInitializers() ]
    */
   public void visit(MoreVariableInitializers n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> NullConditionalOperations()
    */
   public void visit(NullConditionalExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <DBL_PLUS>
    * f1 -> UnaryExpression()
    */
   public void visit(PreIncrementExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <DBL_MINUS>
    * f1 -> UnaryExpression()
    */
   public void visit(PreDecrementExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <LPAREN>
    * f1 -> Type()
    * f2 -> <RPAREN>
    * f3 -> UnaryExpression()
    */
   public void visit(CastExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <AWAIT>
    * f1 -> UnaryExpression()
    */
   public void visit(AwaitExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> PointerIndirectionExpression()
    *       | AddressofExpression()
    */
   public void visit(UnaryExpressionUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <ASTERISK>
    * f1 -> UnaryExpression()
    */
   public void visit(PointerIndirectionExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <AMPERSAND>
    * f1 -> UnaryExpression()
    */
   public void visit(AddressofExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> LamdaExpressionModifierList()
    * f1 -> AnonymousFunctionSignature()
    * f2 -> <EQUAL_GREATER>
    * f3 -> AnonymousFunctionBody()
    */
   public void visit(LambdaExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> ( LambdaExpressionModifier() )*
    */
   public void visit(LamdaExpressionModifierList n) {
      if ( n.f0.present() ) {
         processList(n.f0);
      }
   }

   /**
    * f0 -> <ASYNC>
    */
   public void visit(LambdaExpressionModifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ExplicitAnonymousFunctionSignature()
    *       | ImplicitAnonymousFunctionSignature()
    */
   public void visit(AnonymousFunctionSignature n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LPAREN> ImplicitAnonymousFunctionParameterListOpt() <RPAREN>
    *       | ImplicitAnonymousFunctionParameter()
    */
   public void visit(ImplicitAnonymousFunctionSignature n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> [ ImplicitAnonymousFunctionParameterList() ]
    */
   public void visit(ImplicitAnonymousFunctionParameterListOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> ImplicitAnonymousFunctionParameter()
    * f1 -> MoreImplicitAnonymousFunctionParameters()
    */
   public void visit(ImplicitAnonymousFunctionParameterList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> ImplicitAnonymousFunctionParameter() MoreImplicitAnonymousFunctionParameters() ]
    */
   public void visit(MoreImplicitAnonymousFunctionParameters n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Identifier()
    */
   public void visit(ImplicitAnonymousFunctionParameter n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Expression()
    *       | Block()
    */
   public void visit(AnonymousFunctionBody n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> FromClause()
    * f1 -> QueryBody()
    */
   public void visit(QueryExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <FROM>
    * f1 -> [ Type() ]
    * f2 -> Identifier()
    * f3 -> <IN>
    * f4 -> Expression()
    */
   public void visit(FromClause n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> [ Type() ]
    */
   public void visit(TypeOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> ( QueryBodyClause() )*
    * f1 -> SelectOrGroupClause()
    * f2 -> QueryContinuationOpt()
    */
   public void visit(QueryBody n) {
      if ( n.f0.present() ) {
         processList(n.f0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ QueryBodyClauses() ]
    */
   public void visit(QueryBodyClausesOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ QueryContinuation() ]
    */
   public void visit(QueryContinuationOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> QueryBodyClause() QueryBodyClauses()
    *       | QueryBodyClause()
    */
   public void visit(QueryBodyClauses n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> FromClause()
    *       | LetClause()
    *       | JoinIntoOptClause()
    *       | WhereClause()
    *       | OrderbyClause()
    */
   public void visit(QueryBodyClause n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LET>
    * f1 -> Identifier()
    * f2 -> <EQUAL>
    * f3 -> Expression()
    */
   public void visit(LetClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <WHERE>
    * f1 -> BooleanExpression()
    */
   public void visit(WhereClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Expression()
    */
   public void visit(BooleanExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <JOIN>
    * f1 -> [ Type() ]
    * f2 -> Identifier()
    * f3 -> <IN>
    * f4 -> Expression()
    * f5 -> <ON>
    * f6 -> Expression()
    * f7 -> <EQUALS>
    * f8 -> Expression()
    */
   public void visit(JoinClause n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
   }

   /**
    * f0 -> <JOIN>
    * f1 -> [ Type() ]
    * f2 -> Identifier()
    * f3 -> <IN>
    * f4 -> Expression()
    * f5 -> <ON>
    * f6 -> Expression()
    * f7 -> <EQUALS>
    * f8 -> Expression()
    * f9 -> <INTO>
    * f10 -> Identifier()
    */
   public void visit(JoinIntoClause n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
   }

   /**
    * f0 -> <JOIN> Identifier() <IN> Expression() <ON> Expression() <EQUALS> Expression() [ <INTO> Identifier() ]
    *       | <JOIN> Type() Identifier() <IN> Expression() <ON> Expression() <EQUALS> Expression() [ <INTO> Identifier() ]
    */
   public void visit(JoinIntoOptClause n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <ORDERBY>
    * f1 -> Orderings()
    */
   public void visit(OrderbyClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Ordering()
    * f1 -> MoreOrderings()
    */
   public void visit(Orderings n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> Ordering() MoreOrderings() ]
    */
   public void visit(MoreOrderings n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Expression()
    * f1 -> OrderingDirectionOpt()
    */
   public void visit(Ordering n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ OrderingDirection() ]
    */
   public void visit(OrderingDirectionOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <ASCENDING>
    *       | <DESCENDING>
    */
   public void visit(OrderingDirection n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> SelectClause()
    *       | GroupClause()
    */
   public void visit(SelectOrGroupClause n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <SELECT>
    * f1 -> Expression()
    */
   public void visit(SelectClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <GROUP>
    * f1 -> Expression()
    * f2 -> <BY>
    * f3 -> Expression()
    */
   public void visit(GroupClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <INTO>
    * f1 -> Identifier()
    * f2 -> QueryBody()
    */
   public void visit(QueryContinuation n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> UnaryExpression()
    * f1 -> AssignmentOperator()
    * f2 -> Expression()
    */
   public void visit(Assignment n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> <EQUAL>
    *       | <PLUS_EQUAL>
    *       | <MINUS_EQUAL>
    *       | <ASTERISK_EQUAL>
    *       | <SLASH_EQUAL>
    *       | <PERCENT_EQUAL>
    *       | <AMPERSAND_EQUAL>
    *       | <VERTICAL_EQUAL>
    *       | <CARET_EQUAL>
    *       | <DBL_LESS_EQUAL>
    *       | <DBL_GREATER_EQUAL>
    */
   public void visit(AssignmentOperator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> LabeledStatement()
    *       | LocalConstantDeclaration() <SEMICOLON>
    *       | EmbeddedStatement()
    *       | LocalVariableDeclaration() <SEMICOLON>
    */
   public void visit(Statement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> UnaryExpression() AssignmentOperator()
    *       | PrimaryExpression() NullConditionalOperations()
    *       | PrimaryExpression() <SEMICOLON>
    *       | <AWAIT>
    *       | <DBL_PLUS>
    *       | <DBL_MINUS>
    *       | <NEW>
    *       | <LBRACE>
    *       | <SEMICOLON>
    *       | <IF>
    *       | <SWITCH>
    *       | <WHILE>
    *       | <DO>
    *       | <FOR>
    *       | <FOREACH>
    *       | <BREAK>
    *       | <CONTINUE>
    *       | <GOTO>
    *       | <RETURN>
    *       | <THROW>
    *       | <TRY>
    *       | <CHECKED>
    *       | <UNCHECKED>
    *       | <LOCK>
    *       | <USING>
    *       | <YIELD>
    *       | <UNSAFE>
    *       | <FIXED>
    */
   public void visit(EmbeddedStatementLookahead n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> <COLON>
    * f2 -> Statement()
    */
   public void visit(LabeledStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> LocalConstantDeclaration() <SEMICOLON>
    *       | LocalVariableDeclaration() <SEMICOLON>
    */
   public void visit(DeclarationStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> LocalVariableType()
    * f1 -> LocalVariableDeclarators()
    */
   public void visit(LocalVariableDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Type()
    *       | <VAR>
    */
   public void visit(LocalVariableType n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> LocalVariableDeclarator()
    * f1 -> LocalVariableDeclaratorsPrime()
    */
   public void visit(LocalVariableDeclarators n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> LocalVariableDeclarator() LocalVariableDeclaratorsPrime() ]
    */
   public void visit(LocalVariableDeclaratorsPrime n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Identifier() <EQUAL> LocalVariableInitializer()
    *       | Identifier()
    */
   public void visit(LocalVariableDeclarator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> LocalVariableInitializerUnsafe()
    *       | QueryExpression()
    *       | ArrayInitializer()
    *       | Assignment()
    *       | LambdaExpression()
    *       | ConditionalExpression()
    */
   public void visit(LocalVariableInitializer n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> StackallocInitializer()
    */
   public void visit(LocalVariableInitializerUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <STACKALLOC>
    * f1 -> UnmanagedType()
    * f2 -> <LBRACKET>
    * f3 -> Expression()
    * f4 -> <RBRACKET>
    */
   public void visit(StackallocInitializer n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> <CONST>
    * f1 -> Type()
    * f2 -> ConstantDeclarators()
    */
   public void visit(LocalConstantDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> Block()
    *       | SelectionStatement()
    *       | IterationStatement()
    *       | JumpStatement()
    *       | TryStatement()
    *       | CheckedStatement()
    *       | UncheckedStatement()
    *       | LockStatement()
    *       | UsingStatement()
    *       | YieldStatement()
    *       | ExpressionStatement()
    *       | EmbeddedStatementUnsafe()
    *       | EmptyStatement()
    */
   public void visit(EmbeddedStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <LBRACE>
    * f1 -> StatementList()
    * f2 -> <RBRACE>
    */
   public void visit(Block n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> <SEMICOLON>
    */
   public void visit(EmptyStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> StatementExpression()
    * f1 -> <SEMICOLON>
    */
   public void visit(ExpressionStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ObjectCreationExpression()
    *       | Assignment()
    *       | NullConditionalInvocationExpression()
    *       | PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | AwaitExpression()
    *       | PrimaryExpression()
    */
   public void visit(StatementExpression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> NullConditionalOperations()
    */
   public void visit(NullConditionalInvocationExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> IfStatement()
    *       | SwitchStatement()
    */
   public void visit(SelectionStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <IF> <LPAREN> BooleanExpression() <RPAREN> EmbeddedStatement() <ELSE> EmbeddedStatement()
    *       | <IF> <LPAREN> BooleanExpression() <RPAREN> EmbeddedStatement()
    */
   public void visit(IfStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <SWITCH>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    * f4 -> SwitchBlock()
    */
   public void visit(SwitchStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> <LBRACE>
    * f1 -> SwitchSectionList()
    * f2 -> <RBRACE>
    */
   public void visit(SwitchBlock n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ SwitchSection() SwitchSectionList() ]
    */
   public void visit(SwitchSectionList n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> SwitchLabelList()
    * f1 -> StatementList()
    */
   public void visit(SwitchSection n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> SwitchLabel() SwitchLabelList()
    *       | SwitchLabel()
    */
   public void visit(SwitchLabelList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <CASE> ConstantExpression() <COLON>
    *       | <_DEFAULT> <COLON>
    */
   public void visit(SwitchLabel n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> WhileStatement()
    *       | DoStatement()
    *       | ForStatement()
    *       | ForeachStatement()
    */
   public void visit(IterationStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <WHILE>
    * f1 -> <LPAREN>
    * f2 -> BooleanExpression()
    * f3 -> <RPAREN>
    * f4 -> EmbeddedStatement()
    */
   public void visit(WhileStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> <DO>
    * f1 -> EmbeddedStatement()
    * f2 -> <WHILE>
    * f3 -> <LPAREN>
    * f4 -> BooleanExpression()
    * f5 -> <RPAREN>
    * f6 -> <SEMICOLON>
    */
   public void visit(DoStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * f0 -> <FOR>
    * f1 -> <LPAREN>
    * f2 -> ForInitializerOpt()
    * f3 -> <SEMICOLON>
    * f4 -> ForConditionOpt()
    * f5 -> <SEMICOLON>
    * f6 -> ForIteratorOpt()
    * f7 -> <RPAREN>
    * f8 -> EmbeddedStatement()
    */
   public void visit(ForStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
   }

   /**
    * f0 -> [ ForInitializer() ]
    */
   public void visit(ForInitializerOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ ForCondition() ]
    */
   public void visit(ForConditionOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ ForIterator() ]
    */
   public void visit(ForIteratorOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> LocalVariableDeclaration()
    *       | StatementExpressionList()
    */
   public void visit(ForInitializer n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> StatementExpression()
    * f1 -> MoreStatementExpressions()
    */
   public void visit(StatementExpressionList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> StatementExpression() MoreStatementExpressions() ]
    */
   public void visit(MoreStatementExpressions n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> BooleanExpression()
    */
   public void visit(ForCondition n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> StatementExpressionList()
    */
   public void visit(ForIterator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <FOREACH>
    * f1 -> <LPAREN>
    * f2 -> LocalVariableType()
    * f3 -> Identifier()
    * f4 -> <IN>
    * f5 -> Expression()
    * f6 -> <RPAREN>
    * f7 -> EmbeddedStatement()
    */
   public void visit(ForeachStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
   }

   /**
    * f0 -> BreakStatement()
    *       | ContinueStatement()
    *       | GotoStatement()
    *       | ReturnStatement()
    *       | ThrowStatement()
    */
   public void visit(JumpStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <BREAK>
    * f1 -> <SEMICOLON>
    */
   public void visit(BreakStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <CONTINUE>
    * f1 -> <SEMICOLON>
    */
   public void visit(ContinueStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <GOTO> <CASE> ConstantExpression() <SEMICOLON>
    *       | <GOTO> <_DEFAULT> <SEMICOLON>
    *       | <GOTO> Identifier() <SEMICOLON>
    */
   public void visit(GotoStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <RETURN>
    * f1 -> ExpressionOpt()
    * f2 -> <SEMICOLON>
    */
   public void visit(ReturnStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> [ Expression() ]
    */
   public void visit(ExpressionOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <THROW>
    * f1 -> ExpressionOpt()
    * f2 -> <SEMICOLON>
    */
   public void visit(ThrowStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> <TRY> Block() CatchClauseList() FinallyClause()
    *       | <TRY> Block() CatchClauseList()
    *       | <TRY> Block() FinallyClause()
    */
   public void visit(TryStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> CatchClause() CatchClauseList()
    *       | CatchClause()
    */
   public void visit(CatchClauseList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <CATCH>
    * f1 -> ExceptionSpecifierOpt()
    * f2 -> ExceptionFilterOpt()
    * f3 -> Block()
    */
   public void visit(CatchClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ ExceptionSpecifier() ]
    */
   public void visit(ExceptionSpecifierOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> [ ExceptionFilter() ]
    */
   public void visit(ExceptionFilterOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <LPAREN>
    * f1 -> Type()
    * f2 -> IdentifierOpt()
    * f3 -> <RPAREN>
    */
   public void visit(ExceptionSpecifier n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> [ Identifier() ]
    */
   public void visit(IdentifierOpt n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> <WHEN>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    */
   public void visit(ExceptionFilter n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <FINALLY>
    * f1 -> Block()
    */
   public void visit(FinallyClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <CHECKED>
    * f1 -> Block()
    */
   public void visit(CheckedStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <UNCHECKED>
    * f1 -> Block()
    */
   public void visit(UncheckedStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <LOCK>
    * f1 -> <LPAREN>
    * f2 -> Expression()
    * f3 -> <RPAREN>
    * f4 -> EmbeddedStatement()
    */
   public void visit(LockStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> <USING>
    * f1 -> <LPAREN>
    * f2 -> ResourceAcquisition()
    * f3 -> <RPAREN>
    * f4 -> EmbeddedStatement()
    */
   public void visit(UsingStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> LocalVariableDeclaration()
    *       | Expression()
    */
   public void visit(ResourceAcquisition n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <YIELD> <RETURN> Expression() <SEMICOLON>
    *       | <YIELD> <BREAK> <SEMICOLON>
    */
   public void visit(YieldStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> UnsafeStatement()
    *       | FixedStatement()
    */
   public void visit(EmbeddedStatementUnsafe n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <UNSAFE>
    * f1 -> Block()
    */
   public void visit(UnsafeStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <FIXED>
    * f1 -> <LPAREN>
    * f2 -> PointerType()
    * f3 -> FixedPointerDeclarators()
    * f4 -> <RPAREN>
    * f5 -> EmbeddedStatement()
    */
   public void visit(FixedStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> FixedPointerDeclarator()
    * f1 -> MoreFixedPointerDeclarators()
    */
   public void visit(FixedPointerDeclarators n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ <COMMA> FixedPointerDeclarator() MoreFixedPointerDeclarators() ]
    */
   public void visit(MoreFixedPointerDeclarators n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> <EQUAL>
    * f2 -> FixedPointerInitializer()
    */
   public void visit(FixedPointerDeclarator n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> <AMPERSAND> VariableReference()
    *       | Expression()
    */
   public void visit(FixedPointerInitializer n) {
      n.f0.accept(this);
   }

}

class FormatCommand {
   public static final int FORCE = 0;
   public static final int INDENT = 1;
   public static final int OUTDENT = 2;
   public static final int SPACE = 3;

   private int command;
   private int numCommands;

   FormatCommand(int command, int numCommands) {
      this.command = command;
      this.numCommands = numCommands;
   }

   public int getCommand()             { return command; }
   public int getNumCommands()         { return numCommands; }
   public void setCommand(int i)       { command = i; }
   public void setNumCommands(int i)   { numCommands = i; }
}

class TreeFormatterException extends RuntimeException {
   TreeFormatterException()         { super(); }
   TreeFormatterException(String s) { super(s); }
}

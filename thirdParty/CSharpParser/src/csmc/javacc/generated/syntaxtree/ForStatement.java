//
// Generated by JTB 1.3.2
//

package csmc.javacc.generated.syntaxtree;

/**
 * Grammar production:
 * f0 -> <FOR>
 * f1 -> <LPAREN>
 * f2 -> ForInitializerOpt()
 * f3 -> <SEMICOLON>
 * f4 -> ForConditionOpt()
 * f5 -> <SEMICOLON>
 * f6 -> ForIteratorOpt()
 * f7 -> <RPAREN>
 * f8 -> EmbeddedStatement()
 */
public class ForStatement implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public ForInitializerOpt f2;
   public NodeToken f3;
   public ForConditionOpt f4;
   public NodeToken f5;
   public ForIteratorOpt f6;
   public NodeToken f7;
   public EmbeddedStatement f8;

   public ForStatement(NodeToken n0, NodeToken n1, ForInitializerOpt n2, NodeToken n3, ForConditionOpt n4, NodeToken n5, ForIteratorOpt n6, NodeToken n7, EmbeddedStatement n8) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
   }

   public ForStatement(ForInitializerOpt n0, ForConditionOpt n1, ForIteratorOpt n2, EmbeddedStatement n3) {
      f0 = new NodeToken("for");
      f1 = new NodeToken("(");
      f2 = n0;
      f3 = new NodeToken(";");
      f4 = n1;
      f5 = new NodeToken(";");
      f6 = n2;
      f7 = new NodeToken(")");
      f8 = n3;
   }

   public void accept(csmc.javacc.generated.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(csmc.javacc.generated.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(csmc.javacc.generated.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(csmc.javacc.generated.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}


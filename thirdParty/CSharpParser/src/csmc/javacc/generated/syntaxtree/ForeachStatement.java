//
// Generated by JTB 1.3.2
//

package csmc.javacc.generated.syntaxtree;

/**
 * Grammar production:
 * f0 -> <FOREACH>
 * f1 -> <LPAREN>
 * f2 -> LocalVariableType()
 * f3 -> Identifier()
 * f4 -> <IN>
 * f5 -> Expression()
 * f6 -> <RPAREN>
 * f7 -> EmbeddedStatement()
 */
public class ForeachStatement implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public LocalVariableType f2;
   public Identifier f3;
   public NodeToken f4;
   public Expression f5;
   public NodeToken f6;
   public EmbeddedStatement f7;

   public ForeachStatement(NodeToken n0, NodeToken n1, LocalVariableType n2, Identifier n3, NodeToken n4, Expression n5, NodeToken n6, EmbeddedStatement n7) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
   }

   public ForeachStatement(LocalVariableType n0, Identifier n1, Expression n2, EmbeddedStatement n3) {
      f0 = new NodeToken("foreach");
      f1 = new NodeToken("(");
      f2 = n0;
      f3 = n1;
      f4 = new NodeToken("in");
      f5 = n2;
      f6 = new NodeToken(")");
      f7 = n3;
   }

   public void accept(csmc.javacc.generated.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(csmc.javacc.generated.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(csmc.javacc.generated.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(csmc.javacc.generated.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}


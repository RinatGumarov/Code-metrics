//
// Generated by JTB 1.3.2
//

package csmc.javacc.generated.syntaxtree;

/**
 * Grammar production:
 * f0 -> ReturnType()
 * f1 -> Identifier()
 * f2 -> [ TypeParameterList() ]
 * f3 -> <LPAREN>
 * f4 -> FormalParameterListOpt()
 * f5 -> <RPAREN>
 * f6 -> TypeParameterConstraintsClauseList()
 * f7 -> <SEMICOLON>
 */
public class InterfaceMethodDeclaration implements Node {
   public ReturnType f0;
   public Identifier f1;
   public NodeOptional f2;
   public NodeToken f3;
   public FormalParameterListOpt f4;
   public NodeToken f5;
   public TypeParameterConstraintsClauseList f6;
   public NodeToken f7;

   public InterfaceMethodDeclaration(ReturnType n0, Identifier n1, NodeOptional n2, NodeToken n3, FormalParameterListOpt n4, NodeToken n5, TypeParameterConstraintsClauseList n6, NodeToken n7) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
   }

   public InterfaceMethodDeclaration(ReturnType n0, Identifier n1, NodeOptional n2, FormalParameterListOpt n3, TypeParameterConstraintsClauseList n4) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = new NodeToken("(");
      f4 = n3;
      f5 = new NodeToken(")");
      f6 = n4;
      f7 = new NodeToken(";");
   }

   public void accept(csmc.javacc.generated.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(csmc.javacc.generated.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(csmc.javacc.generated.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(csmc.javacc.generated.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}


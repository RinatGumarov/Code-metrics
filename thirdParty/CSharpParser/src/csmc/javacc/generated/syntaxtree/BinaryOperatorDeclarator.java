//
// Generated by JTB 1.3.2
//

package csmc.javacc.generated.syntaxtree;

/**
 * Grammar production:
 * f0 -> Type()
 * f1 -> <OPERATOR>
 * f2 -> OverloadableBinaryOperator()
 * f3 -> <LPAREN>
 * f4 -> Type()
 * f5 -> Identifier()
 * f6 -> <COMMA>
 * f7 -> Type()
 * f8 -> Identifier()
 * f9 -> <RPAREN>
 */
public class BinaryOperatorDeclarator implements Node {
   public Type f0;
   public NodeToken f1;
   public OverloadableBinaryOperator f2;
   public NodeToken f3;
   public Type f4;
   public Identifier f5;
   public NodeToken f6;
   public Type f7;
   public Identifier f8;
   public NodeToken f9;

   public BinaryOperatorDeclarator(Type n0, NodeToken n1, OverloadableBinaryOperator n2, NodeToken n3, Type n4, Identifier n5, NodeToken n6, Type n7, Identifier n8, NodeToken n9) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
   }

   public BinaryOperatorDeclarator(Type n0, OverloadableBinaryOperator n1, Type n2, Identifier n3, Type n4, Identifier n5) {
      f0 = n0;
      f1 = new NodeToken("operator");
      f2 = n1;
      f3 = new NodeToken("(");
      f4 = n2;
      f5 = n3;
      f6 = new NodeToken(",");
      f7 = n4;
      f8 = n5;
      f9 = new NodeToken(")");
   }

   public void accept(csmc.javacc.generated.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(csmc.javacc.generated.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(csmc.javacc.generated.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(csmc.javacc.generated.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}


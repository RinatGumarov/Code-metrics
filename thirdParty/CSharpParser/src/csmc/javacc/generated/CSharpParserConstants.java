/* Generated By:JavaCC: Do not edit this line. CSharpParserConstants.java */
package csmc.javacc.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CSharpParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int UNICODE_BOM = 7;
  /** RegularExpression Id. */
  int HASH = 8;
  /** RegularExpression Id. */
  int DEFINE = 9;
  /** RegularExpression Id. */
  int UNDEF = 10;
  /** RegularExpression Id. */
  int ABSTRACT = 11;
  /** RegularExpression Id. */
  int ADD = 12;
  /** RegularExpression Id. */
  int ALIAS = 13;
  /** RegularExpression Id. */
  int AS = 14;
  /** RegularExpression Id. */
  int ASYNC = 15;
  /** RegularExpression Id. */
  int ASCENDING = 16;
  /** RegularExpression Id. */
  int ASSEMBLY = 17;
  /** RegularExpression Id. */
  int AWAIT = 18;
  /** RegularExpression Id. */
  int BASE = 19;
  /** RegularExpression Id. */
  int BOOL = 20;
  /** RegularExpression Id. */
  int BREAK = 21;
  /** RegularExpression Id. */
  int BY = 22;
  /** RegularExpression Id. */
  int BYTE = 23;
  /** RegularExpression Id. */
  int CASE = 24;
  /** RegularExpression Id. */
  int CATCH = 25;
  /** RegularExpression Id. */
  int CHAR = 26;
  /** RegularExpression Id. */
  int CHECKED = 27;
  /** RegularExpression Id. */
  int CLASS = 28;
  /** RegularExpression Id. */
  int CONST = 29;
  /** RegularExpression Id. */
  int CONTINUE = 30;
  /** RegularExpression Id. */
  int DECIMAL = 31;
  /** RegularExpression Id. */
  int _DEFAULT = 32;
  /** RegularExpression Id. */
  int DELEGATE = 33;
  /** RegularExpression Id. */
  int DESCENDING = 34;
  /** RegularExpression Id. */
  int DO = 35;
  /** RegularExpression Id. */
  int DOUBLE = 36;
  /** RegularExpression Id. */
  int DYNAMIC = 37;
  /** RegularExpression Id. */
  int ELSE = 38;
  /** RegularExpression Id. */
  int ENUM = 39;
  /** RegularExpression Id. */
  int EQUALS = 40;
  /** RegularExpression Id. */
  int EVENT = 41;
  /** RegularExpression Id. */
  int EXPLICIT = 42;
  /** RegularExpression Id. */
  int EXTERN = 43;
  /** RegularExpression Id. */
  int FALSE = 44;
  /** RegularExpression Id. */
  int FIELD = 45;
  /** RegularExpression Id. */
  int FINALLY = 46;
  /** RegularExpression Id. */
  int FIXED = 47;
  /** RegularExpression Id. */
  int FLOAT = 48;
  /** RegularExpression Id. */
  int FOR = 49;
  /** RegularExpression Id. */
  int FOREACH = 50;
  /** RegularExpression Id. */
  int FROM = 51;
  /** RegularExpression Id. */
  int GET = 52;
  /** RegularExpression Id. */
  int GOTO = 53;
  /** RegularExpression Id. */
  int GROUP = 54;
  /** RegularExpression Id. */
  int IF = 55;
  /** RegularExpression Id. */
  int IMPLICIT = 56;
  /** RegularExpression Id. */
  int IN = 57;
  /** RegularExpression Id. */
  int INT = 58;
  /** RegularExpression Id. */
  int INTO = 59;
  /** RegularExpression Id. */
  int INTERFACE = 60;
  /** RegularExpression Id. */
  int INTERNAL = 61;
  /** RegularExpression Id. */
  int IS = 62;
  /** RegularExpression Id. */
  int JOIN = 63;
  /** RegularExpression Id. */
  int LET = 64;
  /** RegularExpression Id. */
  int LOCK = 65;
  /** RegularExpression Id. */
  int LONG = 66;
  /** RegularExpression Id. */
  int METHOD = 67;
  /** RegularExpression Id. */
  int MODULE = 68;
  /** RegularExpression Id. */
  int NAMEOF = 69;
  /** RegularExpression Id. */
  int NAMESPACE = 70;
  /** RegularExpression Id. */
  int NEW = 71;
  /** RegularExpression Id. */
  int NULL = 72;
  /** RegularExpression Id. */
  int OBJECT = 73;
  /** RegularExpression Id. */
  int ON = 74;
  /** RegularExpression Id. */
  int OPERATOR = 75;
  /** RegularExpression Id. */
  int ORDERBY = 76;
  /** RegularExpression Id. */
  int OUT = 77;
  /** RegularExpression Id. */
  int OVERRIDE = 78;
  /** RegularExpression Id. */
  int PARAM = 79;
  /** RegularExpression Id. */
  int PARAMS = 80;
  /** RegularExpression Id. */
  int PARTIAL = 81;
  /** RegularExpression Id. */
  int PRIVATE = 82;
  /** RegularExpression Id. */
  int PROPERTY = 83;
  /** RegularExpression Id. */
  int PROTECTED = 84;
  /** RegularExpression Id. */
  int PUBLIC = 85;
  /** RegularExpression Id. */
  int READONLY = 86;
  /** RegularExpression Id. */
  int REF = 87;
  /** RegularExpression Id. */
  int REMOVE = 88;
  /** RegularExpression Id. */
  int RETURN = 89;
  /** RegularExpression Id. */
  int SBYTE = 90;
  /** RegularExpression Id. */
  int SEALED = 91;
  /** RegularExpression Id. */
  int SELECT = 92;
  /** RegularExpression Id. */
  int SET = 93;
  /** RegularExpression Id. */
  int SHORT = 94;
  /** RegularExpression Id. */
  int SIZEOF = 95;
  /** RegularExpression Id. */
  int STACKALLOC = 96;
  /** RegularExpression Id. */
  int STATIC = 97;
  /** RegularExpression Id. */
  int STRING = 98;
  /** RegularExpression Id. */
  int STRUCT = 99;
  /** RegularExpression Id. */
  int SWITCH = 100;
  /** RegularExpression Id. */
  int THIS = 101;
  /** RegularExpression Id. */
  int THROW = 102;
  /** RegularExpression Id. */
  int TRUE = 103;
  /** RegularExpression Id. */
  int TRY = 104;
  /** RegularExpression Id. */
  int TYPE = 105;
  /** RegularExpression Id. */
  int TYPEOF = 106;
  /** RegularExpression Id. */
  int UINT = 107;
  /** RegularExpression Id. */
  int ULONG = 108;
  /** RegularExpression Id. */
  int UNCHECKED = 109;
  /** RegularExpression Id. */
  int UNSAFE = 110;
  /** RegularExpression Id. */
  int USHORT = 111;
  /** RegularExpression Id. */
  int USING = 112;
  /** RegularExpression Id. */
  int VAR = 113;
  /** RegularExpression Id. */
  int VIRTUAL = 114;
  /** RegularExpression Id. */
  int VOID = 115;
  /** RegularExpression Id. */
  int VOLATILE = 116;
  /** RegularExpression Id. */
  int WHEN = 117;
  /** RegularExpression Id. */
  int WHERE = 118;
  /** RegularExpression Id. */
  int WHILE = 119;
  /** RegularExpression Id. */
  int YIELD = 120;
  /** RegularExpression Id. */
  int AT = 121;
  /** RegularExpression Id. */
  int UNDERSCORE = 122;
  /** RegularExpression Id. */
  int LBRACE = 123;
  /** RegularExpression Id. */
  int RBRACE = 124;
  /** RegularExpression Id. */
  int LBRACKET = 125;
  /** RegularExpression Id. */
  int RBRACKET = 126;
  /** RegularExpression Id. */
  int LPAREN = 127;
  /** RegularExpression Id. */
  int RPAREN = 128;
  /** RegularExpression Id. */
  int DOT = 129;
  /** RegularExpression Id. */
  int COMMA = 130;
  /** RegularExpression Id. */
  int COLON = 131;
  /** RegularExpression Id. */
  int SEMICOLON = 132;
  /** RegularExpression Id. */
  int PLUS = 133;
  /** RegularExpression Id. */
  int MINUS = 134;
  /** RegularExpression Id. */
  int ASTERISK = 135;
  /** RegularExpression Id. */
  int SLASH = 136;
  /** RegularExpression Id. */
  int PERCENT = 137;
  /** RegularExpression Id. */
  int AMPERSAND = 138;
  /** RegularExpression Id. */
  int VERTICAL = 139;
  /** RegularExpression Id. */
  int CARET = 140;
  /** RegularExpression Id. */
  int EXCLAMATION = 141;
  /** RegularExpression Id. */
  int TILDE = 142;
  /** RegularExpression Id. */
  int EQUAL = 143;
  /** RegularExpression Id. */
  int LESS = 144;
  /** RegularExpression Id. */
  int QUESTION = 145;
  /** RegularExpression Id. */
  int DBL_QUESTION = 146;
  /** RegularExpression Id. */
  int DBL_COLON = 147;
  /** RegularExpression Id. */
  int DBL_PLUS = 148;
  /** RegularExpression Id. */
  int DBL_MINUS = 149;
  /** RegularExpression Id. */
  int DBL_AMPERSAND = 150;
  /** RegularExpression Id. */
  int DBL_VERTICAL = 151;
  /** RegularExpression Id. */
  int DBL_EQUAL = 152;
  /** RegularExpression Id. */
  int EXCL_EQUAL = 153;
  /** RegularExpression Id. */
  int LESS_EQUAL = 154;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 155;
  /** RegularExpression Id. */
  int PLUS_EQUAL = 156;
  /** RegularExpression Id. */
  int MINUS_EQUAL = 157;
  /** RegularExpression Id. */
  int ASTERISK_EQUAL = 158;
  /** RegularExpression Id. */
  int SLASH_EQUAL = 159;
  /** RegularExpression Id. */
  int PERCENT_EQUAL = 160;
  /** RegularExpression Id. */
  int AMPERSAND_EQUAL = 161;
  /** RegularExpression Id. */
  int VERTICAL_EQUAL = 162;
  /** RegularExpression Id. */
  int CARET_EQUAL = 163;
  /** RegularExpression Id. */
  int DBL_LESS = 164;
  /** RegularExpression Id. */
  int DBL_LESS_EQUAL = 165;
  /** RegularExpression Id. */
  int DBL_GREATER_EQUAL = 166;
  /** RegularExpression Id. */
  int EQUAL_GREATER = 167;
  /** RegularExpression Id. */
  int MINUS_GREATER = 168;
  /** RegularExpression Id. */
  int DBL_GREATER = 169;
  /** RegularExpression Id. */
  int GREATER = 170;
  /** RegularExpression Id. */
  int IDENTIFIER = 171;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 172;
  /** RegularExpression Id. */
  int REAL_LITERAL = 173;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 174;
  /** RegularExpression Id. */
  int STRING_LITERAL = 175;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<UNICODE_BOM>",
    "\"#\"",
    "\"define\"",
    "\"undef\"",
    "\"abstract\"",
    "\"add\"",
    "\"alias\"",
    "\"as\"",
    "\"async\"",
    "\"ascending\"",
    "\"assembly\"",
    "\"await\"",
    "\"base\"",
    "\"bool\"",
    "\"break\"",
    "\"by\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"checked\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"decimal\"",
    "\"default\"",
    "\"delegate\"",
    "\"descending\"",
    "\"do\"",
    "\"double\"",
    "\"dynamic\"",
    "\"else\"",
    "\"enum\"",
    "\"equals\"",
    "\"event\"",
    "\"explicit\"",
    "\"extern\"",
    "\"false\"",
    "\"field\"",
    "\"finally\"",
    "\"fixed\"",
    "\"float\"",
    "\"for\"",
    "\"foreach\"",
    "\"from\"",
    "\"get\"",
    "\"goto\"",
    "\"group\"",
    "\"if\"",
    "\"implicit\"",
    "\"in\"",
    "\"int\"",
    "\"into\"",
    "\"interface\"",
    "\"internal\"",
    "\"is\"",
    "\"join\"",
    "\"let\"",
    "\"lock\"",
    "\"long\"",
    "\"method\"",
    "\"module\"",
    "\"nameof\"",
    "\"namespace\"",
    "\"new\"",
    "\"null\"",
    "\"object\"",
    "\"on\"",
    "\"operator\"",
    "\"orderby\"",
    "\"out\"",
    "\"override\"",
    "\"param\"",
    "\"params\"",
    "\"partial\"",
    "\"private\"",
    "\"property\"",
    "\"protected\"",
    "\"public\"",
    "\"readonly\"",
    "\"ref\"",
    "\"remove\"",
    "\"return\"",
    "\"sbyte\"",
    "\"sealed\"",
    "\"select\"",
    "\"set\"",
    "\"short\"",
    "\"sizeof\"",
    "\"stackalloc\"",
    "\"static\"",
    "\"string\"",
    "\"struct\"",
    "\"switch\"",
    "\"this\"",
    "\"throw\"",
    "\"true\"",
    "\"try\"",
    "\"type\"",
    "\"typeof\"",
    "\"uint\"",
    "\"ulong\"",
    "\"unchecked\"",
    "\"unsafe\"",
    "\"ushort\"",
    "\"using\"",
    "\"var\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"when\"",
    "\"where\"",
    "\"while\"",
    "\"yield\"",
    "\"@\"",
    "\"_\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"!\"",
    "\"~\"",
    "\"=\"",
    "\"<\"",
    "\"?\"",
    "\"??\"",
    "\"::\"",
    "\"++\"",
    "\"--\"",
    "\"&&\"",
    "\"||\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<\"",
    "\"<<=\"",
    "\">>=\"",
    "\"=>\"",
    "\"->\"",
    "\">>\"",
    "\">\"",
    "<IDENTIFIER>",
    "<INTEGER_LITERAL>",
    "<REAL_LITERAL>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
  };

}

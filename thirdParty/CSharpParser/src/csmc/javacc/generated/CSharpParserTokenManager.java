/* CSharpParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CSharpParserTokenManager.java */
package csmc.javacc.generated;
import csmc.javacc.generated.syntaxtree.*;
import java.util.Vector;

/** Token Manager. */
@SuppressWarnings("unused")public class CSharpParserTokenManager implements CSharpParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active2 & 0x80000100L) != 0L)
            return 107;
         if ((active1 & 0x400000000000000L) != 0L)
            return 6;
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0x1ffffffffffffffL) != 0L)
         {
            jjmatchedKind = 171;
            return 6;
         }
         if ((active2 & 0x2L) != 0L)
            return 8;
         if ((active1 & 0x200000000000000L) != 0L)
            return 129;
         return -1;
      case 1:
         if ((active0 & 0x7e80001800c3c000L) != 0L || (active1 & 0x400L) != 0L)
            return 6;
         if ((active0 & 0x817fffe7ff3c3e00L) != 0L || (active1 & 0x1fffffffffffbffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 1;
            }
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0x3c16000000001000L) != 0L || (active1 & 0x2010020802081L) != 0L)
            return 6;
         if ((active0 & 0x8169fff7ffbfae00L) != 0L || (active1 & 0x1fdfeffdf7fdb7eL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 2;
            }
            return 6;
         }
         return -1;
      case 3:
         if ((active0 & 0x882800c005980000L) != 0L || (active1 & 0x280ea000000106L) != 0L)
            return 6;
         if ((active0 & 0x3145ff37fa27ae00L) != 0L || (active1 & 0x1d5f05fdf7fda78L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 3;
            }
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0x41b2003224a400L) != 0L || (active1 & 0x1c1104044018000L) != 0L)
            return 6;
         if ((active0 & 0x31044d37c8030a00L) != 0L || (active1 & 0x14e41f9b7e5a78L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 4;
            }
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x91000000200L) != 0L || (active1 & 0xc41e9b210238L) != 0L)
            return 6;
         if ((active0 & 0x31044427c8030800L) != 0L || (active1 & 0x142001005e5840L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 5;
            return 6;
         }
         return -1;
      case 6:
         if ((active0 & 0x4402188000000L) != 0L || (active1 & 0x4000000061000L) != 0L)
            return 6;
         if ((active0 & 0x3100040640030800L) != 0L || (active1 & 0x10200100584840L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 6;
            return 6;
         }
         return -1;
      case 7:
         if ((active0 & 0x2100040240020800L) != 0L || (active1 & 0x10000000484800L) != 0L)
            return 6;
         if ((active0 & 0x1000000400010000L) != 0L || (active1 & 0x200100100040L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 7;
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x1000000000010000L) != 0L || (active1 & 0x200000100040L) != 0L)
            return 6;
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 8;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 35:
         return jjStopAtPos(0, 8);
      case 37:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000L);
      case 38:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200400000L);
      case 40:
         return jjStopAtPos(0, 127);
      case 41:
         return jjStopAtPos(0, 128);
      case 42:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      case 43:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10100000L);
      case 44:
         return jjStopAtPos(0, 130);
      case 45:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10020200000L);
      case 46:
         return jjStartNfaWithStates_0(0, 129, 8);
      case 47:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000L);
      case 58:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000L);
      case 59:
         return jjStopAtPos(0, 132);
      case 60:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3004000000L);
      case 61:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8001000000L);
      case 62:
         jjmatchedKind = 170;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x24008000000L);
      case 63:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000L);
      case 64:
         return jjStartNfaWithStates_0(0, 121, 129);
      case 91:
         return jjStopAtPos(0, 125);
      case 93:
         return jjStopAtPos(0, 126);
      case 94:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000L);
      case 95:
         return jjStartNfaWithStates_0(0, 122, 6);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7f800L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xf80000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7f000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3f80000200L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xfc000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xff00000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x70000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7f80000000000000L, 0x0L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e00L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f8000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c00000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ffc000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x1f80000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0000000000000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 123);
      case 124:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400800000L);
      case 125:
         return jjStopAtPos(0, 124);
      case 126:
         return jjStopAtPos(0, 142);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 43:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         break;
      case 45:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         break;
      case 58:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         break;
      case 60:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 61:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         break;
      case 62:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 63:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100003080000L, active1, 0x2000000038060L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0x4000200L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000780000200L, active1, 0x3bc00089L, active2, 0L);
      case 102:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 6);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0xe0006040000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00000000000L, active1, 0x104080080000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004010002000L, active1, 0x100000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 74, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x3c00008000000400L, active1, 0x600000000000L, active2, 0L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8026001060100000L, active1, 0x18000000000016L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x48000000200000L, active1, 0x180001c1000L, active2, 0L);
      case 115:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x38000L, active1, 0x1800000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xf00000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x202100L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x4000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0x1000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000800000L, active1, 0x60000000000L, active2, 0L);
      case 124:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 165);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 166);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x14040000L, active1, 0x308400000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80010000L, active1, 0x200000000002L, active2, 0L);
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x1010L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x220008200000L, active1, 0x160000000004800L, active2, 0L);
      case 102:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000200L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000002000L, active1, 0x89003000040000L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200000000L, active1, 0x10000010000100L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000060L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x402060000000L, active1, 0x80000000004L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x49000000100000L, active1, 0x100040180000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100040000000000L, active1, 0x60000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x4004c00038000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x44010a0800L, active1, 0x400000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 6);
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 6);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 6);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x3820080002800000L, active1, 0x2000008L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x19000000000L, active1, 0x8000000000L, active2, 0L);
      case 119:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 6);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 104, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x4000000L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1412100202000L, active1, 0x10400000018000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40a000000L, active1, 0x100000000L);
      case 100:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 6);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 6);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 6);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 6);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 6);
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3004880200030400L, active1, 0x40090001260L);
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 6);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000008L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80040200L, active1, 0x400000000L);
      case 107:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 6);
         break;
      case 108:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 6);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x100240000000000L, active1, 0x180000008200000L);
      case 109:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 6);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 6);
         break;
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 6);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000008000L, active1, 0x1100000000000L);
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 6);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x804001000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000040004800L);
      case 115:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x100030000000L, active1, 0L);
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000800L, active1, 0x4001204120000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x802000010L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x40800L);
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1810000200L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 6);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 6);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 6);
         break;
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 6);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 6);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 6);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 119, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x200008180000L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000L);
      case 103:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 6);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100040040000000L, active1, 0x200220000L);
      case 107:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x411000000000L, active1, 0x10L);
      case 109:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2080020000L, active1, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10200L, active1, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40080400028L);
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 6);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000080000000800L, active1, 0x800002005000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 6);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 6);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 6);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 6);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 6);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x4000000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L);
      case 119:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000800L, active1, 0x4000100020000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0x1000L);
      case 99:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 6);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x104040000000000L, active1, 0x200000100000L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 6);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 6);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 6);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 6);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 6);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 102:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 6);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 6);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 6);
         break;
      case 104:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x10000000004000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400100000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 6);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000440000000L, active1, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 6);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 6);
         break;
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 6);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 6);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 6);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000000000000L, active1, 0x40L);
      case 99:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0x4000L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 6);
         break;
      case 104:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100040000010000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 6);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 6);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 114, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0x10000100400000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x180000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 6);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 76, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0x40L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 6);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 6);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 6);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 116, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000100000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L);
      case 114:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 6);
         break;
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 6);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 6);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 6);
         break;
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 6);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 6);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 84, 6);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 6);
         break;
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 6);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 70, 6);
         break;
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 6);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 96, 6);
         break;
      case 103:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x800000000000000L, 0x0L
};
static final long[] jjbitVec2 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xfffffcffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 129;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddStates(0, 11); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(12, 13); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(14, 16); }
                  else if (curChar == 39)
                     { jjAddStates(17, 18); }
                  else if (curChar == 46)
                     { jjCheckNAdd(8); }
                  if (curChar == 48)
                     { jjAddStates(19, 20); }
                  break;
               case 107:
                  if (curChar == 42)
                     { jjCheckNAddStates(21, 23); }
                  else if (curChar == 47)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAdd(108); }
                  }
                  break;
               case 129:
               case 89:
                  if (curChar == 34)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if (curChar == 46)
                     { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  { jjCheckNAddStates(27, 29); }
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 13:
                  if (curChar == 39)
                     { jjAddStates(17, 18); }
                  break;
               case 14:
                  if ((0xffffff7fffffdbfeL & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 15:
                  if (curChar == 39 && kind > 174)
                     kind = 174;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 20:
               case 23:
               case 27:
               case 31:
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(18); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 47:
                  if (curChar == 48)
                     { jjCheckNAdd(15); }
                  break;
               case 49:
                  if (curChar == 34)
                     { jjCheckNAdd(15); }
                  break;
               case 50:
                  if (curChar == 39)
                     { jjCheckNAdd(15); }
                  break;
               case 51:
               case 87:
                  if (curChar == 34)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 52:
                  if ((0xffffffffffffdbfeL & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 53:
                  if (curChar == 34 && kind > 175)
                     kind = 175;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 58:
               case 61:
               case 65:
               case 69:
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 85:
                  if (curChar == 48)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 88:
                  if (curChar == 39)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 90:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 91:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 93:
                  if (curChar == 48)
                     { jjAddStates(19, 20); }
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAddStates(30, 35); }
                  break;
               case 106:
                  if (curChar == 47)
                     { jjAddStates(12, 13); }
                  break;
               case 108:
                  if ((0xffffffffffffdbfeL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(108); }
                  break;
               case 109:
                  if (curChar == 42)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 110:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 111:
                  if (curChar != 47)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(21, 23); }
                  break;
               case 112:
                  if (curChar == 42)
                     { jjCheckNAddStates(36, 39); }
                  break;
               case 113:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(113, 110); }
                  break;
               case 114:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(114, 115); }
                  break;
               case 115:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAddStates(0, 11); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAddStates(40, 45); }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(118, 119); }
                  break;
               case 119:
                  if (curChar == 46)
                     { jjCheckNAdd(120); }
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  { jjCheckNAddStates(46, 48); }
                  break;
               case 122:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(123); }
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  { jjCheckNAddTwoStates(123, 12); }
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(124, 125); }
                  break;
               case 126:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(127); }
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  { jjCheckNAddTwoStates(127, 12); }
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(128, 12); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     { jjCheckNAdd(6); }
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 129:
               case 5:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  { jjCheckNAdd(6); }
                  break;
               case 1:
                  if (curChar == 70 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(49, 50); }
                  break;
               case 12:
                  if ((0x205000002050L & l) != 0L && kind > 173)
                     kind = 173;
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (curChar == 92)
                     { jjAddStates(51, 67); }
                  break;
               case 17:
                  if (curChar == 120)
                     { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 19:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
               case 23:
               case 27:
               case 31:
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(18); }
                  break;
               case 21:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if (curChar == 118)
                     { jjCheckNAdd(15); }
                  break;
               case 41:
                  if (curChar == 116)
                     { jjCheckNAdd(15); }
                  break;
               case 42:
                  if (curChar == 114)
                     { jjCheckNAdd(15); }
                  break;
               case 43:
                  if (curChar == 110)
                     { jjCheckNAdd(15); }
                  break;
               case 44:
                  if (curChar == 102)
                     { jjCheckNAdd(15); }
                  break;
               case 45:
                  if (curChar == 98)
                     { jjCheckNAdd(15); }
                  break;
               case 46:
                  if (curChar == 97)
                     { jjCheckNAdd(15); }
                  break;
               case 48:
                  if (curChar == 92)
                     { jjCheckNAdd(15); }
                  break;
               case 52:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 54:
                  if (curChar == 92)
                     { jjAddStates(68, 84); }
                  break;
               case 55:
                  if (curChar == 120)
                     { jjCheckNAdd(56); }
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 57:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
               case 61:
               case 65:
               case 69:
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 59:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 62:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 66:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 78:
                  if (curChar == 118)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 79:
                  if (curChar == 116)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 80:
                  if (curChar == 114)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 81:
                  if (curChar == 110)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 82:
                  if (curChar == 102)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 83:
                  if (curChar == 98)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 84:
                  if (curChar == 97)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 86:
                  if (curChar == 92)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 90:
                  { jjCheckNAddStates(24, 26); }
                  break;
               case 92:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 94:
                  if (curChar == 120)
                     { jjCheckNAdd(95); }
                  break;
               case 95:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAddStates(30, 35); }
                  break;
               case 96:
                  if ((0x20100000201000L & l) != 0L && kind > 172)
                     kind = 172;
                  break;
               case 97:
                  if (curChar == 85)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 98:
                  if (curChar == 76 && kind > 172)
                     kind = 172;
                  break;
               case 99:
                  if (curChar == 108 && kind > 172)
                     kind = 172;
                  break;
               case 100:
                  if (curChar == 117)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 101:
                  if (curChar == 76)
                     { jjCheckNAddTwoStates(102, 103); }
                  break;
               case 102:
                  if (curChar == 85 && kind > 172)
                     kind = 172;
                  break;
               case 103:
                  if (curChar == 117 && kind > 172)
                     kind = 172;
                  break;
               case 104:
                  if (curChar == 108)
                     { jjCheckNAddTwoStates(102, 103); }
                  break;
               case 105:
                  if (curChar == 88)
                     { jjCheckNAdd(95); }
                  break;
               case 108:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  { jjAddStates(21, 23); }
                  break;
               case 121:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(85, 86); }
                  break;
               case 125:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(87, 88); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 14:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 52:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 90:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 108:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(21, 23); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 129 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   117, 96, 118, 119, 124, 125, 128, 12, 97, 100, 101, 104, 107, 109, 52, 53, 
   54, 14, 16, 94, 105, 110, 111, 112, 90, 91, 53, 8, 9, 12, 95, 96, 
   97, 100, 101, 104, 113, 110, 114, 115, 117, 96, 97, 100, 101, 104, 120, 121, 
   12, 10, 11, 17, 19, 21, 24, 28, 32, 40, 41, 42, 43, 44, 45, 46, 
   47, 48, 49, 50, 55, 57, 59, 62, 66, 70, 78, 79, 80, 81, 82, 83, 
   84, 85, 86, 87, 88, 122, 123, 126, 127, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 254:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 239:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         if ((jjbitVec2[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec6[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\43", 
"\144\145\146\151\156\145", "\165\156\144\145\146", "\141\142\163\164\162\141\143\164", "\141\144\144", 
"\141\154\151\141\163", "\141\163", "\141\163\171\156\143", "\141\163\143\145\156\144\151\156\147", 
"\141\163\163\145\155\142\154\171", "\141\167\141\151\164", "\142\141\163\145", "\142\157\157\154", 
"\142\162\145\141\153", "\142\171", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\150\145\143\153\145\144", "\143\154\141\163\163", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\143\151\155\141\154", 
"\144\145\146\141\165\154\164", "\144\145\154\145\147\141\164\145", 
"\144\145\163\143\145\156\144\151\156\147", "\144\157", "\144\157\165\142\154\145", "\144\171\156\141\155\151\143", 
"\145\154\163\145", "\145\156\165\155", "\145\161\165\141\154\163", "\145\166\145\156\164", 
"\145\170\160\154\151\143\151\164", "\145\170\164\145\162\156", "\146\141\154\163\145", "\146\151\145\154\144", 
"\146\151\156\141\154\154\171", "\146\151\170\145\144", "\146\154\157\141\164", "\146\157\162", 
"\146\157\162\145\141\143\150", "\146\162\157\155", "\147\145\164", "\147\157\164\157", 
"\147\162\157\165\160", "\151\146", "\151\155\160\154\151\143\151\164", "\151\156", "\151\156\164", 
"\151\156\164\157", "\151\156\164\145\162\146\141\143\145", "\151\156\164\145\162\156\141\154", 
"\151\163", "\152\157\151\156", "\154\145\164", "\154\157\143\153", "\154\157\156\147", 
"\155\145\164\150\157\144", "\155\157\144\165\154\145", "\156\141\155\145\157\146", 
"\156\141\155\145\163\160\141\143\145", "\156\145\167", "\156\165\154\154", "\157\142\152\145\143\164", "\157\156", 
"\157\160\145\162\141\164\157\162", "\157\162\144\145\162\142\171", "\157\165\164", 
"\157\166\145\162\162\151\144\145", "\160\141\162\141\155", "\160\141\162\141\155\163", 
"\160\141\162\164\151\141\154", "\160\162\151\166\141\164\145", "\160\162\157\160\145\162\164\171", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\141\144\157\156\154\171", 
"\162\145\146", "\162\145\155\157\166\145", "\162\145\164\165\162\156", 
"\163\142\171\164\145", "\163\145\141\154\145\144", "\163\145\154\145\143\164", "\163\145\164", 
"\163\150\157\162\164", "\163\151\172\145\157\146", "\163\164\141\143\153\141\154\154\157\143", 
"\163\164\141\164\151\143", "\163\164\162\151\156\147", "\163\164\162\165\143\164", 
"\163\167\151\164\143\150", "\164\150\151\163", "\164\150\162\157\167", "\164\162\165\145", 
"\164\162\171", "\164\171\160\145", "\164\171\160\145\157\146", "\165\151\156\164", 
"\165\154\157\156\147", "\165\156\143\150\145\143\153\145\144", "\165\156\163\141\146\145", 
"\165\163\150\157\162\164", "\165\163\151\156\147", "\166\141\162", "\166\151\162\164\165\141\154", 
"\166\157\151\144", "\166\157\154\141\164\151\154\145", "\167\150\145\156", 
"\167\150\145\162\145", "\167\150\151\154\145", "\171\151\145\154\144", "\100", "\137", "\173", 
"\175", "\133", "\135", "\50", "\51", "\56", "\54", "\72", "\73", "\53", "\55", "\52", 
"\57", "\45", "\46", "\174", "\136", "\41", "\176", "\75", "\74", "\77", "\77\77", 
"\72\72", "\53\53", "\55\55", "\46\46", "\174\174", "\75\75", "\41\75", "\74\75", 
"\76\75", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\46\75", "\174\75", 
"\136\75", "\74\74", "\74\74\75", "\76\76\75", "\75\76", "\55\76", "\76\76", "\76", null, 
null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 169 :
        image.append(jjstrLiteralImages[169]);
        lengthOfMatch = jjstrLiteralImages[169].length();
         matchedToken.kind = GREATER;
         input_stream.backup(1);
         matchedToken.image = ">";
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CSharpParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CSharpParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 129; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0xffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x60L, 0x0L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[129];
    private final int[] jjstateSet = new int[2 * 129];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}

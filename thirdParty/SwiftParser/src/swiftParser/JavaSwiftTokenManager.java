package swiftParser;/* swiftParser.JavaSwiftTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. swiftParser.JavaSwiftTokenManager.java */

/** swiftParser.Token Manager. */
@SuppressWarnings("unused")public class JavaSwiftTokenManager implements JavaSwiftConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active2 & 0x80000000L) != 0L)
            return 0;
         if ((active0 & 0x100400000000000L) != 0L || (active1 & 0x80501200000000L) != 0L || (active2 & 0x80800L) != 0L)
         {
            jjmatchedKind = 7;
            return 37;
         }
         if ((active0 & 0x60000000000002L) != 0L || (active1 & 0x60L) != 0L)
            return 42;
         if ((active0 & 0x6000000000000L) != 0L)
         {
            jjmatchedKind = 6;
            return -1;
         }
         if ((active2 & 0x100000000L) != 0L)
            return 24;
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x204020000080000L) != 0L || (active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 7;
            return 20;
         }
         if ((active0 & 0x7a99927828000000L) != 0L || (active1 & 0xfd7ba4ede1f7de9bL) != 0L || (active2 & 0xf3f7ffL) != 0L)
         {
            jjmatchedKind = 7;
            return -1;
         }
         if ((active0 & 0xa800L) != 0L)
         {
            jjmatchedKind = 10;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x7a99927838000000L) != 0L || (active1 & 0xff7ff6ffe1ffde9bL) != 0L || (active2 & 0xf7f7ffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 41;
         if ((active0 & 0x100400000000000L) != 0L || (active1 & 0x80000000000000L) != 0L || (active2 & 0x80800L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 36;
         }
         if ((active0 & 0xa800L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x7b99d27838000000L) != 0L || (active1 & 0xfffff6ffc17fde8bL) != 0L || (active2 & 0xffffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x6000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x7b89c27018000000L) != 0L || (active1 & 0xffe7f6bdc17fde8bL) != 0L || (active2 & 0xffffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x5209c25010000000L) != 0L || (active1 & 0xffe2f6a5817f9c83L) != 0L || (active2 & 0xdfeebfL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x5001820000000000L) != 0L || (active1 & 0xfde2f02400599403L) != 0L || (active2 & 0xdfe63fL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1001020000000000L) != 0L || (active1 & 0xb4a2b00400091003L) != 0L || (active2 & 0xcee63fL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1020000000000L) != 0L || (active1 & 0x3482b00000081000L) != 0L || (active2 & 0xcce23fL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x3400b00000080000L) != 0L || (active2 & 0x84023eL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x400300000080000L) != 0L || (active2 & 0x840236L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x400300000080000L) != 0L || (active2 & 0x840222L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x400300000000000L) != 0L || (active2 & 0x22L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active1 & 0x400300000000000L) != 0L || (active2 & 0x22L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active1 & 0x400300000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0x300000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active1 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active1 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active1 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active1 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active1 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active1 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active1 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active1 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 32:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x60000000000000L, 0x60L, 0x0L);
      case 33:
         return jjStopAtPos(0, 158);
      case 34:
         return jjStopAtPos(0, 171);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x80000187c0000000L, 0x9001e000004L, 0x0L);
      case 36:
         return jjStopAtPos(0, 161);
      case 37:
         return jjStopAtPos(0, 23);
      case 38:
         jjmatchedKind = 162;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000L);
      case 40:
         return jjStopAtPos(0, 172);
      case 41:
         return jjStopAtPos(0, 173);
      case 42:
         return jjStopAtPos(0, 22);
      case 43:
         return jjStopAtPos(0, 17);
      case 44:
         return jjStopAtPos(0, 154);
      case 45:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 152;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 159, 0);
      case 48:
         return jjMoveStringLiteralDfa1_0(0xa800L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 155);
      case 60:
         jjmatchedKind = 175;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 157);
      case 64:
         return jjStopAtPos(0, 166);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 169);
      case 92:
         return jjStartNfaWithStates_0(0, 160, 24);
      case 93:
         return jjStopAtPos(0, 170);
      case 95:
         return jjStopAtPos(0, 8);
      case 96:
         return jjStopAtPos(0, 174);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x104000000000L, 0x40000c040000000L, 0x30L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x800L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x1001200L, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x840000000c10000L, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1001000000004000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x204020000080000L, 0x40000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x8000000040001L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100400000000000L, 0x80501200000000L, 0x80800L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x1048L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200100000000L, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x800100L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000010L, 0x206001L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc002000000000000L, 0x120002L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1020800000000L, 0x100400L, 0x8080L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2280000000000000L, 0x2110000080008002L, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10800008000000L, 0x800800200008L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x5000000000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x20000400020080L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 167);
      case 124:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000L);
      case 125:
         return jjStopAtPos(0, 168);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 51:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 56:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 61:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 62:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100200000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020000010000000L, active1, 0x280501080200L, active2, 0x1000L);
      case 98:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x500000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x881020800000000L, active1, 0x81800001c510403L, active2, 0x8040L);
      case 102:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         return jjMoveStringLiteralDfa2_0(active0, 0x8240000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x220080L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40010020000000L, active1, 0x260060002000000L, active2, 0x40084L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8006080000000L, active1, 0x4020L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x5100500000000000L, active1, 0x81000000000000L, active2, 0x80800L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000001000L, active2, 0x800308L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x202001L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x14001008000000L, active1, 0x400200c040000800L, active2, 0x20002L);
      case 115:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x400010000000000L, active2, 0x30L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000000L, active2, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x2004000000040000L, active2, 0x500000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000040L, active2, 0x4000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80008000L, active2, 0L);
      case 120:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x800000000008L, active2, 0x400L);
      case 124:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 153);
         break;
      case 54:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 56:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 83:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x808000000000000L, active1, 0x40040L, active2, 0x10000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200140000000L, active2, 0L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc0000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000001000000000L, active1, 0x4000000000020824L, active2, 0x204003L);
      case 102:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 89);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x410000L, active2, 0x840L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x84L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000080c0000000L, active1, 0x800000080008080L, active2, 0x20000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000010000000L, active1, 0x2002000c080000L, active2, 0x40000L);
      case 109:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x8000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x204040010001000L, active2, 0x800700L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004400500000000L, active1, 0x2010000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x202004000000000L, active1, 0xc00000000408L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x100000000200000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4060020000000000L, active1, 0x8400000000004200L, active2, 0x30L);
      case 116:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x1000000401100003L, active2, 0x482000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2208000000L, active1, 0x1000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 44);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 52);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(3, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 54);
         break;
      case 54:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 100);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200100000000L, active2, 0L);
      case 83:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 99);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000010000000000L, active1, 0x200080000010800L, active2, 0x400400L);
      case 99:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(3, 114);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x401000000L, active2, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(3, 27);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 37);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 61);
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(3, 73);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(3, 78);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(3, 136);
         return jjMoveStringLiteralDfa4_0(active0, 0x200001000000000L, active1, 0x1000860000400400L, active2, 0xc0008L);
      case 102:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000080000000L, active2, 0L);
      case 104:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 94);
         return jjMoveStringLiteralDfa4_0(active0, 0x1004000000000L, active1, 0L, active2, 0x84L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000000L, active2, 0x2810L);
      case 107:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(3, 59);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000008540000000L, active1, 0x20000000080080L, active2, 0x100000L);
      case 109:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 112);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800000L);
      case 110:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(3, 149);
         return jjMoveStringLiteralDfa4_0(active0, 0x280000000L, active1, 0x800000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x820000000000L, active1, 0x400400000200000L, active2, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60040L, active2, 0x4001L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000010000000L, active1, 0x200000000c000000L, active2, 0L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(3, 56);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(3, 134);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x8002000000009023L, active2, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x100010000100000L, active2, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20200L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(3, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(4, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(4, 70);
         break;
      case 52:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(4, 103);
         break;
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 58:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(4, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 106);
         break;
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 83:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20200000000000L, active2, 0L);
      case 97:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000400L, active2, 0x20001L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x2500000000008000L, active2, 0x20L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(4, 82);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 28);
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 31);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(4, 71);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(4, 81);
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000008000000000L, active1, 0x40000004000003L, active2, 0x206L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L, active2, 0x10L);
      case 104:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 88);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4800080010001000L, active2, 0x118000L);
      case 107:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(4, 75);
         break;
      case 108:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(4, 121);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x1000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000400000000L, active1, 0x2000000000000L, active2, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L, active2, 0x40000L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(4, 57);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0x80410000500000L, active2, 0x84008L);
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(4, 51);
         break;
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 46);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 95);
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(4, 135);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L, active2, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20100000000L, active1, 0x10000L, active2, 0x800000L);
      case 119:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(4, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(5, 86);
         break;
      case 52:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 101);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 99:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(5, 144);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(5, 148);
         return jjMoveStringLiteralDfa6_0(active0, 0x8004000000000000L, active1, 0x2010000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(5, 62);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000010000000000L, active1, 0xa0000000000000L, active2, 0L);
      case 102:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 92);
         break;
      case 104:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(5, 79);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8400000004000000L, active2, 0x404420L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x880000010000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(5, 84);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L, active2, 0x82210L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x20400000000L, active1, 0x2000000000000003L, active2, 0x48004L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(5, 47);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(5, 74);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(5, 110);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(5, 118);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 120);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(5, 123);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L, active2, 0x820001L);
      case 120:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(5, 126);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(6, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(6, 65);
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x10400000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(6, 98);
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400080000000000L, active2, 0x882020L);
      case 99:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(6, 138);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0x80000000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(6, 60);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 101:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(6, 145);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L, active2, 0x8002L);
      case 102:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 90);
         break;
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8200000000L, active1, 0x3000800000000000L, active2, 0x40200L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0x2000000000000L, active2, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 116:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(6, 80);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(6, 117);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x4L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(6, 127);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000L, active2, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 100:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(7, 143);
         break;
      case 101:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(7, 76);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(7, 142);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L, active2, 0x210L);
      case 103:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(7, 150);
         break;
      case 104:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(7, 66);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10400000000L, active1, 0x100000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(7, 50);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(7, 113);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(7, 141);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(7, 147);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000200000000L, active1, 0x1000000000080000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000200000000000L, active2, 0L);
      case 114:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(7, 128);
         break;
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(7, 48);
         break;
      case 116:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(7, 119);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0x400000000000000L, active2, 0x800020L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40004L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000L, active2, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0x400000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800020L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x280000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(8, 33);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(8, 124);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(8, 131);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x210L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(8, 63);
         break;
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(8, 111);
         break;
      case 116:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(8, 125);
         return jjMoveStringLiteralDfa9_0(active0, 0x10400000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L, active1, 0x100000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000L, active2, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(9, 107);
         return jjMoveStringLiteralDfa10_0(active0, 0x10400000000L, active1, 0L, active2, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 110:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(9, 130);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(9, 132);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L, active1, 0x10000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 101:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(10, 137);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(10, 146);
         break;
      case 103:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(10, 151);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(10, 83);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x10400000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400100000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x10400000000L, active1, 0x200000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(11, 41);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(11, 39);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000000L, active2, 0x20L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(12, 34);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(12, 40);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000000L, active2, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 121:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(12, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(13, 122);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active1, 0x200000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0x100000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0x10000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_0(active1, 0x100000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(14, 104);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x200000000000L, active2, 0L);
      case 112:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(14, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa16_0(active1, 0x200000000000L);
      case 120:
         return jjMoveStringLiteralDfa16_0(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa17_0(active1, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa18_0(active1, 0x100000000000L);
      case 120:
         return jjMoveStringLiteralDfa18_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa19_0(active1, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa20_0(active1, 0x200000000000L);
      case 115:
         return jjMoveStringLiteralDfa20_0(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa21_0(active1, 0x100000000000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa22_0(active1, 0x100000000000L);
      case 115:
         return jjMoveStringLiteralDfa22_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa23_0(active1, 0x200000000000L);
      case 110:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(22, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa24_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(24, 109);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0xf6c00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x8034afe00000000L, 0x80000000800000L
};
static final long[] jjbitVec4 = {
   0x7fff00ff00c00000L, 0x7feffffeL, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xffffffffffff0000L, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0x3fffffffffffffL, 0xfffffffffff00000L, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x1ffffffffff0eL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x40000000000000L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec12 = {
   0xffffffffffffffffL, 0xffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x0L, 0xffffffffffffffffL
};
static final long[] jjbitVec14 = {
   0x0L, 0x0L, 0x0L, 0xffffffffffff0000L
};
static final long[] jjbitVec15 = {
   0xffff0000ffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 53;
                  if (curChar == 58)
                  {
                     if (kind > 156)
                        kind = 156;
                  }
                  break;
               case 24:
                  if (curChar == 39)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if (curChar == 32)
                     { jjAddStates(0, 6); }
                  else if (curChar == 58)
                  {
                     if (kind > 156)
                        kind = 156;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  break;
               case 0:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                     kind = 5;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 7:
                  if ((0x3000000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if (curChar == 32 && kind > 42)
                     kind = 42;
                  break;
               case 18:
                  if (curChar == 32 && kind > 72)
                     kind = 72;
                  break;
               case 22:
                  if (curChar == 58 && kind > 156)
                     kind = 156;
                  break;
               case 29:
                  if (curChar == 34 && kind > 9)
                     kind = 9;
                  break;
               case 30:
                  if (curChar == 39 && kind > 9)
                     kind = 9;
                  break;
               case 33:
                  if ((0x1fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 32 && kind > 58)
                     kind = 58;
                  break;
               case 38:
                  if (curChar == 32 && kind > 77)
                     kind = 77;
                  break;
               case 40:
                  if (curChar == 32)
                     { jjAddStates(0, 6); }
                  break;
               case 52:
                  if (curChar == 58 && kind > 156)
                     kind = 156;
                  break;
               case 53:
                  if (curChar == 32 && kind > 156)
                     kind = 156;
                  break;
               case 54:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 46;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 43;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 37:
                  if (curChar == 102)
                     { jjCheckNAdd(38); }
                  else if (curChar == 110)
                     { jjCheckNAdd(36); }
                  break;
               case 24:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 114)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 110)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 116)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 92)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  break;
               case 3:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x4000000040000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if (curChar == 92)
                     { jjAddStates(7, 14); }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  else if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 105)
                     { jjAddStates(15, 16); }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 41:
                  if (curChar == 102)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  else if (curChar == 110)
                     { jjCheckNAdd(36); }
                  if (curChar == 102)
                     { jjCheckNAdd(38); }
                  else if (curChar == 110)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  break;
               case 1:
                  { jjAddStates(17, 18); }
                  break;
               case 4:
                  if ((0x7fffffeL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 5:
                  if ((0x7fffffe00000000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if ((0x7e0000007eL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 11:
                  if ((0x1000000010000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 12:
                  if ((0x4000000040000000L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 19:
               case 45:
                  if (curChar == 114)
                     { jjCheckNAdd(18); }
                  break;
               case 20:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 92)
                     { jjAddStates(7, 14); }
                  break;
               case 25:
                  if (curChar == 92 && kind > 9)
                     kind = 9;
                  break;
               case 26:
                  if (curChar == 116 && kind > 9)
                     kind = 9;
                  break;
               case 27:
                  if (curChar == 110 && kind > 9)
                     kind = 9;
                  break;
               case 28:
                  if (curChar == 114 && kind > 9)
                     kind = 9;
                  break;
               case 31:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 34:
                  if (curChar == 93 && kind > 9)
                     kind = 9;
                  break;
               case 35:
                  if (curChar == 105)
                     { jjAddStates(15, 16); }
                  break;
               case 39:
                  if (curChar == 102)
                     { jjCheckNAdd(38); }
                  break;
               case 43:
                  if (curChar == 110)
                     { jjCheckNAdd(36); }
                  break;
               case 44:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 102)
                     { jjCheckNAdd(38); }
                  break;
               case 49:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 102 && kind > 77)
                     kind = 77;
                  break;
               case 51:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(13); }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(13); }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(13); }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(17, 18); }
                  break;
               case 12:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 42)
                     kind = 42;
                  break;
               case 14:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(13); }
                  break;
               case 15:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(13); }
                  break;
               case 16:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(13); }
                  break;
               case 17:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 43)
                     kind = 43;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   42, 44, 47, 49, 51, 52, 54, 24, 25, 26, 27, 28, 29, 30, 31, 37, 
   39, 1, 2, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec15[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** swiftParser.Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\137", null, null, "\60\142", 
null, "\60\157", null, "\60\170", null, "\53", "\55", "\75", null, null, "\52", 
"\45", "\76\75", "\74\75", "\75\75", "\164\162\165\145", "\146\141\154\163\145", 
"\156\151\154", "\43\146\151\154\145", "\43\154\151\156\145", "\43\143\157\154\165\155\156", 
"\43\146\165\156\143\164\151\157\156", "\43\143\157\154\157\162\114\151\164\145\162\141\154", "\162\145\144", 
"\147\162\145\145\156", "\142\154\165\145", "\141\154\160\150\141", 
"\43\146\151\154\145\114\151\164\145\162\141\154", "\43\151\155\141\147\145\114\151\164\145\162\141\154", 
"\162\145\163\157\165\162\143\145\116\141\155\145", null, null, "\141\156\171", "\55\76", "\151\156\157\165\164", 
"\164\150\162\157\167\163", "\162\145\164\150\162\157\167\163", "\124\171\160\145", 
"\120\162\157\164\157\143\157\154", "\143\154\141\163\163", "\164\162\171", "\40\141\163\40", "\40\151\163\40", 
"\163\145\154\146", "\151\156\151\164", "\163\165\160\145\162", null, "\167\145\141\153", 
"\165\156\157\167\156\145\144", "\163\141\146\145", "\165\156\163\141\146\145", 
"\43\163\145\154\145\143\164\157\162", "\147\145\164\164\145\162\72", "\163\145\164\164\145\162\72", 
"\43\153\145\171\120\141\164\150", "\164\171\160\145", "\157\146", "\40\154\145\164\40", "\40\166\141\162\40", 
"\167\150\151\154\145", null, "\143\141\163\145", "\162\145\160\145\141\164", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", null, "\145\154\163\145", "\163\167\151\164\143\150", 
"\144\145\146\141\165\154\164", "\167\150\145\162\145", "\147\165\141\162\144", 
"\146\141\154\154\164\150\162\157\165\147\150", "\162\145\164\165\162\156", "\164\150\162\157\167", "\144\145\146\145\162\40", 
"\144\157", "\143\141\164\143\150", "\43\151\146", "\43\145\154\163\145\151\146", 
"\43\145\154\163\145", "\43\145\156\144\151\146", "\157\163", "\141\162\143\150", 
"\163\167\151\146\164", "\155\141\143\117\123", "\151\117\123", "\167\141\164\143\150\117\123", 
"\164\166\117\123", "\151\63\70\66", "\170\70\66\137\66\64", "\141\162\155", "\141\162\155\66\64", 
"\43\163\157\165\162\143\145\114\157\143\141\164\151\157\156", "\146\151\154\145\72", "\154\151\156\145\72", 
"\43\141\166\141\151\154\141\142\154\145", 
"\151\117\123\101\160\160\154\151\143\141\164\151\157\156\105\170\164\145\156\163\151\157\156", 
"\155\141\143\117\123\101\160\160\154\151\143\141\164\151\157\156\105\170\164\145\156\163\151\157\156", "\151\155\160\157\162\164", "\164\171\160\145\141\154\151\141\163", 
"\145\156\165\155", "\160\162\157\164\157\143\157\154", "\146\165\156\143", "\147\145\164", 
"\163\145\164", "\167\151\154\154\123\145\164", "\144\151\144\123\145\164", 
"\151\156\144\151\162\145\143\164", "\163\164\162\165\143\164", "\146\151\156\141\154", 
"\141\163\163\157\143\151\141\164\145\144\164\171\160\145", "\144\145\151\156\151\164", "\145\170\164\145\156\163\151\157\156", 
"\163\165\142\163\143\162\151\160\164", "\160\162\145\146\151\170", "\160\157\163\164\146\151\170", 
"\157\160\145\162\141\164\157\162", "\160\162\145\143\145\144\145\156\143\145\147\162\157\165\160", 
"\150\151\147\150\145\162\124\150\141\156", "\154\157\167\145\162\124\150\141\156", 
"\141\163\163\151\147\156\155\145\156\164", "\141\163\163\157\143\151\141\164\151\166\151\164\171", "\154\145\146\164", 
"\162\151\147\150\164", "\156\157\156\145", "\143\157\156\166\145\156\151\145\156\143\145", 
"\144\171\156\141\155\151\143", "\151\156\146\151\170", "\154\141\172\171", 
"\157\160\164\151\157\156\141\154", "\157\166\145\162\162\151\144\145", "\162\145\161\165\151\162\145\144", 
"\163\164\141\164\151\143", "\160\162\151\166\141\164\145", 
"\146\151\154\145\160\162\151\166\141\164\145", "\151\156\164\145\162\156\141\154", "\160\165\142\154\151\143", 
"\157\160\145\156", "\155\165\164\141\164\151\156\147", 
"\156\157\156\155\165\164\141\164\151\156\147", "\56", "\56\56\56", "\54", "\73", null, "\77", "\41", "\57", "\134", "\44", 
"\46", "\46\46", "\174", "\174\174", "\100", "\173", "\175", "\133", "\135", "\42", 
"\50", "\51", "\140", "\74", "\76", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next swiftParser.Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public JavaSwiftTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public JavaSwiftTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0x1ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[55];
    private final int[] jjstateSet = new int[2 * 55];

    
    protected char curChar;
}

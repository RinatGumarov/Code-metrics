/* PerlParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. PerlParserTokenManager.java */
package perl;

/** Token Manager. */
@SuppressWarnings("unused")public class PerlParserTokenManager implements PerlParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active2 & 0x1100L) != 0L)
            return 3;
         if ((active2 & 0x200002L) != 0L)
            return 356;
         if ((active0 & 0x20000000000L) != 0L)
            return 32;
         if ((active0 & 0x1f000000000L) != 0L)
            return 325;
         if ((active2 & 0x40000L) != 0L)
            return 106;
         if ((active0 & 0x1800080000000L) != 0L)
            return 98;
         if ((active0 & 0x40L) != 0L)
            return 113;
         if ((active0 & 0xff00000000000000L) != 0L || (active1 & 0x8080000001fL) != 0L || (active2 & 0xa000L) != 0L)
            return 180;
         if ((active1 & 0x400000000000000L) != 0L || (active2 & 0x40L) != 0L)
            return 110;
         if ((active0 & 0xfe7c0f7ffffe00L) != 0L || (active1 & 0x8014000000000000L) != 0L || (active2 & 0x4200L) != 0L)
         {
            jjmatchedKind = 84;
            return 98;
         }
         if ((active2 & 0x20000L) != 0L)
            return 100;
         return -1;
      case 1:
         if ((active0 & 0x100000000000000L) != 0L)
            return 179;
         if ((active0 & 0x4000000000000000L) != 0L)
            return 201;
         if ((active0 & 0x2000000000L) != 0L)
            return 304;
         if ((active1 & 0x4L) != 0L)
            return 212;
         if ((active2 & 0x2L) != 0L)
            return 356;
         if ((active1 & 0xaL) != 0L)
            return 210;
         if ((active0 & 0xfe7a0821dbfe00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 1;
            }
            return 98;
         }
         if ((active0 & 0x1e00000000000000L) != 0L)
            return 183;
         if ((active0 & 0x105c75e240000L) != 0L)
            return 98;
         if ((active0 & 0x2000000000000000L) != 0L)
            return 198;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 205;
         return -1;
      case 2:
         if ((active0 & 0x4000000000000000L) != 0L)
            return 200;
         if ((active0 & 0x100000000000000L) != 0L)
            return 117;
         if ((active0 & 0xfe3808201b3e00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 2;
            }
            return 98;
         }
         if ((active1 & 0x1L) != 0L)
            return 207;
         if ((active1 & 0x4L) != 0L)
            return 144;
         if ((active0 & 0x1e00000000000000L) != 0L)
            return 182;
         if ((active0 & 0x420001c0c000L) != 0L)
            return 98;
         if ((active1 & 0xaL) != 0L)
            return 218;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 204;
         if ((active0 & 0x2000000000000000L) != 0L)
            return 197;
         return -1;
      case 3:
         if ((active0 & 0x1e00000000000000L) != 0L)
            return 181;
         if ((active0 & 0x4000000000000000L) != 0L)
            return 148;
         if ((active0 & 0xbc380801113e00L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
            return 98;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x6L) != 0L)
            return 357;
         if ((active0 & 0x2000000000000000L) != 0L)
            return 144;
         if ((active1 & 0x1L) != 0L)
            return 157;
         if ((active0 & 0x420000200a0000L) != 0L)
            return 98;
         if ((active1 & 0x8L) != 0L)
            return 217;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 203;
         return -1;
      case 4:
         if ((active0 & 0x1e00000000000000L) != 0L)
            return 358;
         if ((active0 & 0x6000000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 357;
         if ((active0 & 0x18080801013e00L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
            return 98;
         }
         if ((active1 & 0x8L) != 0L)
            return 216;
         if ((active0 & 0xa4300000100000L) != 0L)
            return 98;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 152;
         return -1;
      case 5:
         if ((active1 & 0x8L) != 0L)
            return 215;
         if ((active0 & 0x9e00000000000000L) != 0L)
            return 357;
         if ((active0 & 0x8080000000000L) != 0L)
            return 98;
         if ((active0 & 0x10000801013e00L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
            return 98;
         }
         return -1;
      case 6:
         if ((active0 & 0x13a00L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
            return 98;
         }
         if ((active1 & 0x8L) != 0L)
            return 214;
         if ((active0 & 0x10000801000400L) != 0L)
            return 98;
         return -1;
      case 7:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 7;
            return 98;
         }
         if ((active1 & 0x8L) != 0L)
            return 165;
         if ((active0 & 0x11a00L) != 0L)
            return 98;
         return -1;
      case 8:
         if ((active1 & 0x8L) != 0L)
            return 357;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
            return 98;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 9;
            return 98;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x10000L);
      case 35:
         return jjStartNfaWithStates_0(0, 6, 113);
      case 36:
         return jjStartNfaWithStates_0(0, 145, 100);
      case 37:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40L);
      case 38:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L, 0x4L);
      case 40:
         return jjStopAtPos(0, 91);
      case 41:
         return jjStopAtPos(0, 92);
      case 42:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x81L);
      case 43:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4002000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 98);
      case 45:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8004000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100L);
      case 47:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 58:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      case 59:
         return jjStopAtPos(0, 97);
      case 60:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800104000000000L, 0x400L);
      case 61:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0xff00000000000000L, 0x8000000001fL, 0xa000L);
      case 62:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000200000000000L, 0x800L);
      case 63:
         return jjStopAtPos(0, 105);
      case 64:
         return jjStartNfaWithStates_0(0, 146, 106);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 95);
      case 92:
         return jjStopAtPos(0, 147);
      case 93:
         return jjStopAtPos(0, 96);
      case 94:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x3e00L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000000040000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40000000780000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000006000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000070000000L, 0x0L, 0x0L);
      case 109:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x300000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x0L);
      case 113:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x1e000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2200000000000L, 0x0L, 0x0L);
      case 120:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x200L);
      case 121:
         return jjStartNfaWithStates_0(0, 47, 98);
      case 123:
         return jjStopAtPos(0, 93);
      case 124:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x8L);
      case 125:
         return jjStopAtPos(0, 94);
      case 126:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 42:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 43:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         break;
      case 45:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         break;
      case 58:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 60:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 61:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 129, 356);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 62:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x3e00L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x1L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 98);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 98);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 98);
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000000L, active1, 0xaL, active2, 0L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 98);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e02200000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4004000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000004000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 98);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 98);
         return jjMoveStringLiteralDfa2_0(active0, 0x2080400021810000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 113:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 98);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 304);
         break;
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 98);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 98);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 98);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 98);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 98);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 98);
         break;
      case 120:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 98);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 98);
         break;
      case 124:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 126:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(2, 135);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(2, 138);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(2, 139);
         break;
      case 62:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 102);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(2, 125);
         break;
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x1L, active2, 0L);
      case 98:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 98);
         break;
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000820000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 98);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x9e02000000000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0xaL, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x4L, active2, 0L);
      case 112:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 98);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 98);
         break;
      case 114:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 98);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008100000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200L, active1, 0L);
      case 69:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 98);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000001800L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1e90000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x9L);
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 357);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 357);
         break;
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 98);
         return jjMoveStringLiteralDfa4_0(active0, 0x6004080001000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000100000L, active1, 0L);
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 98);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 108:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 98);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 98);
         break;
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 357);
         break;
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(3, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L);
      case 78:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 98);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x801000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1e00000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 98);
         break;
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 98);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000010000L, active1, 0L);
      case 107:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 357);
         break;
      case 108:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 98);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 98);
         break;
      case 109:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 357);
         break;
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 98);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 357);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 357);
         break;
      case 50:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 357);
         break;
      case 51:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 357);
         break;
      case 52:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 357);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 98);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 357);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 98);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      case 95:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 98);
         return jjMoveStringLiteralDfa7_0(active0, 0x1a00L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 98);
         break;
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 98);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 98);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0L);
      case 95:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 98);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 98);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 98);
         break;
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 98);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L, active1, 0L);
      case 103:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 357);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 13, 98);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 356;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 106:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(108); }
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                  }
                  break;
               case 325:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     { jjCheckNAdd(98); }
                  }
                  else if (curChar == 40)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 40)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 110:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(112); }
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 357:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 61)
                     { jjAddStates(9, 21); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     { jjCheckNAdd(98); }
                  }
                  else if (curChar == 47)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 358:
                  if (curChar == 52)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 51)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 50)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 49)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 304:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     { jjCheckNAdd(98); }
                  }
                  else if (curChar == 40)
                     { jjCheckNAddStates(28, 33); }
                  if (curChar == 40)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 0:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(98); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(40, 51); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(52, 57); }
                  else if (curChar == 61)
                     { jjAddStates(58, 69); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 113;
                  else if (curChar == 37)
                     { jjAddStates(70, 71); }
                  else if (curChar == 36)
                     { jjAddStates(72, 74); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(75, 80); }
                  else if (curChar == 46)
                     { jjCheckNAdd(3); }
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(81, 87); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAdd(1); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAddStates(88, 90); }
                  }
                  break;
               case 100:
                  if ((0x83ff200200000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 356:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  else if (curChar == 47)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjstateSet[jjnewStateCnt++] = 20;
                  }
                  if (curChar == 36)
                     { jjAddStates(91, 93); }
                  else if (curChar == 37)
                     { jjAddStates(94, 95); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 46)
                     { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAddStates(96, 98); }
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 8:
                  if (curChar == 47)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 9:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 11:
                  if ((0x2000a0b600000000L & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 12:
                  if (curChar == 37)
                     { jjAddStates(94, 95); }
                  break;
               case 13:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 15:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(99, 105); }
                  break;
               case 17:
                  if (curChar == 36)
                     { jjAddStates(91, 93); }
                  break;
               case 18:
                  if ((0x83ff200200000000L & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 19:
                  if (curChar != 47)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(106, 112); }
                  break;
               case 25:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(26); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(113, 119); }
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(120, 126); }
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 33:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 35:
                  if ((0x2000a0b600000000L & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 36:
                  if (curChar == 37)
                     { jjAddStates(127, 128); }
                  break;
               case 37:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 39:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(129, 135); }
                  break;
               case 41:
                  if (curChar == 36)
                     { jjAddStates(136, 138); }
                  break;
               case 42:
                  if ((0x83ff200200000000L & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 43:
                  if (curChar == 47)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 44:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 46:
                  if ((0x2000a0b600000000L & l) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 47:
                  if (curChar == 37)
                     { jjAddStates(145, 146); }
                  break;
               case 48:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 50:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(51); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(147, 153); }
                  break;
               case 52:
                  if (curChar == 36)
                     { jjAddStates(154, 156); }
                  break;
               case 53:
                  if ((0x83ff200200000000L & l) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 56:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(157, 163); }
                  break;
               case 58:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(59); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(164, 170); }
                  break;
               case 60:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 177); }
                  break;
               case 61:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 62:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(61); }
                  break;
               case 66:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(67); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(178, 184); }
                  break;
               case 68:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 191); }
                  break;
               case 70:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(192, 198); }
                  break;
               case 71:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 72:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(71); }
                  break;
               case 75:
                  if ((0xffffffefffffffffL & l) != 0L)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 77:
                  if ((0xb400000000L & l) != 0L)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 78:
                  if (curChar == 37)
                     { jjAddStates(205, 206); }
                  break;
               case 79:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 81:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(82); }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(207, 213); }
                  break;
               case 83:
                  if (curChar == 36)
                     { jjAddStates(214, 216); }
                  break;
               case 84:
                  if ((0x83ff200200000000L & l) != 0L)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 88:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(89); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(217, 223); }
                  break;
               case 90:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(91); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(224, 230); }
                  break;
               case 92:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 237); }
                  break;
               case 93:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 94:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(93); }
                  break;
               case 96:
                  if ((0x3ff200000000000L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 97:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(98); }
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAdd(98); }
                  break;
               case 99:
                  if (curChar == 36)
                     { jjAddStates(72, 74); }
                  break;
               case 103:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(104); }
                  break;
               case 107:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(108); }
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAdd(108); }
                  break;
               case 109:
                  if (curChar == 37)
                     { jjAddStates(70, 71); }
                  break;
               case 111:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(112); }
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  { jjCheckNAdd(112); }
                  break;
               case 113:
                  if (curChar == 33)
                     { jjCheckNAdd(114); }
                  break;
               case 114:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  { jjCheckNAdd(114); }
                  break;
               case 115:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 116:
                  if (curChar == 61)
                     { jjAddStates(58, 69); }
                  break;
               case 118:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 121:
                  if (curChar == 61)
                     { jjAddStates(9, 21); }
                  break;
               case 124:
                  if (curChar == 49)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 129:
                  if (curChar == 50)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 134:
                  if (curChar == 51)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 139:
                  if (curChar == 52)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 178:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 221:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(81, 87); }
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(222, 223); }
                  break;
               case 223:
                  if (curChar != 46)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAddStates(238, 240); }
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAddStates(238, 240); }
                  break;
               case 226:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(227); }
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAddTwoStates(227, 7); }
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(228, 229); }
                  break;
               case 230:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(231); }
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAddTwoStates(231, 7); }
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(241, 243); }
                  break;
               case 234:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(235); }
                  break;
               case 235:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(235, 7); }
                  break;
               case 236:
                  if (curChar != 48)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAddStates(88, 90); }
                  break;
               case 238:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 239:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(239); }
                  break;
               case 241:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 242:
                  if (curChar == 39)
                     { jjCheckNAddStates(52, 57); }
                  break;
               case 243:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(244, 246); }
                  break;
               case 244:
                  if (curChar == 39 && kind > 76)
                     kind = 76;
                  break;
               case 247:
                  if (curChar == 39)
                     { jjCheckNAddStates(244, 246); }
                  break;
               case 248:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(247, 249); }
                  break;
               case 249:
                  if (curChar == 39 && kind > 79)
                     kind = 79;
                  break;
               case 252:
                  if (curChar == 39)
                     { jjCheckNAddStates(247, 249); }
                  break;
               case 253:
                  if (curChar == 34)
                     { jjCheckNAddStates(40, 51); }
                  break;
               case 254:
                  if ((0xffffffebffffffffL & l) != 0L)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 256:
                  if ((0x40b400000000L & l) != 0L)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 257:
                  if (curChar == 37)
                     { jjAddStates(256, 257); }
                  break;
               case 258:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 260:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(261); }
                  break;
               case 261:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(258, 264); }
                  break;
               case 262:
                  if (curChar == 36)
                     { jjAddStates(265, 267); }
                  break;
               case 263:
                  if ((0x83ff200200000000L & l) != 0L)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 264:
                  if (curChar == 34 && kind > 76)
                     kind = 76;
                  break;
               case 267:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(268); }
                  break;
               case 268:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(268, 274); }
                  break;
               case 269:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(270); }
                  break;
               case 270:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(275, 281); }
                  break;
               case 271:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(282, 288); }
                  break;
               case 272:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 273:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 274:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(272); }
                  break;
               case 275:
                  if ((0xffffffebffffffffL & l) != 0L)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 277:
                  if ((0x40b400000000L & l) != 0L)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 278:
                  if (curChar == 37)
                     { jjAddStates(295, 296); }
                  break;
               case 279:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 281:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(282); }
                  break;
               case 282:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(297, 303); }
                  break;
               case 283:
                  if (curChar == 36)
                     { jjAddStates(304, 306); }
                  break;
               case 284:
                  if ((0x83ff200200000000L & l) != 0L)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 285:
                  if (curChar == 34 && kind > 77)
                     kind = 77;
                  break;
               case 288:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(289); }
                  break;
               case 289:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(307, 313); }
                  break;
               case 290:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(291); }
                  break;
               case 291:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(314, 320); }
                  break;
               case 292:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(321, 327); }
                  break;
               case 293:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 294:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 295:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(293); }
                  break;
               case 297:
                  if (curChar == 40)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 298:
                  if ((0xfffffcfbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 299:
                  if (curChar == 41 && kind > 76)
                     kind = 76;
                  break;
               case 302:
                  if (curChar == 39)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 303:
                  if (curChar == 41)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 305:
                  if ((0xfffffcefffffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 307:
                  if ((0x43b400000000L & l) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 308:
                  if (curChar == 37)
                     { jjAddStates(328, 329); }
                  break;
               case 309:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 311:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(312); }
                  break;
               case 312:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(330, 336); }
                  break;
               case 313:
                  if (curChar == 36)
                     { jjAddStates(337, 339); }
                  break;
               case 314:
                  if ((0x83ff200200000000L & l) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 317:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(318); }
                  break;
               case 318:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(340, 346); }
                  break;
               case 319:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(320); }
                  break;
               case 320:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(347, 353); }
                  break;
               case 321:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(354, 360); }
                  break;
               case 322:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 323:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 324;
                  break;
               case 324:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(322); }
                  break;
               case 326:
                  if (curChar == 40)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 327:
                  if ((0xfffffcefffffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 329:
                  if ((0x43b400000000L & l) != 0L)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 330:
                  if (curChar == 37)
                     { jjAddStates(361, 362); }
                  break;
               case 331:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 333:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(334); }
                  break;
               case 334:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(363, 369); }
                  break;
               case 335:
                  if (curChar == 36)
                     { jjAddStates(370, 372); }
                  break;
               case 336:
                  if ((0x83ff200200000000L & l) != 0L)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 337:
                  if (curChar == 41 && kind > 78)
                     kind = 78;
                  break;
               case 340:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(341); }
                  break;
               case 341:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(373, 379); }
                  break;
               case 342:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAdd(343); }
                  break;
               case 343:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(380, 386); }
                  break;
               case 344:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(387, 393); }
                  break;
               case 345:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 346:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 347;
                  break;
               case 347:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(345); }
                  break;
               case 349:
                  if (curChar == 40)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 350:
                  if ((0xfffffcfbffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 351:
                  if (curChar == 41 && kind > 81)
                     kind = 81;
                  break;
               case 354:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 355:
                  if (curChar == 41)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 183:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 194;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 190;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 186;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 106:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(108); }
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                  }
                  break;
               case 180:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 219;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 212;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 208;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 201;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 198;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 195;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 179;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 210;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 205;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 191;
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 187;
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 325:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     { jjCheckNAdd(98); }
                  }
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 326;
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 110:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(112); }
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 357:
                  { jjCheckNAddStates(6, 8); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 181:
                  if (curChar == 100)
                     { jjCheckNAdd(139); }
                  if (curChar == 100)
                     { jjCheckNAdd(134); }
                  if (curChar == 100)
                     { jjCheckNAdd(129); }
                  if (curChar == 100)
                     { jjCheckNAdd(124); }
                  break;
               case 32:
               case 98:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAdd(98); }
                  break;
               case 218:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 217;
                  else if (curChar == 100)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 205:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 207;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 210:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 218;
                  if (curChar == 110)
                     { jjCheckNAdd(117); }
                  break;
               case 304:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAdd(98); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(98); }
                  else if (curChar == 64)
                     { jjAddStates(394, 395); }
                  else if (curChar == 96)
                     { jjCheckNAddStates(199, 204); }
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                  }
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 32;
                  if (curChar == 113)
                     { jjCheckNAddStates(396, 399); }
                  break;
               case 182:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 193;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 189;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 185;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 100:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(104); }
                  else if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if ((0x7f7fffe87ffffffL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  break;
               case 356:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  else if (curChar == 92)
                     { jjAddStates(400, 402); }
                  if (curChar == 64)
                     { jjAddStates(403, 404); }
                  break;
               case 4:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(405, 406); }
                  break;
               case 7:
                  if ((0x5000000050L & l) != 0L && kind > 74)
                     kind = 74;
                  break;
               case 9:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 10:
                  if (curChar == 92)
                     { jjAddStates(400, 402); }
                  break;
               case 11:
                  if ((0x14404538000001L & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 13:
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 14:
                  if (curChar == 64)
                     { jjAddStates(403, 404); }
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(99, 105); }
                  break;
               case 18:
                  if ((0x7f7fffe87ffffffL & l) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 20:
                  if (curChar == 103 && kind > 82)
                     kind = 82;
                  break;
               case 21:
                  if (curChar == 79)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 22:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(106, 112); }
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(26); }
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(113, 119); }
                  break;
               case 31:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 34:
                  if (curChar == 92)
                     { jjAddStates(407, 409); }
                  break;
               case 35:
                  if ((0x14404538000001L & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 37:
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 38:
                  if (curChar == 64)
                     { jjAddStates(410, 411); }
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(129, 135); }
                  break;
               case 42:
                  if ((0x7f7fffe87ffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 44:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 45:
                  if (curChar == 92)
                     { jjAddStates(412, 414); }
                  break;
               case 46:
                  if ((0x14404538000001L & l) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 48:
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 49:
                  if (curChar == 64)
                     { jjAddStates(415, 416); }
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(51); }
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(147, 153); }
                  break;
               case 53:
                  if ((0x7f7fffe87ffffffL & l) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 54:
                  if (curChar == 79)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 55:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(57); }
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(157, 163); }
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(59); }
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(164, 170); }
                  break;
               case 64:
                  if (curChar == 79)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 65:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(67); }
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(178, 184); }
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 191); }
                  break;
               case 74:
                  if (curChar == 96)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 75:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 76:
                  if (curChar == 92)
                     { jjAddStates(417, 419); }
                  break;
               case 77:
                  if ((0x14404510000001L & l) != 0L)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 79:
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 80:
                  if (curChar == 64)
                     { jjAddStates(420, 421); }
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(82); }
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(207, 213); }
                  break;
               case 84:
                  if ((0x7f7fffe87ffffffL & l) != 0L)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 85:
                  if (curChar == 96 && kind > 83)
                     kind = 83;
                  break;
               case 86:
                  if (curChar == 79)
                     { jjCheckNAddStates(199, 204); }
                  break;
               case 87:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(89); }
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(217, 223); }
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(91); }
                  break;
               case 91:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(224, 230); }
                  break;
               case 96:
                  if ((0x7f7fffe87fffffeL & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 97:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(98); }
                  break;
               case 101:
                  if (curChar == 79 && kind > 85)
                     kind = 85;
                  break;
               case 102:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 104:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(104); }
                  break;
               case 105:
                  if (curChar == 64)
                     { jjAddStates(394, 395); }
                  break;
               case 107:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(108); }
                  break;
               case 108:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAdd(108); }
                  break;
               case 111:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(112); }
                  break;
               case 112:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  { jjCheckNAdd(112); }
                  break;
               case 114:
                  if (kind > 148)
                     kind = 148;
                  jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
                  if (curChar == 100)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 118:
                  { jjCheckNAddStates(6, 8); }
                  break;
               case 119:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 120:
                  if (curChar == 116)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 122:
               case 179:
                  if (curChar == 111)
                     { jjCheckNAdd(117); }
                  break;
               case 123:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 125:
                  if (curChar == 100)
                     { jjCheckNAdd(124); }
                  break;
               case 126:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 130:
                  if (curChar == 100)
                     { jjCheckNAdd(129); }
                  break;
               case 131:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 135:
                  if (curChar == 100)
                     { jjCheckNAdd(134); }
                  break;
               case 136:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 140:
                  if (curChar == 100)
                     { jjCheckNAdd(139); }
                  break;
               case 141:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 114)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 145:
               case 197:
                  if (curChar == 101)
                     { jjCheckNAdd(144); }
                  break;
               case 146:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 109)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 149:
               case 200:
                  if (curChar == 101)
                     { jjCheckNAdd(148); }
                  break;
               case 150:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 110)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 153:
               case 203:
                  if (curChar == 105)
                     { jjCheckNAdd(152); }
                  break;
               case 154:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 107)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 158:
               case 207:
                  if (curChar == 99)
                     { jjCheckNAdd(157); }
                  break;
               case 159:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 110)
                     { jjCheckNAdd(117); }
                  break;
               case 162:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
               case 212:
                  if (curChar == 111)
                     { jjCheckNAdd(144); }
                  break;
               case 164:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 103)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 166:
               case 214:
                  if (curChar == 110)
                     { jjCheckNAdd(165); }
                  break;
               case 167:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 116 && kind > 80)
                     kind = 80;
                  break;
               case 174:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 177:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 184:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 100)
                     { jjCheckNAdd(129); }
                  break;
               case 186:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 100)
                     { jjCheckNAdd(134); }
                  break;
               case 190:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 100)
                     { jjCheckNAdd(139); }
                  break;
               case 194:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 198:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 201:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 204:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 206:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 208:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 211:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 213:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 215:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 219:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 225:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(422, 423); }
                  break;
               case 229:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(424, 425); }
                  break;
               case 233:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(426, 427); }
                  break;
               case 237:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(238); }
                  break;
               case 238:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(238); }
                  break;
               case 240:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(244, 246); }
                  break;
               case 245:
                  if (curChar == 92)
                     { jjAddStates(428, 429); }
                  break;
               case 246:
                  if (curChar == 92)
                     { jjCheckNAddStates(244, 246); }
                  break;
               case 248:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(247, 249); }
                  break;
               case 250:
                  if (curChar == 92)
                     { jjAddStates(430, 431); }
                  break;
               case 251:
                  if (curChar == 92)
                     { jjCheckNAddStates(247, 249); }
                  break;
               case 254:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 255:
                  if (curChar == 92)
                     { jjAddStates(432, 434); }
                  break;
               case 256:
                  if ((0x14404410000001L & l) != 0L)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 258:
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 259:
                  if (curChar == 64)
                     { jjAddStates(435, 436); }
                  break;
               case 260:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(261); }
                  break;
               case 261:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(258, 264); }
                  break;
               case 263:
                  if ((0x7f7fffe87ffffffL & l) != 0L)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 265:
                  if (curChar == 79)
                     { jjCheckNAddStates(250, 255); }
                  break;
               case 266:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(268); }
                  break;
               case 268:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(268, 274); }
                  break;
               case 269:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(270); }
                  break;
               case 270:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(275, 281); }
                  break;
               case 275:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 276:
                  if (curChar == 92)
                     { jjAddStates(437, 439); }
                  break;
               case 277:
                  if ((0x14404410000001L & l) != 0L)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 279:
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 280:
                  if (curChar == 64)
                     { jjAddStates(440, 441); }
                  break;
               case 281:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(282); }
                  break;
               case 282:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(297, 303); }
                  break;
               case 284:
                  if ((0x7f7fffe87ffffffL & l) != 0L)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 286:
                  if (curChar == 79)
                     { jjCheckNAddStates(289, 294); }
                  break;
               case 287:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(289); }
                  break;
               case 289:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(307, 313); }
                  break;
               case 290:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(291); }
                  break;
               case 291:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(314, 320); }
                  break;
               case 296:
                  if (curChar == 113)
                     { jjCheckNAddStates(396, 399); }
                  break;
               case 298:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 300:
                  if (curChar == 92)
                     { jjCheckNAddStates(442, 445); }
                  break;
               case 301:
                  if (curChar == 92)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 305:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 306:
                  if (curChar == 92)
                     { jjAddStates(446, 448); }
                  break;
               case 307:
                  if ((0x14404410000001L & l) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 309:
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 310:
                  if (curChar == 64)
                     { jjAddStates(449, 450); }
                  break;
               case 311:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(312); }
                  break;
               case 312:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(330, 336); }
                  break;
               case 314:
                  if ((0x7f7fffe87ffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 315:
                  if (curChar == 79)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 316:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 315;
                  break;
               case 317:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(318); }
                  break;
               case 318:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(340, 346); }
                  break;
               case 319:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(320); }
                  break;
               case 320:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(347, 353); }
                  break;
               case 327:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 328:
                  if (curChar == 92)
                     { jjAddStates(451, 453); }
                  break;
               case 329:
                  if ((0x14404410000001L & l) != 0L)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 331:
                  if ((0x7f7fffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 332:
                  if (curChar == 64)
                     { jjAddStates(454, 455); }
                  break;
               case 333:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(334); }
                  break;
               case 334:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(363, 369); }
                  break;
               case 336:
                  if ((0x7f7fffe87ffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 338:
                  if (curChar == 79)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 339:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 338;
                  break;
               case 340:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(341); }
                  break;
               case 341:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(373, 379); }
                  break;
               case 342:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(343); }
                  break;
               case 343:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(380, 386); }
                  break;
               case 348:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 350:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 352:
                  if (curChar == 92)
                     { jjCheckNAddStates(456, 459); }
                  break;
               case 353:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 357:
               case 118:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 356:
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(75, 80); }
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(22, 27); }
                  break;
               case 44:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(139, 144); }
                  break;
               case 75:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(199, 204); }
                  break;
               case 114:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 243:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(244, 246); }
                  break;
               case 248:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(247, 249); }
                  break;
               case 254:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(250, 255); }
                  break;
               case 275:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(289, 294); }
                  break;
               case 298:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 305:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 327:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(28, 33); }
                  break;
               case 350:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 356 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   350, 351, 352, 298, 299, 300, 118, 119, 121, 123, 128, 133, 138, 143, 147, 151, 
   156, 160, 162, 164, 172, 175, 33, 34, 36, 38, 41, 43, 327, 328, 330, 332, 
   335, 337, 305, 306, 308, 310, 313, 299, 254, 255, 257, 259, 262, 264, 275, 276, 
   278, 280, 283, 285, 243, 244, 248, 249, 250, 245, 180, 184, 188, 192, 196, 199, 
   202, 206, 209, 211, 213, 220, 110, 111, 100, 102, 103, 9, 10, 12, 14, 17, 
   19, 222, 223, 228, 229, 232, 233, 7, 237, 239, 240, 18, 22, 23, 13, 25, 
   3, 4, 7, 9, 10, 12, 14, 16, 17, 19, 9, 10, 12, 14, 17, 24, 
   19, 9, 10, 12, 26, 14, 17, 19, 9, 10, 28, 12, 14, 17, 19, 37, 
   68, 33, 34, 36, 38, 40, 41, 43, 42, 65, 66, 44, 45, 47, 49, 52, 
   19, 48, 58, 44, 45, 47, 49, 51, 52, 19, 53, 55, 56, 44, 45, 47, 
   49, 52, 57, 19, 44, 45, 47, 59, 49, 52, 19, 44, 45, 61, 47, 49, 
   52, 19, 33, 34, 36, 38, 41, 67, 43, 33, 34, 36, 69, 38, 41, 43, 
   33, 34, 71, 36, 38, 41, 43, 75, 76, 78, 80, 83, 85, 79, 90, 75, 
   76, 78, 80, 82, 83, 85, 84, 87, 88, 75, 76, 78, 80, 83, 89, 85, 
   75, 76, 78, 91, 80, 83, 85, 75, 76, 93, 78, 80, 83, 85, 224, 225, 
   7, 232, 233, 7, 243, 244, 245, 248, 249, 250, 254, 255, 257, 259, 262, 264, 
   258, 269, 254, 255, 257, 259, 261, 262, 264, 263, 266, 267, 254, 255, 257, 259, 
   262, 268, 264, 254, 255, 257, 270, 259, 262, 264, 254, 255, 272, 257, 259, 262, 
   264, 275, 276, 278, 280, 283, 285, 279, 290, 275, 276, 278, 280, 282, 283, 285, 
   284, 287, 288, 275, 276, 278, 280, 283, 289, 285, 275, 276, 278, 291, 280, 283, 
   285, 275, 276, 293, 278, 280, 283, 285, 309, 319, 305, 306, 308, 310, 312, 313, 
   299, 314, 316, 317, 305, 306, 308, 310, 313, 318, 299, 305, 306, 308, 320, 310, 
   313, 299, 305, 306, 322, 308, 310, 313, 299, 331, 342, 327, 328, 330, 332, 334, 
   335, 337, 336, 339, 340, 327, 328, 330, 332, 335, 341, 337, 327, 328, 330, 343, 
   332, 335, 337, 327, 328, 345, 330, 332, 335, 337, 106, 107, 297, 325, 348, 349, 
   11, 27, 29, 13, 15, 5, 6, 35, 70, 72, 37, 39, 46, 60, 62, 48, 
   50, 77, 92, 94, 79, 81, 226, 227, 230, 231, 234, 235, 246, 247, 251, 252, 
   256, 271, 273, 258, 260, 277, 292, 294, 279, 281, 301, 302, 303, 297, 307, 321, 
   323, 309, 311, 329, 344, 346, 331, 333, 353, 354, 355, 349, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\137\137\104\101\124\101\137\137", "\137\137\105\116\104\137\137", "\137\137\106\111\114\105\137\137", 
"\137\137\114\111\116\105\137\137", "\137\137\120\101\103\113\101\107\105\137\137", "\141\156\144", 
"\143\155\160", "\143\157\156\164\151\156\165\145", "\103\117\122\105", "\144\157", 
"\145\154\163\145", "\145\154\163\151\146", "\145\161", "\145\170\160", "\146\157\162", 
"\146\157\162\145\141\143\150", "\147\145", "\147\164", "\151\146", "\154\145", "\154\157\143\153", 
"\154\164", "\155", "\156\145", "\156\157", "\157\162", "\160\141\143\153\141\147\145", 
"\161", "\161\161", "\161\162", "\161\167", "\161\170", "\163\165\142", "\164\162", 
"\165\156\154\145\163\163", "\165\156\164\151\154", "\167\150\151\154\145", "\170\157\162", "\171", 
"\155\171", "\167\150\145\156", "\147\151\166\145\156", "\162\145\164\165\162\156", 
"\144\145\146\141\165\154\164", "\102\105\107\111\116", "\145\166\141\154", "\154\157\143\141\154", 
"\75\160\157\144", "\75\150\145\141\144\61", "\75\150\145\141\144\62", "\75\150\145\141\144\63", 
"\75\150\145\141\144\64", "\75\157\166\145\162", "\75\151\164\145\155", "\75\142\145\147\151\156", 
"\75\142\141\143\153", "\75\145\156\144", "\75\146\157\162", "\75\145\156\143\157\144\151\156\147", 
"\75\143\165\164", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\75", "\76", "\74", "\74\75\76", "\41", "\176", "\77", 
"\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", 
"\55\55", "\53", "\55", "\52", "\52\52", "\46", "\174", "\136", "\45", "\74\74", 
"\76\76", "\76\76\76", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", 
"\136\75", "\176\75", "\45\75", "\52\52\75", "\56\75", "\170\75", "\74\74\75", 
"\76\76\75", "\56", "\75\76", "\170", "\75\176", "\41\176", "\44", "\100", "\134", null, 
"\57", "\72\72", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public PerlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public PerlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 356; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xfffffffff8fff43fL, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0xbeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x80L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x140L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[356];
    private final int[] jjstateSet = new int[2 * 356];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}

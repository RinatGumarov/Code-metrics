/* PerlParser.java */
/* Generated By:JavaCC: Do not edit this line. PerlParser.java */
package perl;

public class PerlParser implements PerlParserConstants {

    private static int numStringOperators = 0;
    private static int numNumericOperators = 0;
    private static int linesOfCode = 0;
    private static int numScalars = 0;
    private static int arrayGets = 0;
    private static int hashGets = 0;
    private static int numArrays = 0;
    private static int numHashes = 0;
    private static int numBranches = 0;
    private static int regexes = 0;
    private static int functions = 0;

    public static void setNumStringOperators(int numStringOperators) {
        PerlParser.numStringOperators = numStringOperators;
    }

    public static void setNumNumericOperators(int numNumericOperators) {
        PerlParser.numNumericOperators = numNumericOperators;
    }

    public static void setLinesOfCode(int linesOfCode) {
        PerlParser.linesOfCode = linesOfCode;
    }

    public static void setNumScalars(int numScalars) {
        PerlParser.numScalars = numScalars;
    }

    public static void setArrayGets(int arrayGets) {
        PerlParser.arrayGets = arrayGets;
    }

    public static void setHashGets(int hashGets) {
        PerlParser.hashGets = hashGets;
    }

    public static void setNumArrays(int numArrays) {
        PerlParser.numArrays = numArrays;
    }

    public static void setNumHashes(int numHashes) {
        PerlParser.numHashes = numHashes;
    }

    public static void setNumBranches(int numBranches) {
        PerlParser.numBranches = numBranches;
    }

    public static void setNumCycles(int numCycles) {
        PerlParser.numCycles = numCycles;
    }

    public static void setRegexes(int regexes) {
        PerlParser.regexes = regexes;
    }

    public static void setFunctions(int functions) {
        PerlParser.functions = functions;
    }

    private static int numCycles = 0;

    public static int getNumStringOperators() {
        return numStringOperators;
    }

    public static int getNumNumericOperators() {
        return numNumericOperators;
    }

    public static int getLinesOfCode() {
        return linesOfCode;
    }

    public static int getNumScalars() {
        return numScalars;
    }

    public static int getArrayGets() {
        return arrayGets;
    }

    public static int getHashGets() {
        return hashGets;
    }

    public static int getNumArrays() {
        return numArrays;
    }

    public static int getNumHashes() {
        return numHashes;
    }

    public static int getNumBranches() {
        return numBranches;
    }

    public static int getNumCycles() {
        return numCycles;
    }

    public static int getRegexes() {
        return regexes;
    }

    public static int getFunctions() {
        return functions;
    }

    public static void main(String args[]) throws Exception {
        PerlParser parser;

        String filename = "info.csv";
        if (args.length == 2) {
            filename = args[1];
        } else if (args.length != 1) {
            System.out.println("Perl Parser usage: java PerlParser inputdir [outputfile]");
        }
        java.io.File folder = new java.io.File(args[0]);
        java.io.PrintStream out = new java.io.PrintStream(filename);
        out.println("File name, Lines of code, Scalars, Arrays, Hashes, Branches (non-cyclic), " +
                "Cycles, String operators (. lt gt ne etc), Numeric operators (+ < > != etc), " +
                "Array gets, Hash gets, Regexes, Functions, Cyclomatic complexity");
        for (java.io.File file : folder.listFiles()) {
            parser = new PerlParser(new java.io.FileInputStream(file));
            linesOfCode = numScalars = numArrays = numHashes = numBranches = numCycles = numStringOperators
                    = numNumericOperators = arrayGets = hashGets = regexes = functions = 0;
            try {
                parser.CompilationUnit();
                out.print(file.getName() + ", ");
                out.print(linesOfCode + ", ");
                out.print(numScalars + ", ");
                out.print(numArrays + ", ");
                out.print(numHashes + ", ");
                out.print(numBranches + ", ");
                out.print(numCycles + ", ");
                out.print(numStringOperators + ", ");
                out.print(numNumericOperators + ", ");
                out.print(arrayGets + ", ");
                out.print(hashGets + ", ");
                out.print(regexes + ", ");
                out.print(functions + ", ");
                out.print((numBranches + numCycles));
                out.println();
            } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("Perl Parser:    Encountered errors during parse.");
            }
        }
        out.close();
    }

    /*****************************************
     * THE LANGUAGE GRAMMAR STARTS HERE *
     *****************************************/

/*
 * Program structuring syntax follows.
 */
    final public void CompilationUnit() throws ParseException {
        if (jj_2_1(4)) {
            jj_consume_token(POD);
        } else {
            ;
        }
        if (jj_2_2(4)) {
            CmdDeclaration();
        } else {
            ;
        }
        label_1:
        while (true) {
            if (jj_2_3(4)) {
                ;
            } else {
                break label_1;
            }
            if (jj_2_4(4)) {
                jj_consume_token(POD);
            } else if (jj_2_5(4)) {
                Statement();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        jj_consume_token(0);
    }

    final public void CmdDeclaration() throws ParseException {
        jj_consume_token(PATH);
    }

    final public void Expression() throws ParseException {
        ConditionalExpression();
        if (jj_2_6(4)) {
            AssignmentOperator();
            Expression();
        } else {
            ;
        }
    }

    final public void AssignmentOperator() throws ParseException {
        if (jj_2_7(4)) {
            jj_consume_token(ASSIGN);
        } else if (jj_2_8(4)) {
            jj_consume_token(STARASSIGN);
        } else if (jj_2_9(4)) {
            jj_consume_token(SLASHASSIGN);
        } else if (jj_2_10(4)) {
            jj_consume_token(REMASSIGN);
        } else if (jj_2_11(4)) {
            jj_consume_token(PLUSASSIGN);
        } else if (jj_2_12(4)) {
            jj_consume_token(MINUSASSIGN);
        } else if (jj_2_13(4)) {
            jj_consume_token(LSHIFTASSIGN);
        } else if (jj_2_14(4)) {
            jj_consume_token(RSIGNEDSHIFTASSIGN);
        } else if (jj_2_15(4)) {
            jj_consume_token(ANDASSIGN);
        } else if (jj_2_16(4)) {
            jj_consume_token(XORASSIGN);
        } else if (jj_2_17(4)) {
            jj_consume_token(ORASSIGN);
        } else if (jj_2_18(4)) {
            jj_consume_token(POWASSIGN);
        } else if (jj_2_19(4)) {
            jj_consume_token(TEMPLATE_CMP);
        } else if (jj_2_20(4)) {
            jj_consume_token(CONCATASSIGN);
        } else if (jj_2_21(4)) {
            jj_consume_token(REPEATASSIGN);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void ConditionalExpression() throws ParseException {
        ConditionalOrExpression();
        if (jj_2_22(4)) {
            jj_consume_token(HOOK);
            Expression();
            jj_consume_token(COLON);
            ConditionalExpression();
        } else {
            ;
        }
    }

    final public void ConditionalOrExpression() throws ParseException {
        ConditionalAndExpression();
        label_2:
        while (true) {
            if (jj_2_23(4)) {
                ;
            } else {
                break label_2;
            }
            if (jj_2_24(4)) {
                jj_consume_token(SC_OR);
            } else if (jj_2_25(4)) {
                jj_consume_token(OR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            ConditionalAndExpression();
        }
    }

    final public void ConditionalAndExpression() throws ParseException {
        InclusiveOrExpression();
        label_3:
        while (true) {
            if (jj_2_26(4)) {
                ;
            } else {
                break label_3;
            }
            if (jj_2_27(4)) {
                jj_consume_token(SC_AND);
            } else if (jj_2_28(4)) {
                jj_consume_token(AND);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            InclusiveOrExpression();
        }
    }

    final public void InclusiveOrExpression() throws ParseException {
        ExclusiveOrExpression();
        label_4:
        while (true) {
            if (jj_2_29(4)) {
                ;
            } else {
                break label_4;
            }
            jj_consume_token(BIT_OR);
            ExclusiveOrExpression();
        }
    }

    final public void ExclusiveOrExpression() throws ParseException {
        AndExpression();
        label_5:
        while (true) {
            if (jj_2_30(4)) {
                ;
            } else {
                break label_5;
            }
            jj_consume_token(XOR);
            AndExpression();
        }
    }

    final public void AndExpression() throws ParseException {
        EqualityExpression();
        label_6:
        while (true) {
            if (jj_2_31(4)) {
                ;
            } else {
                break label_6;
            }
            jj_consume_token(BIT_AND);
            EqualityExpression();
        }
    }

    final public void EqualityExpression() throws ParseException {
        MatchExpression();
        label_7:
        while (true) {
            if (jj_2_32(4)) {
                ;
            } else {
                break label_7;
            }
            if (jj_2_33(4)) {
                jj_consume_token(EQ);
            } else if (jj_2_34(4)) {
                jj_consume_token(NE);
            } else if (jj_2_35(4)) {
                jj_consume_token(SEQ);
            } else if (jj_2_36(4)) {
                jj_consume_token(SNE);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            MatchExpression();
        }
    }

    final public void MatchExpression() throws ParseException {
        RelationalExpression();
        label_8:
        while (true) {
            if (jj_2_37(4)) {
                ;
            } else {
                break label_8;
            }
            jj_consume_token(TEMPLATE_NOT_CMP);
            RelationalExpression();
        }
        numStringOperators++;
    }

    final public void RelationalExpression() throws ParseException {
        StringRelationalExpression();
        label_9:
        while (true) {
            if (jj_2_38(4)) {
                ;
            } else {
                break label_9;
            }
            if (jj_2_39(4)) {
                jj_consume_token(LT);
            } else if (jj_2_40(4)) {
                jj_consume_token(GT);
            } else if (jj_2_41(4)) {
                jj_consume_token(LE);
            } else if (jj_2_42(4)) {
                jj_consume_token(GE);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            StringRelationalExpression();
        }
        numNumericOperators++;
    }

    final public void StringRelationalExpression() throws ParseException {
        ShiftExpression();
        label_10:
        while (true) {
            if (jj_2_43(4)) {
                ;
            } else {
                break label_10;
            }
            if (jj_2_44(4)) {
                jj_consume_token(SLT);
            } else if (jj_2_45(4)) {
                jj_consume_token(SGT);
            } else if (jj_2_46(4)) {
                jj_consume_token(SLE);
            } else if (jj_2_47(4)) {
                jj_consume_token(SGE);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            ShiftExpression();
        }
        numStringOperators++;
    }

    final public void ShiftExpression() throws ParseException {
        AdditiveExpression();
        label_11:
        while (true) {
            if (jj_2_48(4)) {
                ;
            } else {
                break label_11;
            }
            if (jj_2_49(4)) {
                jj_consume_token(LSHIFT);
            } else if (jj_2_50(4)) {
                jj_consume_token(RSIGNEDSHIFT);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            AdditiveExpression();
        }
    }

    final public void AdditiveExpression() throws ParseException {
        MultiplicativeExpression();
        label_12:
        while (true) {
            if (jj_2_51(4)) {
                ;
            } else {
                break label_12;
            }
            if (jj_2_52(4)) {
                jj_consume_token(PLUS);
            } else if (jj_2_53(4)) {
                jj_consume_token(MINUS);
            } else if (jj_2_54(4)) {
                jj_consume_token(CONCAT);
            } else if (jj_2_55(4)) {
                jj_consume_token(DOUBLE_ARROW);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            MultiplicativeExpression();
        }
    }

    final public void MultiplicativeExpression() throws ParseException {
        UnaryExpression();
        label_13:
        while (true) {
            if (jj_2_56(4)) {
                ;
            } else {
                break label_13;
            }
            if (jj_2_57(4)) {
                jj_consume_token(STAR);
            } else if (jj_2_58(4)) {
                jj_consume_token(149);
            } else if (jj_2_59(4)) {
                jj_consume_token(REM);
            } else if (jj_2_60(4)) {
                jj_consume_token(POWER);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            UnaryExpression();
        }
    }

    final public void UnaryExpression() throws ParseException {
        if (jj_2_63(4)) {
            if (jj_2_61(4)) {
                jj_consume_token(PLUS);
            } else if (jj_2_62(4)) {
                jj_consume_token(MINUS);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            UnaryExpression();
        } else if (jj_2_64(4)) {
            PreIncrementExpression();
        } else if (jj_2_65(4)) {
            PreDecrementExpression();
        } else if (jj_2_66(4)) {
            UnaryExpressionNotPlusMinus();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void PreIncrementExpression() throws ParseException {
        jj_consume_token(INCR);
        PrimaryExpression();
    }

    final public void PreDecrementExpression() throws ParseException {
        jj_consume_token(DECR);
        PrimaryExpression();
    }

    final public void UnaryExpressionNotPlusMinus() throws ParseException {
        if (jj_2_69(4)) {
            if (jj_2_67(4)) {
                jj_consume_token(TILDE);
            } else if (jj_2_68(4)) {
                jj_consume_token(BANG);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            UnaryExpression();
        } else if (jj_2_70(4)) {
            PostfixExpression();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void PostfixExpression() throws ParseException {
        PrimaryExpression();
        if (jj_2_73(4)) {
            if (jj_2_71(2)) {
                jj_consume_token(INCR);
            } else if (jj_2_72(4)) {
                jj_consume_token(DECR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } else {
            ;
        }
    }

    final public void PrimaryExpression() throws ParseException {
        PrimaryExpression2();
    }

    final public void PrimaryExpression2() throws ParseException {
        PrimaryPrefix();
        label_14:
        while (true) {
            if (jj_2_74(2)) {
                ;
            } else {
                break label_14;
            }
            PrimarySuffix();
        }
        if (jj_2_80(4)) {
            if (jj_2_75(4)) {
                SimpleForeachStatement();
            } else if (jj_2_76(4)) {
                SimpleIfStatement();
            } else if (jj_2_77(4)) {
                SimpleUnlessStatement();
            } else if (jj_2_78(4)) {
                SimpleUntilStatement();
            } else if (jj_2_79(4)) {
                SimpleWhileStatement();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } else {
            ;
        }
    }

    final public void Object() throws ParseException {
        if (jj_2_81(4)) {
            jj_consume_token(REFERENCE);
        } else {
            ;
        }
        if (jj_2_82(4)) {
            jj_consume_token(SCALAR_NAME);
            numScalars++;
        } else if (jj_2_83(4)) {
            jj_consume_token(ARRAY_NAME);
            numArrays++;
        } else if (jj_2_84(4)) {
            jj_consume_token(HASH_NAME);
            numHashes++;
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void PrimaryPrefix() throws ParseException {
        if (jj_2_86(4)) {
            Literal();
        } else if (jj_2_87(4)) {
            InvokeSub();
        } else if (jj_2_88(2)) {
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
        } else if (jj_2_89(4)) {
            jj_consume_token(LPAREN);
            jj_consume_token(RPAREN);
        } else if (jj_2_90(4)) {
            Object();
        } else if (jj_2_91(4)) {
            jj_consume_token(IDENTIFIER);
            if (jj_2_85(4)) {
                jj_consume_token(150);
                jj_consume_token(IDENTIFIER);
            } else {
                ;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void PrimarySuffix() throws ParseException {
        if (jj_2_92(2)) {
            jj_consume_token(LBRACKET);
            Expression();
            jj_consume_token(RBRACKET);
            arrayGets++;
        } else if (jj_2_93(4)) {
            jj_consume_token(LBRACE);
            Expression();
            jj_consume_token(RBRACE);
            hashGets++;
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void Literal() throws ParseException {
        if (jj_2_94(4)) {
            jj_consume_token(INTEGER_LITERAL);
        } else if (jj_2_95(4)) {
            jj_consume_token(FLOATING_POINT_LITERAL);
        } else if (jj_2_96(4)) {
            jj_consume_token(STRING_LITERAL);
        } else if (jj_2_97(4)) {
            jj_consume_token(REGEX_LITERAL);
            regexes++;
        } else if (jj_2_98(4)) {
            jj_consume_token(CMD_LITERAL);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void InvokeSub() throws ParseException {
        jj_consume_token(IDENTIFIER);
        Arguments();
    }

    final public void Arguments() throws ParseException {
        if (jj_2_100(3)) {
            jj_consume_token(LPAREN);
            if (jj_2_99(4)) {
                ArgumentList();
            } else {
                ;
            }
            jj_consume_token(RPAREN);
        } else if (jj_2_101(4)) {
            ArgumentList();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void ArgumentList() throws ParseException {
        if (jj_2_102(4)) {
            Expression();
        } else if (jj_2_103(4)) {
            LocalVariableDeclaration();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        label_15:
        while (true) {
            if (jj_2_104(4)) {
                ;
            } else {
                break label_15;
            }
            jj_consume_token(COMMA);
            if (jj_2_105(4)) {
                Expression();
            } else if (jj_2_106(4)) {
                LocalVariableDeclaration();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /*
 * Statement syntax follows.
 */
    final public void Statement() throws ParseException {
        if (jj_2_107(2)) {
            LabeledStatement();
        } else if (jj_2_108(4)) {
            Block();
        } else if (jj_2_109(4)) {
            LocalVariableDeclaration();
        } else if (jj_2_110(4)) {
            jj_consume_token(BEGIN_);
            Block();
        } else if (jj_2_111(4)) {
            EmptyStatement();
        } else if (jj_2_112(3)) {
            StatementExpression();
            jj_consume_token(SEMICOLON);
            linesOfCode++;
        } else if (jj_2_113(4)) {
            InvokeSub();
        } else if (jj_2_114(4)) {
            SwitchStatement();
        } else if (jj_2_115(4)) {
            IfStatement();
        } else if (jj_2_116(4)) {
            UnlessStatement();
        } else if (jj_2_117(4)) {
            WhileStatement();
        } else if (jj_2_118(4)) {
            UntilStatement();
        } else if (jj_2_119(2)) {
            ForStatement();
        } else if (jj_2_120(4)) {
            ForeachStatement();
        } else if (jj_2_121(4)) {
            LocalSub();
        } else if (jj_2_122(4)) {
            Eval();
        } else if (jj_2_123(4)) {
            Sub();
        } else if (jj_2_124(4)) {
            ReturnStatement();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void LabeledStatement() throws ParseException {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        Statement();
    }

    final public void Block() throws ParseException {
        jj_consume_token(LBRACE);
        label_16:
        while (true) {
            if (jj_2_125(4)) {
                ;
            } else {
                break label_16;
            }
            BlockStatement();
        }
        jj_consume_token(RBRACE);
        linesOfCode++;
    }

    final public void BlockStatement() throws ParseException {
        if (jj_2_126(3)) {
            LocalVariableDeclaration();
            jj_consume_token(SEMICOLON);
            linesOfCode++;
        } else if (jj_2_127(4)) {
            Statement();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void VariableDeclarator() throws ParseException {
        Object();
        if (jj_2_128(4)) {
            AssignmentOperator();
            Expression();
        } else {
            ;
        }
    }

    final public void LocalVariableDeclaration() throws ParseException {
        jj_consume_token(MY);
        VariableDeclarator();
        label_17:
        while (true) {
            if (jj_2_129(4)) {
                ;
            } else {
                break label_17;
            }
            jj_consume_token(COMMA);
            VariableDeclarator();
        }
    }

    final public void EmptyStatement() throws ParseException {
        jj_consume_token(SEMICOLON);
        linesOfCode++;
    }

    final public void StatementExpression() throws ParseException {
        if (jj_2_134(4)) {
            PreIncrementExpression();
        } else if (jj_2_135(4)) {
            PreDecrementExpression();
        } else if (jj_2_136(4)) {
            PrimaryExpression();
            if (jj_2_133(4)) {
                if (jj_2_130(2)) {
                    jj_consume_token(INCR);
                } else if (jj_2_131(4)) {
                    jj_consume_token(DECR);
                } else if (jj_2_132(4)) {
                    AssignmentOperator();
                    Expression();
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            } else {
                ;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void SwitchStatement() throws ParseException {
        jj_consume_token(GIVEN);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_18:
        while (true) {
            if (jj_2_137(4)) {
                ;
            } else {
                break label_18;
            }
            SwitchLabel();
            Block();
        }
        numBranches++;
        jj_consume_token(RBRACE);
    }

    final public void SwitchLabel() throws ParseException {
        if (jj_2_138(4)) {
            jj_consume_token(WHEN);
            Expression();
        } else if (jj_2_139(4)) {
            jj_consume_token(DEFAULT_);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void SimpleIfStatement() throws ParseException {
        jj_consume_token(IF);
        Expression();
    }

    final public void IfStatement() throws ParseException {
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
        label_19:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case ELSIF: {
                    ;
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    break label_19;
            }
            jj_consume_token(ELSIF);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            Block();
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case ELSE: {
                jj_consume_token(ELSE);
                Block();
                break;
            }
            default:
                jj_la1[1] = jj_gen;
                ;
        }
        numBranches++;
    }

    final public void SimpleUnlessStatement() throws ParseException {
        jj_consume_token(UNLESS);
        Expression();
    }

    final public void UnlessStatement() throws ParseException {
        jj_consume_token(UNLESS);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case ELSIF: {
                jj_consume_token(ELSIF);
                jj_consume_token(LPAREN);
                Expression();
                jj_consume_token(RPAREN);
                Block();
                break;
            }
            default:
                jj_la1[2] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case ELSE: {
                jj_consume_token(ELSE);
                Block();
                break;
            }
            default:
                jj_la1[3] = jj_gen;
                ;
        }
        numBranches++;
    }

    final public void SimpleWhileStatement() throws ParseException {
        jj_consume_token(WHILE);
        Expression();
    }

    final public void WhileStatement() throws ParseException {
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
        if (jj_2_140(4)) {
            jj_consume_token(CONTINUE);
            Block();
        } else {
            ;
        }
        numCycles++;
    }

    final public void SimpleUntilStatement() throws ParseException {
        jj_consume_token(UNTIL);
        Expression();
    }

    final public void UntilStatement() throws ParseException {
        jj_consume_token(UNTIL);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
        if (jj_2_141(4)) {
            jj_consume_token(CONTINUE);
            Block();
        } else {
            ;
        }
        numCycles++;
    }

    final public void ForStatement() throws ParseException {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        if (jj_2_142(4)) {
            ForInit();
        } else {
            ;
        }
        jj_consume_token(SEMICOLON);
        if (jj_2_143(4)) {
            Expression();
        } else {
            ;
        }
        jj_consume_token(SEMICOLON);
        if (jj_2_144(4)) {
            ForUpdate();
        } else {
            ;
        }
        jj_consume_token(RPAREN);
        Block();
        numCycles++;
    }

    final public void SimpleForeachStatement() throws ParseException {
        jj_consume_token(FOREACH);
        Expression();
    }

    final public void ForeachStatement() throws ParseException {
        if (jj_2_145(4)) {
            jj_consume_token(FOREACH);
        } else if (jj_2_146(4)) {
            jj_consume_token(FOR);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        Object();
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
        numCycles++;
    }

    final public void ForInit() throws ParseException {
        if (jj_2_147(4)) {
            LocalVariableDeclaration();
        } else if (jj_2_148(4)) {
            StatementExpressionList();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void StatementExpressionList() throws ParseException {
        StatementExpression();
        label_20:
        while (true) {
            if (jj_2_149(4)) {
                ;
            } else {
                break label_20;
            }
            jj_consume_token(COMMA);
            StatementExpression();
        }
    }

    final public void ForUpdate() throws ParseException {
        StatementExpressionList();
    }

    final public void Sub() throws ParseException {
        jj_consume_token(SUB);
        if (jj_2_150(4)) {
            jj_consume_token(IDENTIFIER);
        } else {
            ;
        }
        Block();
        functions++;
    }

    final public void LocalSub() throws ParseException {
        jj_consume_token(LOCAL);
        Expression();
        jj_consume_token(ASSIGN);
        jj_consume_token(SUB);
        Block();
        functions++;
    }

    final public void Eval() throws ParseException {
        jj_consume_token(EVAL);
        Block();
    }

    final public void ReturnStatement() throws ParseException {
        jj_consume_token(RETURN);
        if (jj_2_151(4)) {
            Expression();
        } else {
            ;
        }
        jj_consume_token(SEMICOLON);
        linesOfCode++;
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    private boolean jj_2_33(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_33();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    private boolean jj_2_34(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_34();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    private boolean jj_2_35(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_35();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(34, xla);
        }
    }

    private boolean jj_2_36(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_36();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(35, xla);
        }
    }

    private boolean jj_2_37(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_37();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(36, xla);
        }
    }

    private boolean jj_2_38(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_38();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(37, xla);
        }
    }

    private boolean jj_2_39(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_39();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(38, xla);
        }
    }

    private boolean jj_2_40(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_40();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(39, xla);
        }
    }

    private boolean jj_2_41(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_41();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(40, xla);
        }
    }

    private boolean jj_2_42(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_42();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(41, xla);
        }
    }

    private boolean jj_2_43(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_43();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(42, xla);
        }
    }

    private boolean jj_2_44(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_44();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(43, xla);
        }
    }

    private boolean jj_2_45(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_45();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(44, xla);
        }
    }

    private boolean jj_2_46(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_46();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(45, xla);
        }
    }

    private boolean jj_2_47(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_47();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(46, xla);
        }
    }

    private boolean jj_2_48(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_48();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(47, xla);
        }
    }

    private boolean jj_2_49(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_49();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(48, xla);
        }
    }

    private boolean jj_2_50(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_50();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(49, xla);
        }
    }

    private boolean jj_2_51(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_51();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(50, xla);
        }
    }

    private boolean jj_2_52(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_52();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(51, xla);
        }
    }

    private boolean jj_2_53(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_53();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(52, xla);
        }
    }

    private boolean jj_2_54(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_54();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(53, xla);
        }
    }

    private boolean jj_2_55(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_55();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(54, xla);
        }
    }

    private boolean jj_2_56(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_56();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(55, xla);
        }
    }

    private boolean jj_2_57(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_57();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(56, xla);
        }
    }

    private boolean jj_2_58(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_58();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(57, xla);
        }
    }

    private boolean jj_2_59(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_59();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(58, xla);
        }
    }

    private boolean jj_2_60(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_60();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(59, xla);
        }
    }

    private boolean jj_2_61(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_61();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(60, xla);
        }
    }

    private boolean jj_2_62(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_62();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(61, xla);
        }
    }

    private boolean jj_2_63(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_63();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(62, xla);
        }
    }

    private boolean jj_2_64(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_64();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(63, xla);
        }
    }

    private boolean jj_2_65(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_65();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(64, xla);
        }
    }

    private boolean jj_2_66(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_66();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(65, xla);
        }
    }

    private boolean jj_2_67(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_67();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(66, xla);
        }
    }

    private boolean jj_2_68(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_68();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(67, xla);
        }
    }

    private boolean jj_2_69(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_69();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(68, xla);
        }
    }

    private boolean jj_2_70(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_70();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(69, xla);
        }
    }

    private boolean jj_2_71(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_71();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(70, xla);
        }
    }

    private boolean jj_2_72(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_72();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(71, xla);
        }
    }

    private boolean jj_2_73(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_73();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(72, xla);
        }
    }

    private boolean jj_2_74(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_74();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(73, xla);
        }
    }

    private boolean jj_2_75(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_75();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(74, xla);
        }
    }

    private boolean jj_2_76(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_76();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(75, xla);
        }
    }

    private boolean jj_2_77(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_77();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(76, xla);
        }
    }

    private boolean jj_2_78(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_78();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(77, xla);
        }
    }

    private boolean jj_2_79(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_79();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(78, xla);
        }
    }

    private boolean jj_2_80(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_80();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(79, xla);
        }
    }

    private boolean jj_2_81(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_81();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(80, xla);
        }
    }

    private boolean jj_2_82(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_82();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(81, xla);
        }
    }

    private boolean jj_2_83(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_83();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(82, xla);
        }
    }

    private boolean jj_2_84(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_84();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(83, xla);
        }
    }

    private boolean jj_2_85(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_85();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(84, xla);
        }
    }

    private boolean jj_2_86(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_86();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(85, xla);
        }
    }

    private boolean jj_2_87(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_87();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(86, xla);
        }
    }

    private boolean jj_2_88(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_88();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(87, xla);
        }
    }

    private boolean jj_2_89(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_89();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(88, xla);
        }
    }

    private boolean jj_2_90(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_90();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(89, xla);
        }
    }

    private boolean jj_2_91(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_91();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(90, xla);
        }
    }

    private boolean jj_2_92(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_92();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(91, xla);
        }
    }

    private boolean jj_2_93(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_93();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(92, xla);
        }
    }

    private boolean jj_2_94(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_94();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(93, xla);
        }
    }

    private boolean jj_2_95(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_95();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(94, xla);
        }
    }

    private boolean jj_2_96(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_96();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(95, xla);
        }
    }

    private boolean jj_2_97(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_97();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(96, xla);
        }
    }

    private boolean jj_2_98(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_98();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(97, xla);
        }
    }

    private boolean jj_2_99(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_99();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(98, xla);
        }
    }

    private boolean jj_2_100(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_100();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(99, xla);
        }
    }

    private boolean jj_2_101(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_101();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(100, xla);
        }
    }

    private boolean jj_2_102(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_102();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(101, xla);
        }
    }

    private boolean jj_2_103(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_103();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(102, xla);
        }
    }

    private boolean jj_2_104(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_104();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(103, xla);
        }
    }

    private boolean jj_2_105(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_105();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(104, xla);
        }
    }

    private boolean jj_2_106(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_106();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(105, xla);
        }
    }

    private boolean jj_2_107(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_107();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(106, xla);
        }
    }

    private boolean jj_2_108(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_108();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(107, xla);
        }
    }

    private boolean jj_2_109(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_109();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(108, xla);
        }
    }

    private boolean jj_2_110(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_110();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(109, xla);
        }
    }

    private boolean jj_2_111(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_111();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(110, xla);
        }
    }

    private boolean jj_2_112(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_112();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(111, xla);
        }
    }

    private boolean jj_2_113(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_113();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(112, xla);
        }
    }

    private boolean jj_2_114(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_114();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(113, xla);
        }
    }

    private boolean jj_2_115(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_115();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(114, xla);
        }
    }

    private boolean jj_2_116(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_116();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(115, xla);
        }
    }

    private boolean jj_2_117(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_117();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(116, xla);
        }
    }

    private boolean jj_2_118(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_118();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(117, xla);
        }
    }

    private boolean jj_2_119(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_119();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(118, xla);
        }
    }

    private boolean jj_2_120(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_120();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(119, xla);
        }
    }

    private boolean jj_2_121(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_121();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(120, xla);
        }
    }

    private boolean jj_2_122(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_122();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(121, xla);
        }
    }

    private boolean jj_2_123(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_123();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(122, xla);
        }
    }

    private boolean jj_2_124(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_124();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(123, xla);
        }
    }

    private boolean jj_2_125(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_125();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(124, xla);
        }
    }

    private boolean jj_2_126(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_126();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(125, xla);
        }
    }

    private boolean jj_2_127(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_127();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(126, xla);
        }
    }

    private boolean jj_2_128(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_128();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(127, xla);
        }
    }

    private boolean jj_2_129(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_129();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(128, xla);
        }
    }

    private boolean jj_2_130(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_130();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(129, xla);
        }
    }

    private boolean jj_2_131(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_131();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(130, xla);
        }
    }

    private boolean jj_2_132(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_132();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(131, xla);
        }
    }

    private boolean jj_2_133(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_133();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(132, xla);
        }
    }

    private boolean jj_2_134(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_134();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(133, xla);
        }
    }

    private boolean jj_2_135(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_135();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(134, xla);
        }
    }

    private boolean jj_2_136(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_136();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(135, xla);
        }
    }

    private boolean jj_2_137(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_137();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(136, xla);
        }
    }

    private boolean jj_2_138(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_138();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(137, xla);
        }
    }

    private boolean jj_2_139(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_139();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(138, xla);
        }
    }

    private boolean jj_2_140(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_140();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(139, xla);
        }
    }

    private boolean jj_2_141(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_141();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(140, xla);
        }
    }

    private boolean jj_2_142(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_142();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(141, xla);
        }
    }

    private boolean jj_2_143(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_143();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(142, xla);
        }
    }

    private boolean jj_2_144(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_144();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(143, xla);
        }
    }

    private boolean jj_2_145(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_145();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(144, xla);
        }
    }

    private boolean jj_2_146(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_146();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(145, xla);
        }
    }

    private boolean jj_2_147(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_147();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(146, xla);
        }
    }

    private boolean jj_2_148(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_148();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(147, xla);
        }
    }

    private boolean jj_2_149(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_149();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(148, xla);
        }
    }

    private boolean jj_2_150(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_150();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(149, xla);
        }
    }

    private boolean jj_2_151(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_151();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(150, xla);
        }
    }

    private boolean jj_3R_68() {
        if (jj_3R_49()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_128()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_127() {
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_67() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_126()) {
            jj_scanpos = xsp;
            if (jj_3_127()) return true;
        }
        return false;
    }

    private boolean jj_3_125() {
        if (jj_3R_67()) return true;
        return false;
    }

    private boolean jj_3_126() {
        if (jj_3R_51()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3_106() {
        if (jj_3R_51()) return true;
        return false;
    }

    private boolean jj_3R_53() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_125()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_52() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3_105() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3_124() {
        if (jj_3R_66()) return true;
        return false;
    }

    private boolean jj_3_123() {
        if (jj_3R_65()) return true;
        return false;
    }

    private boolean jj_3_104() {
        if (jj_scan_token(COMMA)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_105()) {
            jj_scanpos = xsp;
            if (jj_3_106()) return true;
        }
        return false;
    }

    private boolean jj_3_122() {
        if (jj_3R_64()) return true;
        return false;
    }

    private boolean jj_3_121() {
        if (jj_3R_63()) return true;
        return false;
    }

    private boolean jj_3_120() {
        if (jj_3R_62()) return true;
        return false;
    }

    private boolean jj_3_119() {
        if (jj_3R_61()) return true;
        return false;
    }

    private boolean jj_3_118() {
        if (jj_3R_60()) return true;
        return false;
    }

    private boolean jj_3_117() {
        if (jj_3R_59()) return true;
        return false;
    }

    private boolean jj_3_116() {
        if (jj_3R_58()) return true;
        return false;
    }

    private boolean jj_3_115() {
        if (jj_3R_57()) return true;
        return false;
    }

    private boolean jj_3_114() {
        if (jj_3R_56()) return true;
        return false;
    }

    private boolean jj_3_113() {
        if (jj_3R_48()) return true;
        return false;
    }

    private boolean jj_3_112() {
        if (jj_3R_55()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3_111() {
        if (jj_3R_54()) return true;
        return false;
    }

    private boolean jj_3_110() {
        if (jj_scan_token(BEGIN_)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3_109() {
        if (jj_3R_51()) return true;
        return false;
    }

    private boolean jj_3_103() {
        if (jj_3R_51()) return true;
        return false;
    }

    private boolean jj_3_108() {
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_21() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_107()) {
            jj_scanpos = xsp;
            if (jj_3_108()) {
                jj_scanpos = xsp;
                if (jj_3_109()) {
                    jj_scanpos = xsp;
                    if (jj_3_110()) {
                        jj_scanpos = xsp;
                        if (jj_3_111()) {
                            jj_scanpos = xsp;
                            if (jj_3_112()) {
                                jj_scanpos = xsp;
                                if (jj_3_113()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_114()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_115()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_116()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_117()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_118()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3_119()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3_120()) {
                                                                jj_scanpos = xsp;
                                                                if (jj_3_121()) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3_122()) {
                                                                        jj_scanpos = xsp;
                                                                        if (jj_3_123()) {
                                                                            jj_scanpos = xsp;
                                                                            if (jj_3_124()) return true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_107() {
        if (jj_3R_52()) return true;
        return false;
    }

    private boolean jj_3_102() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_50() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_102()) {
            jj_scanpos = xsp;
            if (jj_3_103()) return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_104()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_99() {
        if (jj_3R_50()) return true;
        return false;
    }

    private boolean jj_3_101() {
        if (jj_3R_50()) return true;
        return false;
    }

    private boolean jj_3R_75() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_100()) {
            jj_scanpos = xsp;
            if (jj_3_101()) return true;
        }
        return false;
    }

    private boolean jj_3_100() {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_99()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_3R_75()) return true;
        return false;
    }

    private boolean jj_3_98() {
        if (jj_scan_token(CMD_LITERAL)) return true;
        return false;
    }

    private boolean jj_3_97() {
        if (jj_scan_token(REGEX_LITERAL)) return true;
        return false;
    }

    private boolean jj_3_96() {
        if (jj_scan_token(STRING_LITERAL)) return true;
        return false;
    }

    private boolean jj_3_77() {
        if (jj_3R_44()) return true;
        return false;
    }

    private boolean jj_3_95() {
        if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
        return false;
    }

    private boolean jj_3R_47() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_94()) {
            jj_scanpos = xsp;
            if (jj_3_95()) {
                jj_scanpos = xsp;
                if (jj_3_96()) {
                    jj_scanpos = xsp;
                    if (jj_3_97()) {
                        jj_scanpos = xsp;
                        if (jj_3_98()) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_94() {
        if (jj_scan_token(INTEGER_LITERAL)) return true;
        return false;
    }

    private boolean jj_3_85() {
        if (jj_scan_token(150)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3_93() {
        if (jj_scan_token(LBRACE)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_41() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_92()) {
            jj_scanpos = xsp;
            if (jj_3_93()) return true;
        }
        return false;
    }

    private boolean jj_3_92() {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private boolean jj_3_91() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_85()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_90() {
        if (jj_3R_49()) return true;
        return false;
    }

    private boolean jj_3_79() {
        if (jj_3R_46()) return true;
        return false;
    }

    private boolean jj_3_72() {
        if (jj_scan_token(DECR)) return true;
        return false;
    }

    private boolean jj_3_76() {
        if (jj_3R_43()) return true;
        return false;
    }

    private boolean jj_3_89() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3_88() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3_87() {
        if (jj_3R_48()) return true;
        return false;
    }

    private boolean jj_3R_77() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_86()) {
            jj_scanpos = xsp;
            if (jj_3_87()) {
                jj_scanpos = xsp;
                if (jj_3_88()) {
                    jj_scanpos = xsp;
                    if (jj_3_89()) {
                        jj_scanpos = xsp;
                        if (jj_3_90()) {
                            jj_scanpos = xsp;
                            if (jj_3_91()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_86() {
        if (jj_3R_47()) return true;
        return false;
    }

    private boolean jj_3_74() {
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3_84() {
        if (jj_scan_token(HASH_NAME)) return true;
        return false;
    }

    private boolean jj_3_83() {
        if (jj_scan_token(ARRAY_NAME)) return true;
        return false;
    }

    private boolean jj_3_82() {
        if (jj_scan_token(SCALAR_NAME)) return true;
        return false;
    }

    private boolean jj_3_71() {
        if (jj_scan_token(INCR)) return true;
        return false;
    }

    private boolean jj_3_73() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_71()) {
            jj_scanpos = xsp;
            if (jj_3_72()) return true;
        }
        return false;
    }

    private boolean jj_3_81() {
        if (jj_scan_token(REFERENCE)) return true;
        return false;
    }

    private boolean jj_3R_49() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_81()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3_82()) {
            jj_scanpos = xsp;
            if (jj_3_83()) {
                jj_scanpos = xsp;
                if (jj_3_84()) return true;
            }
        }
        return false;
    }

    private boolean jj_3_78() {
        if (jj_3R_45()) return true;
        return false;
    }

    private boolean jj_3_75() {
        if (jj_3R_42()) return true;
        return false;
    }

    private boolean jj_3_80() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_75()) {
            jj_scanpos = xsp;
            if (jj_3_76()) {
                jj_scanpos = xsp;
                if (jj_3_77()) {
                    jj_scanpos = xsp;
                    if (jj_3_78()) {
                        jj_scanpos = xsp;
                        if (jj_3_79()) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_76() {
        if (jj_3R_77()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_74()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3_80()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_55() {
        if (jj_scan_token(DOUBLE_ARROW)) return true;
        return false;
    }

    private boolean jj_3R_69() {
        if (jj_3R_76()) return true;
        return false;
    }

    private boolean jj_3_60() {
        if (jj_scan_token(POWER)) return true;
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_3R_69()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_73()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_68() {
        if (jj_scan_token(BANG)) return true;
        return false;
    }

    private boolean jj_3_54() {
        if (jj_scan_token(CONCAT)) return true;
        return false;
    }

    private boolean jj_3_59() {
        if (jj_scan_token(REM)) return true;
        return false;
    }

    private boolean jj_3_70() {
        if (jj_3R_40()) return true;
        return false;
    }

    private boolean jj_3_67() {
        if (jj_scan_token(TILDE)) return true;
        return false;
    }

    private boolean jj_3_53() {
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean jj_3R_39() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_69()) {
            jj_scanpos = xsp;
            if (jj_3_70()) return true;
        }
        return false;
    }

    private boolean jj_3_69() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_67()) {
            jj_scanpos = xsp;
            if (jj_3_68()) return true;
        }
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3_58() {
        if (jj_scan_token(149)) return true;
        return false;
    }

    private boolean jj_3_42() {
        if (jj_scan_token(GE)) return true;
        return false;
    }

    private boolean jj_3_52() {
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean jj_3_47() {
        if (jj_scan_token(SGE)) return true;
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_scan_token(DECR)) return true;
        if (jj_3R_69()) return true;
        return false;
    }

    private boolean jj_3_51() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_52()) {
            jj_scanpos = xsp;
            if (jj_3_53()) {
                jj_scanpos = xsp;
                if (jj_3_54()) {
                    jj_scanpos = xsp;
                    if (jj_3_55()) return true;
                }
            }
        }
        if (jj_3R_35()) return true;
        return false;
    }

    private boolean jj_3_57() {
        if (jj_scan_token(STAR)) return true;
        return false;
    }

    private boolean jj_3_41() {
        if (jj_scan_token(LE)) return true;
        return false;
    }

    private boolean jj_3_56() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_57()) {
            jj_scanpos = xsp;
            if (jj_3_58()) {
                jj_scanpos = xsp;
                if (jj_3_59()) {
                    jj_scanpos = xsp;
                    if (jj_3_60()) return true;
                }
            }
        }
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3_50() {
        if (jj_scan_token(RSIGNEDSHIFT)) return true;
        return false;
    }

    private boolean jj_3R_37() {
        if (jj_scan_token(INCR)) return true;
        if (jj_3R_69()) return true;
        return false;
    }

    private boolean jj_3_46() {
        if (jj_scan_token(SLE)) return true;
        return false;
    }

    private boolean jj_3_40() {
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private boolean jj_3_62() {
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean jj_3_49() {
        if (jj_scan_token(LSHIFT)) return true;
        return false;
    }

    private boolean jj_3_66() {
        if (jj_3R_39()) return true;
        return false;
    }

    private boolean jj_3_48() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_49()) {
            jj_scanpos = xsp;
            if (jj_3_50()) return true;
        }
        if (jj_3R_34()) return true;
        return false;
    }

    private boolean jj_3_45() {
        if (jj_scan_token(SGT)) return true;
        return false;
    }

    private boolean jj_3_65() {
        if (jj_3R_38()) return true;
        return false;
    }

    private boolean jj_3_39() {
        if (jj_scan_token(LT)) return true;
        return false;
    }

    private boolean jj_3_151() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3_64() {
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3_61() {
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean jj_3_36() {
        if (jj_scan_token(SNE)) return true;
        return false;
    }

    private boolean jj_3_38() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_39()) {
            jj_scanpos = xsp;
            if (jj_3_40()) {
                jj_scanpos = xsp;
                if (jj_3_41()) {
                    jj_scanpos = xsp;
                    if (jj_3_42()) return true;
                }
            }
        }
        if (jj_3R_32()) return true;
        return false;
    }

    private boolean jj_3R_36() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_63()) {
            jj_scanpos = xsp;
            if (jj_3_64()) {
                jj_scanpos = xsp;
                if (jj_3_65()) {
                    jj_scanpos = xsp;
                    if (jj_3_66()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_63() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_61()) {
            jj_scanpos = xsp;
            if (jj_3_62()) return true;
        }
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3_44() {
        if (jj_scan_token(SLT)) return true;
        return false;
    }

    private boolean jj_3_43() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_44()) {
            jj_scanpos = xsp;
            if (jj_3_45()) {
                jj_scanpos = xsp;
                if (jj_3_46()) {
                    jj_scanpos = xsp;
                    if (jj_3_47()) return true;
                }
            }
        }
        if (jj_3R_33()) return true;
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_3R_36()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_56()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_35() {
        if (jj_scan_token(SEQ)) return true;
        return false;
    }

    private boolean jj_3R_66() {
        if (jj_scan_token(RETURN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_151()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3_37() {
        if (jj_scan_token(TEMPLATE_NOT_CMP)) return true;
        if (jj_3R_31()) return true;
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_3R_35()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_51()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_34() {
        if (jj_scan_token(NE)) return true;
        return false;
    }

    private boolean jj_3_144() {
        if (jj_3R_72()) return true;
        return false;
    }

    private boolean jj_3_17() {
        if (jj_scan_token(ORASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_64() {
        if (jj_scan_token(EVAL)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3_149() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_55()) return true;
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_3R_34()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_48()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_150() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3_33() {
        if (jj_scan_token(EQ)) return true;
        return false;
    }

    private boolean jj_3R_63() {
        if (jj_scan_token(LOCAL)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        if (jj_scan_token(SUB)) return true;
        return false;
    }

    private boolean jj_3_16() {
        if (jj_scan_token(XORASSIGN)) return true;
        return false;
    }

    private boolean jj_3_32() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_33()) {
            jj_scanpos = xsp;
            if (jj_3_34()) {
                jj_scanpos = xsp;
                if (jj_3_35()) {
                    jj_scanpos = xsp;
                    if (jj_3_36()) return true;
                }
            }
        }
        if (jj_3R_30()) return true;
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_3R_33()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_43()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_31() {
        if (jj_scan_token(BIT_AND)) return true;
        if (jj_3R_29()) return true;
        return false;
    }

    private boolean jj_3R_65() {
        if (jj_scan_token(SUB)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_150()) jj_scanpos = xsp;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3_15() {
        if (jj_scan_token(ANDASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_32()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_38()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_28() {
        if (jj_scan_token(AND)) return true;
        return false;
    }

    private boolean jj_3R_72() {
        if (jj_3R_73()) return true;
        return false;
    }

    private boolean jj_3_29() {
        if (jj_scan_token(BIT_OR)) return true;
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3_25() {
        if (jj_scan_token(OR)) return true;
        return false;
    }

    private boolean jj_3_143() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_31()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_37()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_14() {
        if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
        return false;
    }

    private boolean jj_3_30() {
        if (jj_scan_token(XOR)) return true;
        if (jj_3R_28()) return true;
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_3R_55()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_149()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_146() {
        if (jj_scan_token(FOR)) return true;
        return false;
    }

    private boolean jj_3_27() {
        if (jj_scan_token(SC_AND)) return true;
        return false;
    }

    private boolean jj_3_26() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_27()) {
            jj_scanpos = xsp;
            if (jj_3_28()) return true;
        }
        if (jj_3R_26()) return true;
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_3R_30()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_32()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_24() {
        if (jj_scan_token(SC_OR)) return true;
        return false;
    }

    private boolean jj_3_23() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_24()) {
            jj_scanpos = xsp;
            if (jj_3_25()) return true;
        }
        if (jj_3R_25()) return true;
        return false;
    }

    private boolean jj_3_13() {
        if (jj_scan_token(LSHIFTASSIGN)) return true;
        return false;
    }

    private boolean jj_3_148() {
        if (jj_3R_73()) return true;
        return false;
    }

    private boolean jj_3R_71() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_147()) {
            jj_scanpos = xsp;
            if (jj_3_148()) return true;
        }
        return false;
    }

    private boolean jj_3_147() {
        if (jj_3R_51()) return true;
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_29()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_31()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_22() {
        if (jj_scan_token(HOOK)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_24()) return true;
        return false;
    }

    private boolean jj_3_145() {
        if (jj_scan_token(FOREACH)) return true;
        return false;
    }

    private boolean jj_3_12() {
        if (jj_scan_token(MINUSASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_62() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_145()) {
            jj_scanpos = xsp;
            if (jj_3_146()) return true;
        }
        if (jj_3R_49()) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3_142() {
        if (jj_3R_71()) return true;
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_3R_28()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_30()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_11() {
        if (jj_scan_token(PLUSASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_scan_token(FOREACH)) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_27()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_29()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_21() {
        if (jj_scan_token(REPEATASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_61() {
        if (jj_scan_token(FOR)) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_142()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        xsp = jj_scanpos;
        if (jj_3_143()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3_10() {
        if (jj_scan_token(REMASSIGN)) return true;
        return false;
    }

    private boolean jj_3_141() {
        if (jj_scan_token(CONTINUE)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_3R_26()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_26()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_60() {
        if (jj_scan_token(UNTIL)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3_20() {
        if (jj_scan_token(CONCATASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_74() {
        if (jj_3R_25()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_23()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_9() {
        if (jj_scan_token(SLASHASSIGN)) return true;
        return false;
    }

    private boolean jj_3_19() {
        if (jj_scan_token(TEMPLATE_CMP)) return true;
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_scan_token(UNTIL)) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_3R_74()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_22()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_140() {
        if (jj_scan_token(CONTINUE)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3_8() {
        if (jj_scan_token(STARASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_scan_token(WHILE)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3_18() {
        if (jj_scan_token(POWASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_7()) {
            jj_scanpos = xsp;
            if (jj_3_8()) {
                jj_scanpos = xsp;
                if (jj_3_9()) {
                    jj_scanpos = xsp;
                    if (jj_3_10()) {
                        jj_scanpos = xsp;
                        if (jj_3_11()) {
                            jj_scanpos = xsp;
                            if (jj_3_12()) {
                                jj_scanpos = xsp;
                                if (jj_3_13()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_14()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_15()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_16()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_17()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_18()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3_19()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3_20()) {
                                                                jj_scanpos = xsp;
                                                                if (jj_3_21()) return true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_7() {
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private boolean jj_3_6() {
        if (jj_3R_22()) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_scan_token(WHILE)) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_3R_24()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_6()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_58() {
        if (jj_scan_token(UNLESS)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_scan_token(UNLESS)) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3_3() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_4()) {
            jj_scanpos = xsp;
            if (jj_3_5()) return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_scan_token(POD)) return true;
        return false;
    }

    private boolean jj_3_2() {
        if (jj_scan_token(148)) return true;
        return false;
    }

    private boolean jj_3_1() {
        if (jj_scan_token(POD)) return true;
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_scan_token(IF)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_scan_token(IF)) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3_139() {
        if (jj_scan_token(DEFAULT_)) return true;
        return false;
    }

    private boolean jj_3R_70() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_138()) {
            jj_scanpos = xsp;
            if (jj_3_139()) return true;
        }
        return false;
    }

    private boolean jj_3_138() {
        if (jj_scan_token(WHEN)) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3_137() {
        if (jj_3R_70()) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_scan_token(GIVEN)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_23()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3_132() {
        if (jj_3R_22()) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3_131() {
        if (jj_scan_token(DECR)) return true;
        return false;
    }

    private boolean jj_3_129() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_68()) return true;
        return false;
    }

    private boolean jj_3_130() {
        if (jj_scan_token(INCR)) return true;
        return false;
    }

    private boolean jj_3_133() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_130()) {
            jj_scanpos = xsp;
            if (jj_3_131()) {
                jj_scanpos = xsp;
                if (jj_3_132()) return true;
            }
        }
        return false;
    }

    private boolean jj_3_136() {
        if (jj_3R_69()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_133()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_135() {
        if (jj_3R_38()) return true;
        return false;
    }

    private boolean jj_3R_55() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_134()) {
            jj_scanpos = xsp;
            if (jj_3_135()) {
                jj_scanpos = xsp;
                if (jj_3_136()) return true;
            }
        }
        return false;
    }

    private boolean jj_3_134() {
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3R_54() {
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3_128() {
        if (jj_3R_22()) return true;
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_51() {
        if (jj_scan_token(MY)) return true;
        if (jj_3R_68()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_129()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public PerlParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[4];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;
    static private int[] jj_la1_4;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
        jj_la1_init_4();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x100000, 0x80000, 0x100000, 0x80000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[]{0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_4() {
        jj_la1_4 = new int[]{0x0, 0x0, 0x0, 0x0,};
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[151];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public PerlParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public PerlParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new PerlParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public PerlParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new PerlParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public PerlParser(PerlParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(PerlParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[151];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 4; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                    if ((jj_la1_4[i] & (1 << j)) != 0) {
                        la1tokens[128 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 151; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 151; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3_16();
                                break;
                            case 16:
                                jj_3_17();
                                break;
                            case 17:
                                jj_3_18();
                                break;
                            case 18:
                                jj_3_19();
                                break;
                            case 19:
                                jj_3_20();
                                break;
                            case 20:
                                jj_3_21();
                                break;
                            case 21:
                                jj_3_22();
                                break;
                            case 22:
                                jj_3_23();
                                break;
                            case 23:
                                jj_3_24();
                                break;
                            case 24:
                                jj_3_25();
                                break;
                            case 25:
                                jj_3_26();
                                break;
                            case 26:
                                jj_3_27();
                                break;
                            case 27:
                                jj_3_28();
                                break;
                            case 28:
                                jj_3_29();
                                break;
                            case 29:
                                jj_3_30();
                                break;
                            case 30:
                                jj_3_31();
                                break;
                            case 31:
                                jj_3_32();
                                break;
                            case 32:
                                jj_3_33();
                                break;
                            case 33:
                                jj_3_34();
                                break;
                            case 34:
                                jj_3_35();
                                break;
                            case 35:
                                jj_3_36();
                                break;
                            case 36:
                                jj_3_37();
                                break;
                            case 37:
                                jj_3_38();
                                break;
                            case 38:
                                jj_3_39();
                                break;
                            case 39:
                                jj_3_40();
                                break;
                            case 40:
                                jj_3_41();
                                break;
                            case 41:
                                jj_3_42();
                                break;
                            case 42:
                                jj_3_43();
                                break;
                            case 43:
                                jj_3_44();
                                break;
                            case 44:
                                jj_3_45();
                                break;
                            case 45:
                                jj_3_46();
                                break;
                            case 46:
                                jj_3_47();
                                break;
                            case 47:
                                jj_3_48();
                                break;
                            case 48:
                                jj_3_49();
                                break;
                            case 49:
                                jj_3_50();
                                break;
                            case 50:
                                jj_3_51();
                                break;
                            case 51:
                                jj_3_52();
                                break;
                            case 52:
                                jj_3_53();
                                break;
                            case 53:
                                jj_3_54();
                                break;
                            case 54:
                                jj_3_55();
                                break;
                            case 55:
                                jj_3_56();
                                break;
                            case 56:
                                jj_3_57();
                                break;
                            case 57:
                                jj_3_58();
                                break;
                            case 58:
                                jj_3_59();
                                break;
                            case 59:
                                jj_3_60();
                                break;
                            case 60:
                                jj_3_61();
                                break;
                            case 61:
                                jj_3_62();
                                break;
                            case 62:
                                jj_3_63();
                                break;
                            case 63:
                                jj_3_64();
                                break;
                            case 64:
                                jj_3_65();
                                break;
                            case 65:
                                jj_3_66();
                                break;
                            case 66:
                                jj_3_67();
                                break;
                            case 67:
                                jj_3_68();
                                break;
                            case 68:
                                jj_3_69();
                                break;
                            case 69:
                                jj_3_70();
                                break;
                            case 70:
                                jj_3_71();
                                break;
                            case 71:
                                jj_3_72();
                                break;
                            case 72:
                                jj_3_73();
                                break;
                            case 73:
                                jj_3_74();
                                break;
                            case 74:
                                jj_3_75();
                                break;
                            case 75:
                                jj_3_76();
                                break;
                            case 76:
                                jj_3_77();
                                break;
                            case 77:
                                jj_3_78();
                                break;
                            case 78:
                                jj_3_79();
                                break;
                            case 79:
                                jj_3_80();
                                break;
                            case 80:
                                jj_3_81();
                                break;
                            case 81:
                                jj_3_82();
                                break;
                            case 82:
                                jj_3_83();
                                break;
                            case 83:
                                jj_3_84();
                                break;
                            case 84:
                                jj_3_85();
                                break;
                            case 85:
                                jj_3_86();
                                break;
                            case 86:
                                jj_3_87();
                                break;
                            case 87:
                                jj_3_88();
                                break;
                            case 88:
                                jj_3_89();
                                break;
                            case 89:
                                jj_3_90();
                                break;
                            case 90:
                                jj_3_91();
                                break;
                            case 91:
                                jj_3_92();
                                break;
                            case 92:
                                jj_3_93();
                                break;
                            case 93:
                                jj_3_94();
                                break;
                            case 94:
                                jj_3_95();
                                break;
                            case 95:
                                jj_3_96();
                                break;
                            case 96:
                                jj_3_97();
                                break;
                            case 97:
                                jj_3_98();
                                break;
                            case 98:
                                jj_3_99();
                                break;
                            case 99:
                                jj_3_100();
                                break;
                            case 100:
                                jj_3_101();
                                break;
                            case 101:
                                jj_3_102();
                                break;
                            case 102:
                                jj_3_103();
                                break;
                            case 103:
                                jj_3_104();
                                break;
                            case 104:
                                jj_3_105();
                                break;
                            case 105:
                                jj_3_106();
                                break;
                            case 106:
                                jj_3_107();
                                break;
                            case 107:
                                jj_3_108();
                                break;
                            case 108:
                                jj_3_109();
                                break;
                            case 109:
                                jj_3_110();
                                break;
                            case 110:
                                jj_3_111();
                                break;
                            case 111:
                                jj_3_112();
                                break;
                            case 112:
                                jj_3_113();
                                break;
                            case 113:
                                jj_3_114();
                                break;
                            case 114:
                                jj_3_115();
                                break;
                            case 115:
                                jj_3_116();
                                break;
                            case 116:
                                jj_3_117();
                                break;
                            case 117:
                                jj_3_118();
                                break;
                            case 118:
                                jj_3_119();
                                break;
                            case 119:
                                jj_3_120();
                                break;
                            case 120:
                                jj_3_121();
                                break;
                            case 121:
                                jj_3_122();
                                break;
                            case 122:
                                jj_3_123();
                                break;
                            case 123:
                                jj_3_124();
                                break;
                            case 124:
                                jj_3_125();
                                break;
                            case 125:
                                jj_3_126();
                                break;
                            case 126:
                                jj_3_127();
                                break;
                            case 127:
                                jj_3_128();
                                break;
                            case 128:
                                jj_3_129();
                                break;
                            case 129:
                                jj_3_130();
                                break;
                            case 130:
                                jj_3_131();
                                break;
                            case 131:
                                jj_3_132();
                                break;
                            case 132:
                                jj_3_133();
                                break;
                            case 133:
                                jj_3_134();
                                break;
                            case 134:
                                jj_3_135();
                                break;
                            case 135:
                                jj_3_136();
                                break;
                            case 136:
                                jj_3_137();
                                break;
                            case 137:
                                jj_3_138();
                                break;
                            case 138:
                                jj_3_139();
                                break;
                            case 139:
                                jj_3_140();
                                break;
                            case 140:
                                jj_3_141();
                                break;
                            case 141:
                                jj_3_142();
                                break;
                            case 142:
                                jj_3_143();
                                break;
                            case 143:
                                jj_3_144();
                                break;
                            case 144:
                                jj_3_145();
                                break;
                            case 145:
                                jj_3_146();
                                break;
                            case 146:
                                jj_3_147();
                                break;
                            case 147:
                                jj_3_148();
                                break;
                            case 148:
                                jj_3_149();
                                break;
                            case 149:
                                jj_3_150();
                                break;
                            case 150:
                                jj_3_151();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}

/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. GoGrammar.jj */
/*@egen*//**
 * @author Alexey Chernyshov
 */

options
{
  STATIC = false;
  IGNORE_CASE = false;
                                                                                                 
                 
}

PARSER_BEGIN(GoParser)

package com.github.alexey_n_chernyshov;

import java.io.InputStream;

/**
 * Parses go lang source and produces AST.
 * Go lang source should be preprocessed before parsing to be ensure that
 * all necessary semicolons (;) are inserted.
 */
public class GoParser/*@bgen(jjtree)*/implements GoParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTGoParserState jjtree = new JJTGoParserState();

/*@egen*/
    /**
      * Parses input stream and returns root node.
      */
    public SimpleNode getRoot() throws ParseException {
        return SourceFile();
    }
}

PARSER_END(GoParser)

SKIP:
{
/* Whitespace */
  "\t"
| "\n"
| "\r"
| " "
/* comments */
| < "//" (~["\r", "\n"])* >
| < "/*" > : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >
}

/* tokens are */
TOKEN:
{
/* keywords */
  <TOKEN_BREAK: "break">
| <TOKEN_DEFAULT: "default">
| <TOKEN_FUNC: "func">
| <TOKEN_INTERFACE: "interface">
| <TOKEN_SELECT: "select">
| <TOKEN_CASE: "case">
| <TOKEN_DEFER: "defer">
| <TOKEN_GO: "go">
| <TOKEN_MAP: "map">
| <TOKEN_STRUCT: "struct">
| <TOKEN_CHAN: "chan">
| <TOKEN_ELSE: "else">
| <TOKEN_GOTO: "goto">
| <TOKEN_PACKAGE: "package">
| <TOKEN_SWITCH: "switch">
| <TOKEN_CONST: "const">
| <TOKEN_FALLTROUGH: "fallthrough">
| <TOKEN_IF: "if">
| <TOKEN_RANGE: "range">
| <TOKEN_TYPE: "type">
| <TOKEN_CONTINUE: "continue">
| <TOKEN_FOR: "for">
| <TOKEN_IMPORT: "import">
| <TOKEN_RETURN: "return">
| <TOKEN_VAR: "var">

/* operators and delimiters */
| <TOKEN_PLUS: "+">
| <TOKEN_AND: "&">
| <TOKEN_PLUSEQUAL: "+=">
| <TOKEN_ANDEQUAL: "&=">
| <TOKEN_ANDAND: "&&">
| <TOKEN_EQUALEQUAL: "==">
| <TOKEN_NOTEQUAL: "!=">
| <TOKEN_LPAREN: "(">
| <TOKEN_RPAREN: ")">
| <TOKEN_MINUS: "-">
| <TOKEN_OR: "|">
| <TOKEN_MINUSEQUAL: "-=">
| <TOKEN_OREQUAL: "|=">
| <TOKEN_OROR: "||">
| <TOKEN_LESS: "<">
| <TOKEN_LESSOREQUAL: "<=">
| <TOKEN_LSQUAREPAREN: "[">
| <TOKEN_RSQUAREPAREN: "]">
| <TOKEN_MULT: "*">
| <TOKEN_XOR: "^">
| <TOKEN_MULEQUAL: "*=">
| <TOKEN_XOREQUAL: "^=">
| <TOKEN_LESSMINUS: "<-">
| <TOKEN_GREATER: ">">
| <TOKEN_GREATEREQUAL: ">=">
| <TOKEN_LCURLYBRACE: "{">
| <TOKEN_RCURLYBRACE: "}">
| <TOKEN_DIV: "/">
| <TOKEN_LESSLESS: "<<">
| <TOKEN_DIVEQUAL: "/=">
| <TOKEN_LESSLESSEQUAL: "<<=">
| <TOKEN_PLUSPLUS: "++">
| <TOKEN_EQUAL: "=">
| <TOKEN_COLONEQUAL: ":=">
| <TOKEN_COMMA: ",">
| <TOKEN_SEMICOLON: ";">
| <TOKEN_PERCENT: "%">
| <TOKEN_GREATERGREATER: ">>">
| <TOKEN_PERCENTEQUAL: "%=">
| <TOKEN_GREATERGREATEREQUAL: ">>=">
| <TOKEN_MINNUSMINUS: "--">
| <TOKEN_EXCLAMATION: "!">
| <TOKEN_ELLIPSIS: "...">
| <TOKEN_DOT: ".">
| <TOKEN_COLON: ":">
| <TOKEN_ANDXOR: "&^">
| <TOKEN_ANDXOREQUAL: "&^=">

/* Literals */
| <TOKEN_DECIMAL_INTEGER_LITERAL: ("0")|(["1"-"9"](["0"-"9"])*)>

| <TOKEN_OCTAL_INTEGER_LITERAL: "0"(["0"-"7"])+>

| <TOKEN_HEX_INTEGER_LITERAL: ("0x"|"0X")(["0"-"9", "a"-"f", "A"-"F"])+>

| <TOKEN_FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)?
                                  | (["0"-"9"])+ <DECIMAL_EXPONENT>
                                  | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? >
    | <#DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>

| <TOKEN_IMAGINARY_LITERAL: ((<TOKEN_FLOATING_POINT_LITERAL>)|(["0"-"9"])+)"i">

| <TOKEN_RUNE_LITERAL: "'" ( (<UNICODE_VALUE>) | (<BYTE_VALUE>) ) "'">
    | <#UNICODE_VALUE: ( ~["\n"]) | (<LITTLE_U_VALUE>) | (<BIG_U_VALUE>) | (<ESCAPED_CHAR>)>
    | <#BYTE_VALUE: (<OCTAL_BYTE_VALUE>) | (<HEX_BYTE_VALUE>)>
    | <#OCTAL_BYTE_VALUE: "\\" (["0"-"7"]) (["0"-"7"]) (["0"-"7"])>
    | <#HEX_BYTE_VALUE: "\\x" (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])>
    | <#LITTLE_U_VALUE: "\\u" (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])
                              (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])>
    | <#BIG_U_VALUE:  "\\U" (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])
                            (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])
                            (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])
                            (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])>
    | <#ESCAPED_CHAR: "\\" ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "'" | "\"" )>

| <TOKEN_STRING_LITERAL: (<RAW_STRING_LITERAL>) | (<INTERPRETED_STRING_LITERAL>)>
    | <#RAW_STRING_LITERAL: "`" (~[])* "`">
    | <#INTERPRETED_STRING_LITERAL: "\"" ((<UNICODE_VALUE>) | (<BYTE_VALUE>))* "\"">

| <TOKEN_IDENTIFIER: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}


void IntegerLiteral() : {/*@bgen(jjtree) IntegerLiteral */
                          ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) IntegerLiteral */
  try {
/*@egen*/
  t = <TOKEN_DECIMAL_INTEGER_LITERAL>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ { jjtn000.value = t.image; }
| t = <TOKEN_OCTAL_INTEGER_LITERAL>/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { jjtn000.value = t.image; }
| t = <TOKEN_HEX_INTEGER_LITERAL>/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FloatLiteral() : {/*@bgen(jjtree) FloatLiteral */
                        ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FloatLiteral */
  try {
/*@egen*/
  t = <TOKEN_FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImaginaryLiteral() : {/*@bgen(jjtree) ImaginaryLiteral */
                            ASTImaginaryLiteral jjtn000 = new ASTImaginaryLiteral(JJTIMAGINARYLITERAL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ImaginaryLiteral */
  try {
/*@egen*/
  t = <TOKEN_IMAGINARY_LITERAL>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RuneLiteral() : {/*@bgen(jjtree) RuneLiteral */
                       ASTRuneLiteral jjtn000 = new ASTRuneLiteral(JJTRUNELITERAL);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) RuneLiteral */
  try {
/*@egen*/
  t = <TOKEN_RUNE_LITERAL>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StringLiteral() : {/*@bgen(jjtree) StringLiteral */
                         ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) StringLiteral */
  try {
/*@egen*/
  t = <TOKEN_STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Literal()       : {}
{
  /* Base literals */
  (LOOKAHEAD(1000) IntegerLiteral()
| (LOOKAHEAD(1000) FloatLiteral()
| (LOOKAHEAD(1000) ImaginaryLiteral()
| (LOOKAHEAD(1000) RuneLiteral()
| (LOOKAHEAD(1000) StringLiteral()

| (LOOKAHEAD(1000) FunctionLit()

| CompositeLit()
))))))
}

void CompositeLit() : {/*@bgen(jjtree) CompositeLit */
  ASTCompositeLit jjtn000 = new ASTCompositeLit(JJTCOMPOSITELIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompositeLit */
  try {
/*@egen*/
  LiteralType() LiteralValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LiteralType() : {/*@bgen(jjtree) LiteralType */
  ASTLiteralType jjtn000 = new ASTLiteralType(JJTLITERALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LiteralType */
  try {
/*@egen*/
  (LOOKAHEAD(1000) StructType()
| (LOOKAHEAD(1000) ArrayType()
| (LOOKAHEAD(1000) <TOKEN_LSQUAREPAREN> <TOKEN_ELLIPSIS> <TOKEN_RSQUAREPAREN> Type()
| (LOOKAHEAD(1000) SliceType()
| (LOOKAHEAD(1000) MapType()
| TypeName()
)))))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LiteralValue() : {/*@bgen(jjtree) LiteralValue */
  ASTLiteralValue jjtn000 = new ASTLiteralValue(JJTLITERALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LiteralValue */
  try {
/*@egen*/
  <TOKEN_LCURLYBRACE> (LOOKAHEAD(1000) ElementList() (LOOKAHEAD(1000) <TOKEN_COMMA>)? )? <TOKEN_RCURLYBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ElementList() : {/*@bgen(jjtree) ElementList */
  ASTElementList jjtn000 = new ASTElementList(JJTELEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElementList */
  try {
/*@egen*/
  KeyedElement() (LOOKAHEAD(1000) <TOKEN_COMMA> KeyedElement() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void KeyedElement() : {/*@bgen(jjtree) KeyedElement */
  ASTKeyedElement jjtn000 = new ASTKeyedElement(JJTKEYEDELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) KeyedElement */
  try {
/*@egen*/
  (LOOKAHEAD(1000) Key() <TOKEN_COLON>)? Element()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Key() : {/*@bgen(jjtree) Key */
  ASTKey jjtn000 = new ASTKey(JJTKEY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Key */
  try {
/*@egen*/
  (LOOKAHEAD(1000) Identifier()
| (LOOKAHEAD(1000) Expression()
| LiteralValue()
))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Element() : {/*@bgen(jjtree) Element */
  ASTElement jjtn000 = new ASTElement(JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Element */
  try {
/*@egen*/
  (LOOKAHEAD(1000)
  Expression()
| LiteralValue()
)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionLit() : {/*@bgen(jjtree) FunctionLit */
  ASTFunctionLit jjtn000 = new ASTFunctionLit(JJTFUNCTIONLIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionLit */
    try {
/*@egen*/
    <TOKEN_FUNC> Function()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Function() : {/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  Signature() FunctionBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Signature()       : {}
{
  Parameters() (LOOKAHEAD(2) Result() )?
}

void Result() : {/*@bgen(jjtree) Result */
  ASTResult jjtn000 = new ASTResult(JJTRESULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Result */
  try {
/*@egen*/
  LOOKAHEAD(1000)
  Parameters()
| Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Parameters() : {/*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parameters */
  try {
/*@egen*/
  <TOKEN_LPAREN> (ParameterList() (<TOKEN_COMMA>)? )? <TOKEN_RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ParameterList()       : {}
{
  ParameterDecl() (LOOKAHEAD(2) <TOKEN_COMMA> ParameterDecl() )*
}

void ParameterDecl()       : {}
{
  LOOKAHEAD(1000)
  (LOOKAHEAD(2) IdentifierList())? ( <TOKEN_ELLIPSIS> )? Type()
| Type()
}

void IdentifierList() : {/*@bgen(jjtree) IdentifierList */
  ASTIdentifierList jjtn000 = new ASTIdentifierList(JJTIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdentifierList */
  try {
/*@egen*/
  Identifier() (LOOKAHEAD(2)  <TOKEN_COMMA> Identifier() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionBody() : {/*@bgen(jjtree) FunctionBody */
  ASTFunctionBody jjtn000 = new ASTFunctionBody(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionBody */
  try {
/*@egen*/
  Block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeName()       : {}
{
  (LOOKAHEAD(1000)
  QualifiedIdentifier()
| Identifier()
  )
}

void TypeLit()       : {}
{
  (LOOKAHEAD(1000) ArrayType()
| (LOOKAHEAD(1000) StructType()
| (LOOKAHEAD(1000) PointerType()
| (LOOKAHEAD(1000) FunctionType()
| (LOOKAHEAD(1000) InterfaceType()
| (LOOKAHEAD(1000) SliceType()
| (LOOKAHEAD(1000) MapType()
| ChannelType()
)))))))
}

void MapType() : {/*@bgen(jjtree) MapType */
  ASTMapType jjtn000 = new ASTMapType(JJTMAPTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MapType */
  try {
/*@egen*/
  <TOKEN_MAP> <TOKEN_LSQUAREPAREN> Type() <TOKEN_RSQUAREPAREN> Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ChannelType() : {/*@bgen(jjtree) ChannelType */
  ASTChannelType jjtn000 = new ASTChannelType(JJTCHANNELTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ChannelType */
  try {
/*@egen*/
  ( <TOKEN_CHAN> (LOOKAHEAD(2) <TOKEN_LESSMINUS> )? | <TOKEN_LESSMINUS> <TOKEN_CHAN> ) Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayType() : {/*@bgen(jjtree) ArrayType */
  ASTArrayType jjtn000 = new ASTArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayType */
  try {
/*@egen*/
  <TOKEN_LSQUAREPAREN> Expression() <TOKEN_RSQUAREPAREN> Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StructType() : {/*@bgen(jjtree) StructType */
  ASTStructType jjtn000 = new ASTStructType(JJTSTRUCTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StructType */
  try {
/*@egen*/
  <TOKEN_STRUCT> <TOKEN_LCURLYBRACE> (FieldDecl() (LOOKAHEAD(1000) <TOKEN_SEMICOLON>)?)* <TOKEN_RCURLYBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionType() : {/*@bgen(jjtree) FunctionType */
  ASTFunctionType jjtn000 = new ASTFunctionType(JJTFUNCTIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionType */
  try {
/*@egen*/
  <TOKEN_FUNC> Signature()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SliceType() : {/*@bgen(jjtree) SliceType */
  ASTSliceType jjtn000 = new ASTSliceType(JJTSLICETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SliceType */
  try {
/*@egen*/
  <TOKEN_LSQUAREPAREN> <TOKEN_RSQUAREPAREN> Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FieldDecl() : {/*@bgen(jjtree) FieldDecl */
  ASTFieldDecl jjtn000 = new ASTFieldDecl(JJTFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FieldDecl */
   try {
/*@egen*/
   (LOOKAHEAD(2) IdentifierList() Type() | (<TOKEN_MULT>)? TypeName()) (StringLiteral())?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void InterfaceType() : {/*@bgen(jjtree) InterfaceType */
  ASTInterfaceType jjtn000 = new ASTInterfaceType(JJTINTERFACETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceType */
  try {
/*@egen*/
  <TOKEN_INTERFACE> <TOKEN_LCURLYBRACE> ( MethodSpec() (LOOKAHEAD(1000) <TOKEN_SEMICOLON>)? )* <TOKEN_RCURLYBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PointerType() : {/*@bgen(jjtree) PointerType */
  ASTPointerType jjtn000 = new ASTPointerType(JJTPOINTERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PointerType */
  try {
/*@egen*/
  <TOKEN_MULT> Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodSpec() : {/*@bgen(jjtree) MethodSpec */
  ASTMethodSpec jjtn000 = new ASTMethodSpec(JJTMETHODSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodSpec */
  try {
/*@egen*/
  LOOKAHEAD(1000)
  MethodName() Signature()
| InterfaceTypeName()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodName() : {/*@bgen(jjtree) MethodName */
  ASTMethodName jjtn000 = new ASTMethodName(JJTMETHODNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodName */
  try {
/*@egen*/
  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InterfaceTypeName() : {/*@bgen(jjtree) InterfaceTypeName */
  ASTInterfaceTypeName jjtn000 = new ASTInterfaceTypeName(JJTINTERFACETYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceTypeName */
  try {
/*@egen*/
  TypeName()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  (LOOKAHEAD(1000) TypeName()
| (LOOKAHEAD(1000) <TOKEN_LPAREN> Type() <TOKEN_RPAREN>
| TypeLit()))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Block() : {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  <TOKEN_LCURLYBRACE> StatementList() <TOKEN_RCURLYBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StatementList() : {/*@bgen(jjtree) StatementList */
  ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StatementList */
  try {
/*@egen*/
  (LOOKAHEAD(1000) Statement() (<TOKEN_SEMICOLON>)? )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement() : {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  (LOOKAHEAD(1000) LabeledStmt()
| (LOOKAHEAD(1000) Declaration()
| (LOOKAHEAD(1000) SimpleStatement()
| (LOOKAHEAD(1000) GoStmt()
| (LOOKAHEAD(1000) ReturnStmt()
| (LOOKAHEAD(1000) BreakStmt()
| (LOOKAHEAD(1000) ContinueStmt()
| (LOOKAHEAD(1000) GotoStmt()
| (LOOKAHEAD(1000) FallthroughStmt()
| (LOOKAHEAD(1000) Block()
| (LOOKAHEAD(1000) IfStmt()
| (LOOKAHEAD(1000) SwitchStmt()
| (LOOKAHEAD(1000) SelectStmt()
| (LOOKAHEAD(1000) ForStmt()
| DeferStmt()
  ))))))))))))))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LabeledStmt() : {/*@bgen(jjtree) LabeledStmt */
  ASTLabeledStmt jjtn000 = new ASTLabeledStmt(JJTLABELEDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LabeledStmt */
  try {
/*@egen*/
  Label() <TOKEN_COLON> Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void GoStmt() : {/*@bgen(jjtree) GoStmt */
  ASTGoStmt jjtn000 = new ASTGoStmt(JJTGOSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GoStmt */
  try {
/*@egen*/
  <TOKEN_GO> Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReturnStmt() : {/*@bgen(jjtree) ReturnStmt */
  ASTReturnStmt jjtn000 = new ASTReturnStmt(JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStmt */
  try {
/*@egen*/
  <TOKEN_RETURN> (LOOKAHEAD(2) ExpressionList())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BreakStmt() : {/*@bgen(jjtree) BreakStmt */
  ASTBreakStmt jjtn000 = new ASTBreakStmt(JJTBREAKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStmt */
  try {
/*@egen*/
  <TOKEN_BREAK> (LOOKAHEAD(1000) Label())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ContinueStmt() : {/*@bgen(jjtree) ContinueStmt */
  ASTContinueStmt jjtn000 = new ASTContinueStmt(JJTCONTINUESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueStmt */
  try {
/*@egen*/
  <TOKEN_CONTINUE> (LOOKAHEAD(1000) Label())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void GotoStmt() : {/*@bgen(jjtree) GotoStmt */
  ASTGotoStmt jjtn000 = new ASTGotoStmt(JJTGOTOSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GotoStmt */
  try {
/*@egen*/
  <TOKEN_GOTO> (LOOKAHEAD(1000) Label())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FallthroughStmt() : {/*@bgen(jjtree) FallthroughStmt */
  ASTFallthroughStmt jjtn000 = new ASTFallthroughStmt(JJTFALLTHROUGHSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FallthroughStmt */
  try {
/*@egen*/
  <TOKEN_FALLTROUGH>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DeferStmt() : {/*@bgen(jjtree) DeferStmt */
  ASTDeferStmt jjtn000 = new ASTDeferStmt(JJTDEFERSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeferStmt */
  try {
/*@egen*/
  <TOKEN_DEFER> Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ElseStmt() : {/*@bgen(jjtree) ElseStmt */
  ASTElseStmt jjtn000 = new ASTElseStmt(JJTELSESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElseStmt */
  try {
/*@egen*/
  <TOKEN_ELSE> ( IfStmt() | Block() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfStmt() : {/*@bgen(jjtree) IfStmt */
  ASTIfStmt jjtn000 = new ASTIfStmt(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStmt */
  try {
/*@egen*/
  <TOKEN_IF> (LOOKAHEAD(1000) SimpleStatement() <TOKEN_SEMICOLON>)? Expression() Block() ( ElseStmt() )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SelectStmt() : {/*@bgen(jjtree) SelectStmt */
  ASTSelectStmt jjtn000 = new ASTSelectStmt(JJTSELECTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectStmt */
  try {
/*@egen*/
  <TOKEN_SELECT> <TOKEN_LCURLYBRACE>
  (
  (<TOKEN_CASE> (LOOKAHEAD(1000) SendStmt() | RecvStmt()) | <TOKEN_DEFAULT>) <TOKEN_COLON> StatementList()
  )*
  <TOKEN_RCURLYBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RecvStmt() : {/*@bgen(jjtree) RecvStmt */
  ASTRecvStmt jjtn000 = new ASTRecvStmt(JJTRECVSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RecvStmt */
  try {
/*@egen*/
  (LOOKAHEAD(1000)
    ( ExpressionList() <TOKEN_EQUAL> Expression())
  | (LOOKAHEAD(1000) (IdentifierList() <TOKEN_COLONEQUAL> Expression())
  | Expression()))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SendStmt() : {/*@bgen(jjtree) SendStmt */
  ASTSendStmt jjtn000 = new ASTSendStmt(JJTSENDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SendStmt */
  try {
/*@egen*/
  Channel() <TOKEN_LESSMINUS> Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Channel() : {/*@bgen(jjtree) Channel */
  ASTChannel jjtn000 = new ASTChannel(JJTCHANNEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Channel */
  try {
/*@egen*/
  Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SwitchStmt()       : {}
{
  <TOKEN_SWITCH> (LOOKAHEAD(1000) SimpleStatement() <TOKEN_SEMICOLON> )?
  ( LOOKAHEAD(1000) TypeSwitchStmt() | ExprSwitchStmt() )
}

void TypeSwitchStmt() : {/*@bgen(jjtree) TypeSwitchStmt */
  ASTTypeSwitchStmt jjtn000 = new ASTTypeSwitchStmt(JJTTYPESWITCHSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeSwitchStmt */
  try {
/*@egen*/
  (LOOKAHEAD(1000) Identifier() <TOKEN_COLONEQUAL> )? PrimaryExpression() <TOKEN_DOT> <TOKEN_LPAREN> <TOKEN_TYPE> <TOKEN_RPAREN>
  <TOKEN_LCURLYBRACE> ( LOOKAHEAD(1000) TypeCaseClause() )* <TOKEN_RCURLYBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeCaseClause() : {/*@bgen(jjtree) TypeCaseClause */
  ASTTypeCaseClause jjtn000 = new ASTTypeCaseClause(JJTTYPECASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeCaseClause */
  try {
/*@egen*/
  ( (<TOKEN_CASE> Type() (<TOKEN_COMMA> Type())* ) | <TOKEN_DEFAULT>) <TOKEN_COLON> StatementList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExprSwitchStmt() : {/*@bgen(jjtree) ExprSwitchStmt */
  ASTExprSwitchStmt jjtn000 = new ASTExprSwitchStmt(JJTEXPRSWITCHSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExprSwitchStmt */
  try {
/*@egen*/
  (LOOKAHEAD(1000) Expression() )? <TOKEN_LCURLYBRACE> (LOOKAHEAD(1000) ExprCaseClause() )* <TOKEN_RCURLYBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExprCaseClause() : {/*@bgen(jjtree) ExprCaseClause */
  ASTExprCaseClause jjtn000 = new ASTExprCaseClause(JJTEXPRCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExprCaseClause */
  try {
/*@egen*/
  (<TOKEN_CASE> ExpressionList() | <TOKEN_DEFAULT>) <TOKEN_COLON> StatementList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForStmt() : {/*@bgen(jjtree) ForStmt */
  ASTForStmt jjtn000 = new ASTForStmt(JJTFORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStmt */
  try {
/*@egen*/
  <TOKEN_FOR>
  ( LOOKAHEAD(1000) RangeClause()
  | (LOOKAHEAD(1000) ForClause()
  | Condition() )
  )? Block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Condition() : {/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForClause() : {/*@bgen(jjtree) ForClause */
  ASTForClause jjtn000 = new ASTForClause(JJTFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForClause */
  try {
/*@egen*/
  ( SimpleStatement() )? <TOKEN_SEMICOLON> ( Condition() )? <TOKEN_SEMICOLON> ( SimpleStatement() )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RangeClause() : {/*@bgen(jjtree) RangeClause */
  ASTRangeClause jjtn000 = new ASTRangeClause(JJTRANGECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RangeClause */
  try {
/*@egen*/
  (LOOKAHEAD(1000) IdentifierList() <TOKEN_COLONEQUAL>
  | ExpressionList() <TOKEN_EQUAL> ) <TOKEN_RANGE> Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Label() : {/*@bgen(jjtree) Label */
  ASTLabel jjtn000 = new ASTLabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Label */
  try {
/*@egen*/
  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SimpleStatement() : {/*@bgen(jjtree) SimpleStatement */
  ASTSimpleStatement jjtn000 = new ASTSimpleStatement(JJTSIMPLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleStatement */
  try {
/*@egen*/
//EmptyStmt
  (LOOKAHEAD(1000) SendStmt()
| (LOOKAHEAD(1000) IncDecStmt()
| (LOOKAHEAD(1000) ShortVarDecl()
| (LOOKAHEAD(1000) Assignment()
| Expression()
  )))
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ShortVarDecl() : {/*@bgen(jjtree) ShortVarDecl */
  ASTShortVarDecl jjtn000 = new ASTShortVarDecl(JJTSHORTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ShortVarDecl */
  try {
/*@egen*/
//  IdentifierList() <TOKEN_COLONEQUAL> ExpressionList()
  ExpressionList() <TOKEN_COLONEQUAL> ExpressionList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IncDecStmt()       : {}
{
  Expression() (IncStmt() | DecStmt())
}

void IncStmt() : {/*@bgen(jjtree) IncStmt */
  ASTIncStmt jjtn000 = new ASTIncStmt(JJTINCSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IncStmt */
  try {
/*@egen*/
  <TOKEN_PLUSPLUS>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DecStmt() : {/*@bgen(jjtree) DecStmt */
  ASTDecStmt jjtn000 = new ASTDecStmt(JJTDECSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DecStmt */
  try {
/*@egen*/
  <TOKEN_MINNUSMINUS>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Assignment() : {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
  try {
/*@egen*/
  ExpressionList() (<TOKEN_PLUSEQUAL> | <TOKEN_MINUSEQUAL> | <TOKEN_EQUAL> ) ExpressionList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode SourceFile() : {/*@bgen(jjtree) SourceFile */
  ASTSourceFile jjtn000 = new ASTSourceFile(JJTSOURCEFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SourceFile */
  try {
/*@egen*/
  PackageClause() (LOOKAHEAD(1000) <TOKEN_SEMICOLON>)?
  ( ImportDecl() (LOOKAHEAD(1000) <TOKEN_SEMICOLON>)? )*
  ( TopLevelDecl() (LOOKAHEAD(1000) <TOKEN_SEMICOLON>)? )*
  <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PackageClause() : {/*@bgen(jjtree) PackageClause */
  ASTPackageClause jjtn000 = new ASTPackageClause(JJTPACKAGECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PackageClause */
  try {
/*@egen*/
  <TOKEN_PACKAGE> Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImportDecl() : {/*@bgen(jjtree) ImportDecl */
  ASTImportDecl jjtn000 = new ASTImportDecl(JJTIMPORTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportDecl */
  try {
/*@egen*/
  <TOKEN_IMPORT> ( ImportSpec() | <TOKEN_LPAREN> ( ImportSpec() (LOOKAHEAD(1000) <TOKEN_SEMICOLON>)? )* <TOKEN_RPAREN> )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImportSpec()       : {}
{
  ( <TOKEN_DOT> | PackageName() )? ImportPath()
}

void ImportPath() : {/*@bgen(jjtree) ImportPath */
  ASTImportPath jjtn000 = new ASTImportPath(JJTIMPORTPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportPath */
  try {
/*@egen*/
  StringLiteral()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TopLevelDecl() : {/*@bgen(jjtree) TopLevelDecl */
  ASTTopLevelDecl jjtn000 = new ASTTopLevelDecl(JJTTOPLEVELDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TopLevelDecl */
  try {
/*@egen*/
  Declaration()
| <TOKEN_FUNC> (FunctionDecl() | MethodDecl())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodDecl(): {/*@bgen(jjtree) MethodDecl */
  ASTMethodDecl jjtn000 = new ASTMethodDecl(JJTMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDecl */
  try {
/*@egen*/
  Reciever() MethodName() (LOOKAHEAD(1000) Function() | Signature())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Reciever() : {/*@bgen(jjtree) Reciever */
  ASTReciever jjtn000 = new ASTReciever(JJTRECIEVER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Reciever */
  try {
/*@egen*/
  Parameters()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Declaration() : {/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/
  ConstDecl()
|  TypeDecl()
|  VarDecl()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ConstDecl() : {/*@bgen(jjtree) ConstDecl */
  ASTConstDecl jjtn000 = new ASTConstDecl(JJTCONSTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConstDecl */
  try {
/*@egen*/
  <TOKEN_CONST> ( ConstSpec() | <TOKEN_LPAREN> (ConstSpec() (LOOKAHEAD(1000) <TOKEN_SEMICOLON>)?)* <TOKEN_RPAREN>)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeDecl() : {/*@bgen(jjtree) TypeDecl */
  ASTTypeDecl jjtn000 = new ASTTypeDecl(JJTTYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDecl */
  try {
/*@egen*/
  <TOKEN_TYPE> (TypeSpec() | <TOKEN_LPAREN> (TypeSpec() (LOOKAHEAD(1000) <TOKEN_SEMICOLON>)? )* <TOKEN_RPAREN> )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeSpec() : {/*@bgen(jjtree) TypeSpec */
  ASTTypeSpec jjtn000 = new ASTTypeSpec(JJTTYPESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeSpec */
  try {
/*@egen*/
  Identifier() Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ConstSpec() : {/*@bgen(jjtree) ConstSpec */
  ASTConstSpec jjtn000 = new ASTConstSpec(JJTCONSTSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConstSpec */
  try {
/*@egen*/
  IdentifierList() (LOOKAHEAD(1000) (Type())? <TOKEN_EQUAL> ExpressionList() )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VarDecl() : {/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDecl */
  try {
/*@egen*/
  <TOKEN_VAR> (VarSpec() | <TOKEN_LPAREN> (VarSpec() (<TOKEN_SEMICOLON>)? )* <TOKEN_RPAREN>)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VarSpec() : {/*@bgen(jjtree) VarSpec */
  ASTVarSpec jjtn000 = new ASTVarSpec(JJTVARSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarSpec */
  try {
/*@egen*/
  IdentifierList()
  (LOOKAHEAD(1000) ( Type() (<TOKEN_EQUAL> ExpressionList())? )
| ( <TOKEN_EQUAL> ExpressionList() ))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionDecl() : {/*@bgen(jjtree) FunctionDecl */
  ASTFunctionDecl jjtn000 = new ASTFunctionDecl(JJTFUNCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDecl */
  try {
/*@egen*/
  FunctionName() (LOOKAHEAD(1000) Function() | Signature())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionName() : {/*@bgen(jjtree) FunctionName */
  ASTFunctionName jjtn000 = new ASTFunctionName(JJTFUNCTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionName */
  try {
/*@egen*/
  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Identifier() : {/*@bgen(jjtree) Identifier */
                      ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t = <TOKEN_IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PackageName() : {/*@bgen(jjtree) PackageName */
                       ASTPackageName jjtn000 = new ASTPackageName(JJTPACKAGENAME);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) PackageName */
  try {
/*@egen*/
  t = <TOKEN_IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void QualifiedIdentifier()       : {}
{
  PackageName() <TOKEN_DOT> Identifier()
}

void OperandName()       : {}
{
  (LOOKAHEAD(1000)
  QualifiedIdentifier()
| Identifier()
  )
}

void ReceiverType() : {/*@bgen(jjtree) ReceiverType */
  ASTReceiverType jjtn000 = new ASTReceiverType(JJTRECEIVERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReceiverType */
  try {
/*@egen*/
  (<TOKEN_LPAREN> ( ReceiverType() <TOKEN_RPAREN> | <TOKEN_MULT> TypeName() ) <TOKEN_RPAREN> )
| TypeName()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodExpression() : {/*@bgen(jjtree) MethodExpression */
  ASTMethodExpression jjtn000 = new ASTMethodExpression(JJTMETHODEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodExpression */
  try {
/*@egen*/
  ReceiverType() <TOKEN_DOT> MethodName()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Operand() : {/*@bgen(jjtree) Operand */
  ASTOperand jjtn000 = new ASTOperand(JJTOPERAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operand */
  try {
/*@egen*/
  (LOOKAHEAD(1000) OperandName()
| (LOOKAHEAD(1000) MethodExpression()
| (LOOKAHEAD(1000) <TOKEN_LPAREN> Expression() <TOKEN_RPAREN>
| Literal()
  )))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Conversion() : {/*@bgen(jjtree) Conversion */
  ASTConversion jjtn000 = new ASTConversion(JJTCONVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Conversion */
  try {
/*@egen*/
  Type() <TOKEN_LPAREN> Expression() <TOKEN_RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PrimaryExpression() : {/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimaryExpression */
  try {
/*@egen*/
  (LOOKAHEAD(1000)
  Operand() ( LOOKAHEAD(1000) PrimaryExpressionLR() )*
| Conversion() ( LOOKAHEAD(1000) PrimaryExpressionLR() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//to avoid Left Recursion
void PrimaryExpressionLR()       : {}
{
  (LOOKAHEAD(1000) Slice()
| ( LOOKAHEAD(1000) TypeAssertion()
| ( LOOKAHEAD(1000) Arguments()
| ( LOOKAHEAD(1000) Index()
| ( LOOKAHEAD(1000) Selector()
| PrimaryExpression() PrimaryExpressionLR()
  )))))
}

void Slice() : {/*@bgen(jjtree) Slice */
  ASTSlice jjtn000 = new ASTSlice(JJTSLICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Slice */
  try {
/*@egen*/
  <TOKEN_LSQUAREPAREN> ( Expression() )? <TOKEN_COLON>
  (LOOKAHEAD(1000) Expression() <TOKEN_COLON> )? (LOOKAHEAD(1000) Expression() )? <TOKEN_RSQUAREPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeAssertion() : {/*@bgen(jjtree) TypeAssertion */
  ASTTypeAssertion jjtn000 = new ASTTypeAssertion(JJTTYPEASSERTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeAssertion */
  try {
/*@egen*/
  <TOKEN_DOT> <TOKEN_LPAREN> Type() <TOKEN_RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Selector() : {/*@bgen(jjtree) Selector */
  ASTSelector jjtn000 = new ASTSelector(JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Selector */
  try {
/*@egen*/
  <TOKEN_DOT> Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Index() : {/*@bgen(jjtree) Index */
  ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Index */
  try {
/*@egen*/
  <TOKEN_LSQUAREPAREN> Expression() <TOKEN_RSQUAREPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Arguments() : {/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arguments */
  try {
/*@egen*/
  <TOKEN_LPAREN>
  (
  (LOOKAHEAD(1000) ExpressionList() | Type() (LOOKAHEAD(1000) <TOKEN_COMMA> ExpressionList())? )
  (<TOKEN_ELLIPSIS>)? (<TOKEN_COMMA>)?
  )?
  <TOKEN_RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExpressionList() : {/*@bgen(jjtree) ExpressionList */
  ASTExpressionList jjtn000 = new ASTExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionList */
  try {
/*@egen*/
  Expression() (LOOKAHEAD(2) <TOKEN_COMMA> Expression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UnaryExpression()       : { Token t; }
{
  (LOOKAHEAD(1000)
  PrimaryExpression()
| t = <TOKEN_PLUS> UnaryExpression()/*@bgen(jjtree) #UnaryPlus( 1) */
                                     {
                                       ASTUnaryPlus jjtn001 = new ASTUnaryPlus(JJTUNARYPLUS);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  1);
                                       jjtc001 = false;
                                     }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  1);
                                       }
                                     }
/*@egen*/              
| t = <TOKEN_MINUS> UnaryExpression()/*@bgen(jjtree) #UnaryMinus( 1) */
                                      {
                                        ASTUnaryMinus jjtn002 = new ASTUnaryMinus(JJTUNARYMINUS);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn002,  1);
                                        jjtc002 = false;
                                      }
/*@egen*/ { jjtn002.value = t.image; }/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  1);
                                        }
                                      }
/*@egen*/               
| t = <TOKEN_EXCLAMATION> UnaryExpression()/*@bgen(jjtree) #UnaryNot( 1) */
                                            {
                                              ASTUnaryNot jjtn003 = new ASTUnaryNot(JJTUNARYNOT);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn003,  1);
                                              jjtc003 = false;
                                            }
/*@egen*/ { jjtn003.value = t.image; }/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003,  1);
                                              }
                                            }
/*@egen*/             
| t = <TOKEN_XOR> UnaryExpression()/*@bgen(jjtree) #UnaryXor( 1) */
                                    {
                                      ASTUnaryXor jjtn004 = new ASTUnaryXor(JJTUNARYXOR);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn004,  1);
                                      jjtc004 = false;
                                    }
/*@egen*/ { jjtn004.value = t.image; }/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004,  1);
                                      }
                                    }
/*@egen*/             
| t = <TOKEN_MULT> UnaryExpression()/*@bgen(jjtree) #UnaryMult( 1) */
                                     {
                                       ASTUnaryMult jjtn005 = new ASTUnaryMult(JJTUNARYMULT);
                                       boolean jjtc005 = true;
                                       jjtree.openNodeScope(jjtn005);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn005,  1);
                                       jjtc005 = false;
                                     }
/*@egen*/ { jjtn005.value = t.image; }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc005) {
                                         jjtree.closeNodeScope(jjtn005,  1);
                                       }
                                     }
/*@egen*/              
| t = <TOKEN_AND> UnaryExpression()/*@bgen(jjtree) #UnaryAnd( 1) */
                                    {
                                      ASTUnaryAnd jjtn006 = new ASTUnaryAnd(JJTUNARYAND);
                                      boolean jjtc006 = true;
                                      jjtree.openNodeScope(jjtn006);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn006,  1);
                                      jjtc006 = false;
                                    }
/*@egen*/ { jjtn006.value = t.image; }/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc006) {
                                        jjtree.closeNodeScope(jjtn006,  1);
                                      }
                                    }
/*@egen*/             
| t = <TOKEN_LESSMINUS> UnaryExpression()/*@bgen(jjtree) #UnaryLessMinus( 1) */
                                          {
                                            ASTUnaryLessMinus jjtn007 = new ASTUnaryLessMinus(JJTUNARYLESSMINUS);
                                            boolean jjtc007 = true;
                                            jjtree.openNodeScope(jjtn007);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn007,  1);
                                            jjtc007 = false;
                                          }
/*@egen*/ { jjtn007.value = t.image; }/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc007) {
                                              jjtree.closeNodeScope(jjtn007,  1);
                                            }
                                          }
/*@egen*/                   
  )
}

void MultOperators()       : { Token t; }
{
  UnaryExpression() (
    LOOKAHEAD(1000) ((t = <TOKEN_MULT> UnaryExpression()/*@bgen(jjtree) #Mult( 2) */
                                                         {
                                                           ASTMult jjtn001 = new ASTMult(JJTMULT);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                         }
                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                           jjtc001 = false;
                                                         }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001,  2);
                                                           }
                                                         }
/*@egen*/                    )
  | LOOKAHEAD(1000) ((t = <TOKEN_DIV> UnaryExpression()/*@bgen(jjtree) #Div( 2) */
                                                        {
                                                          ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                          jjtc002 = false;
                                                        }
/*@egen*/ { jjtn002.value = t.image; }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002,  2);
                                                          }
                                                        }
/*@egen*/                     )
  | LOOKAHEAD(1000) ((t = <TOKEN_PERCENT> UnaryExpression()/*@bgen(jjtree) #DivInt( 2) */
                                                            {
                                                              ASTDivInt jjtn003 = new ASTDivInt(JJTDIVINT);
                                                              boolean jjtc003 = true;
                                                              jjtree.openNodeScope(jjtn003);
                                                            }
                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn003,  2);
                                                              jjtc003 = false;
                                                            }
/*@egen*/ { jjtn003.value = t.image; }/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc003) {
                                                                jjtree.closeNodeScope(jjtn003,  2);
                                                              }
                                                            }
/*@egen*/                   )
  | LOOKAHEAD(1000) ((t = <TOKEN_LESSLESS> UnaryExpression()/*@bgen(jjtree) #ShiftLeft( 2) */
                                                             {
                                                               ASTShiftLeft jjtn004 = new ASTShiftLeft(JJTSHIFTLEFT);
                                                               boolean jjtc004 = true;
                                                               jjtree.openNodeScope(jjtn004);
                                                             }
                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn004,  2);
                                                               jjtc004 = false;
                                                             }
/*@egen*/ { jjtn004.value = t.image; }/*@bgen(jjtree)*/
                                                             } finally {
                                                               if (jjtc004) {
                                                                 jjtree.closeNodeScope(jjtn004,  2);
                                                               }
                                                             }
/*@egen*/                     )
  | LOOKAHEAD(1000) ((t = <TOKEN_GREATERGREATER> UnaryExpression()/*@bgen(jjtree) #ShiftRight( 2) */
                                                                   {
                                                                     ASTShiftRight jjtn005 = new ASTShiftRight(JJTSHIFTRIGHT);
                                                                     boolean jjtc005 = true;
                                                                     jjtree.openNodeScope(jjtn005);
                                                                   }
                                                                   try {
/*@egen*//*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn005,  2);
                                                                     jjtc005 = false;
                                                                   }
/*@egen*/ { jjtn005.value = t.image; }/*@bgen(jjtree)*/
                                                                   } finally {
                                                                     if (jjtc005) {
                                                                       jjtree.closeNodeScope(jjtn005,  2);
                                                                     }
                                                                   }
/*@egen*/                )
  | LOOKAHEAD(1000) ((t = <TOKEN_AND> UnaryExpression()/*@bgen(jjtree) #And( 2) */
                                                        {
                                                          ASTAnd jjtn006 = new ASTAnd(JJTAND);
                                                          boolean jjtc006 = true;
                                                          jjtree.openNodeScope(jjtn006);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn006,  2);
                                                          jjtc006 = false;
                                                        }
/*@egen*/ { jjtn006.value = t.image; }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc006) {
                                                            jjtree.closeNodeScope(jjtn006,  2);
                                                          }
                                                        }
/*@egen*/                    )
  | LOOKAHEAD(1000) ((t = <TOKEN_ANDXOR> UnaryExpression()/*@bgen(jjtree) #AndXor( 2) */
                                                           {
                                                             ASTAndXor jjtn007 = new ASTAndXor(JJTANDXOR);
                                                             boolean jjtc007 = true;
                                                             jjtree.openNodeScope(jjtn007);
                                                           }
                                                           try {
/*@egen*//*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn007,  2);
                                                             jjtc007 = false;
                                                           }
/*@egen*/ { jjtn007.value = t.image; }/*@bgen(jjtree)*/
                                                           } finally {
                                                             if (jjtc007) {
                                                               jjtree.closeNodeScope(jjtn007,  2);
                                                             }
                                                           }
/*@egen*/                    )
    )))))))
  )*
}

void AddOperators()       : { Token t; }
{
  MultOperators() (
    LOOKAHEAD(2) (
    (t = <TOKEN_PLUS> MultOperators()/*@bgen(jjtree) #Add( 2) */
                                      {
                                        ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtc001 = false;
                                      }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
                                      }
/*@egen*/          )
  | (t = <TOKEN_MINUS> MultOperators()/*@bgen(jjtree) #Sub( 2) */
                                       {
                                         ASTSub jjtn002 = new ASTSub(JJTSUB);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn002,  2);
                                         jjtc002 = false;
                                       }
/*@egen*/ { jjtn002.value = t.image; }/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                         }
                                       }
/*@egen*/         )
  | (t = <TOKEN_OR> MultOperators()/*@bgen(jjtree) #Or( 2) */
                                    {
                                      ASTOr jjtn003 = new ASTOr(JJTOR);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn003,  2);
                                      jjtc003 = false;
                                    }
/*@egen*/ { jjtn003.value = t.image; }/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003,  2);
                                      }
                                    }
/*@egen*/            )
  | (t = <TOKEN_XOR> MultOperators()/*@bgen(jjtree) #Xor( 2) */
                                     {
                                       ASTXor jjtn004 = new ASTXor(JJTXOR);
                                       boolean jjtc004 = true;
                                       jjtree.openNodeScope(jjtn004);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn004,  2);
                                       jjtc004 = false;
                                     }
/*@egen*/ { jjtn004.value = t.image; }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc004) {
                                         jjtree.closeNodeScope(jjtn004,  2);
                                       }
                                     }
/*@egen*/           )
    )
  )*
}

void RelOperators()       : { Token t; }
{
  AddOperators() (
    (t = <TOKEN_EQUALEQUAL> AddOperators()/*@bgen(jjtree) #Equal( 2) */
                                           {
                                             ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                           }
                                           try {
/*@egen*//*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                             jjtc001 = false;
                                           }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                             }
                                           }
/*@egen*/             )
  | (t = <TOKEN_NOTEQUAL> AddOperators()/*@bgen(jjtree) #NotEqual( 2) */
                                         {
                                           ASTNotEqual jjtn002 = new ASTNotEqual(JJTNOTEQUAL);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                         }
                                         try {
/*@egen*//*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                           jjtc002 = false;
                                         }
/*@egen*/ { jjtn002.value = t.image; }/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  2);
                                           }
                                         }
/*@egen*/                  )
  | (t = <TOKEN_LESS> AddOperators()/*@bgen(jjtree) #Less( 2) */
                                     {
                                       ASTLess jjtn003 = new ASTLess(JJTLESS);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn003,  2);
                                       jjtc003 = false;
                                     }
/*@egen*/ { jjtn003.value = t.image; }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  2);
                                       }
                                     }
/*@egen*/                  )
  | (t = <TOKEN_LESSOREQUAL> AddOperators()/*@bgen(jjtree) #LessEqual( 2) */
                                            {
                                              ASTLessEqual jjtn004 = new ASTLessEqual(JJTLESSEQUAL);
                                              boolean jjtc004 = true;
                                              jjtree.openNodeScope(jjtn004);
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn004,  2);
                                              jjtc004 = false;
                                            }
/*@egen*/ { jjtn004.value = t.image; }/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc004) {
                                                jjtree.closeNodeScope(jjtn004,  2);
                                              }
                                            }
/*@egen*/                )
  | (t = <TOKEN_GREATER> AddOperators()/*@bgen(jjtree) #Greater( 2) */
                                        {
                                          ASTGreater jjtn005 = new ASTGreater(JJTGREATER);
                                          boolean jjtc005 = true;
                                          jjtree.openNodeScope(jjtn005);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                          jjtc005 = false;
                                        }
/*@egen*/ { jjtn005.value = t.image; }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc005) {
                                            jjtree.closeNodeScope(jjtn005,  2);
                                          }
                                        }
/*@egen*/                  )
  | (t = <TOKEN_GREATEREQUAL> AddOperators()/*@bgen(jjtree) #GreaterEqual( 2) */
                                             {
                                               ASTGreaterEqual jjtn006 = new ASTGreaterEqual(JJTGREATEREQUAL);
                                               boolean jjtc006 = true;
                                               jjtree.openNodeScope(jjtn006);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn006,  2);
                                               jjtc006 = false;
                                             }
/*@egen*/ { jjtn006.value = t.image; }/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc006) {
                                                 jjtree.closeNodeScope(jjtn006,  2);
                                               }
                                             }
/*@egen*/                  )
  )*
}

void AndAndOperator()       : { Token t; }
{
  RelOperators() (
    (t = <TOKEN_ANDAND> RelOperators()/*@bgen(jjtree) #AndAnd( 2) */
                                       {
                                         ASTAndAnd jjtn001 = new ASTAndAnd(JJTANDAND);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtc001 = false;
                                       }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
                                       }
/*@egen*/            )
  )*
}

void OrOrOperator()       : { Token t; }
{
  AndAndOperator() (
    (t = <TOKEN_OROR> AndAndOperator()/*@bgen(jjtree) #OrOr( 2) */
                                       {
                                         ASTOrOr jjtn001 = new ASTOrOr(JJTOROR);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtc001 = false;
                                       }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
                                       }
/*@egen*/          )
  )*
}

void Expression()       : {}
{
  OrOrOperator()
}
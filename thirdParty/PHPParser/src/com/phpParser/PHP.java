/* Generated By:JavaCC: Do not edit this line. PHP.java */
package com.phpParser;

import java.util.*;

public class PHP implements PHPConstants {


    private int linesOfCode = 0;

    private int numQuestionMarks = 0;
    private int numAnds = 0;
    private int numOr = 0;
    private int numXor = 0;
    private int numCase = 0;
    private int numFor = 0;
    private int numCatch = 0;
    private int numElseif = 0;
    private int numForeach = 0;
    private int numIf = 0;
    private int numWhile = 0;

        private boolean cl;
        private int noaInClass;
        private int nomInClass;
        private int pubMethCount = 0;
        private int pubAttrCount = 0;
        private int locInMet = 0;
        private boolean functSpotted;
        private boolean met;
        private int nom = 0;
    private int noa = 0;
    private boolean functDecl;
    private boolean attrDecl;

//    private static int linesOfCode = 0;
//
//    private static int numQuestionMarks = 0;
//    private static int numAnds = 0;
//    private static int numOr = 0;
//    private static int numXor = 0;
//    private static int numCase = 0;
//    private static int numFor = 0;
//    private static int numCatch = 0;
//    private static int numElseif = 0;
//    private static int numForeach = 0;
//    private static int numIf = 0;
//    private static int numWhile = 0;
//
//	private static boolean cl;
//	private static int noaInClass;
//	private static int nomInClass;
//	private static int pubMethCount = 0;
//	private static int pubAttrCount = 0;
//	private static int locInMet = 0;
//	private static boolean functSpotted;
//	private static boolean met;
//	private static int nom = 0;
//    private static int noa = 0;
//    private static boolean functDecl;
//    private static boolean attrDecl;


    public int getLinesOfCode() {
        return linesOfCode;
    }

    public int getNumQuestionMarks() {
        return numQuestionMarks;
    }

    public int getNumAnds() {
        return numAnds;
    }

    public int getNumOr() {
        return numOr;
    }

    public int getNumXor() {
        return numXor;
    }

    public int getNumCase() {
        return numCase;
    }

    public int getNumFor() {
        return numFor;
    }

    public int getNumCatch() {
        return numCatch;
    }

    public int getNumElseif() {
        return numElseif;
    }

    public int getNumForeach() {
        return numForeach;
    }

    public int getNumIf() {
        return numIf;
    }

    public int getNumWhile() {
        return numWhile;
    }

    public boolean isCl() {
        return cl;
    }

    public int getNoaInClass() {
        return noaInClass;
    }

    public int getNomInClass() {
        return nomInClass;
    }

    public int getPubMethCount() {
        return pubMethCount;
    }

    public int getPubAttrCount() {
        return pubAttrCount;
    }

    public int getLocInMet() {
        return locInMet;
    }

    public boolean isFunctSpotted() {
        return functSpotted;
    }

    public boolean isMet() {
        return met;
    }

    public int getNom() {
        return nom;
    }

    public int getNoa() {
        return noa;
    }

    public boolean isFunctDecl() {
        return functDecl;
    }

    public boolean isAttrDecl() {
        return attrDecl;
    }

    public int getComMultiLined() {
        return token_source.comMultiLined;
    }

    public int getComSingleLined() {
        return token_source.comSingleLined;
    }

        private void setClassTrue(){
            cl = true;
        }

        private void setClassFalse(){
        cl = false;
    }

    private void setInsideMethodTrue(){
        if (functSpotted == true){
            met = true;
        }
    }

    private void setInsideMethodFalse(){
        met = false;
        setFunctDeclSpottedFalse();
    }

    private void increaseNumAttr(boolean publ){

        noa++;

        if(cl == true){
            noaInClass++;
            if(publ == true){
                pubAttrCount++;
            }
        }

    }

    private void increaseNumMetInClass(boolean publ){

            if(cl == true){
                nomInClass++;
                if(publ == true){
                    pubMethCount++;
                }
            }
    }

    private void increaseNumMetCount(){
         nom++;
    }

    private void increaseLinesOfCode(){

        if(met == true && cl == true){
            locInMet++;
        }

    }

    private void setFunctDeclSpottedTrue(){

        functDecl = true;

        functSpotted = true;

    }

    private void setFunctDeclSpottedFalse(){

         functSpotted = false;

    }

    private void increasePubElemCount(){

        if(functDecl == true){

            increaseNumMetInClass(true);
        }

        else if(attrDecl == true){

            increaseNumAttr(true);
        }

    }

    private void setFunctDeclEnd(){
        functDecl = false;
    }

    private void setAttrDeclSpottedTrue(){
             attrDecl = true;
    }

    private void setAttrDeclSpottedFalse(){
            attrDecl = false;
    }

  final public void PhpPage() throws ParseException {
    trace_call("PhpPage");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_EXPR:
        case HTML_OTHER:
        case HTML:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        HtmlBlock();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_BEGIN:
        jj_consume_token(PHP_BEGIN);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case REQUIRE_ONCE:
          case REQUIRE:
          case INCLUDE_ONCE:
          case INCLUDE:
          case DEFINE:
          case ECHO:
          case PRINT:
          case SWITCH:
          case CASE:
          case DFLT:
          case BREAK:
          case RETURN:
          case DO:
          case WHILE:
          case FOREACH:
          case FOR:
          case CONTINUE:
          case IF:
          case FUNCTION:
          case CLASS:
          case VAR:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case ABSTRACT:
          case FINAL:
          case STATIC:
          case INTERFACE:
          case CONST:
          case CLONE:
          case GLOBAL:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case PHP_END:
          case DOLLAR:
          case SEMICOLON:
          case TRY:
          case THROW:
          case IDENTIFIER:
          case 105:
          case 109:
          case 112:
          case 114:
          case 142:
          case 147:
          case 148:
          case 149:
          case 150:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          Statement();
        }
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PhpPage");
    }
  }

  final public void HtmlBlock() throws ParseException {
    trace_call("HtmlBlock");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTML:
        jj_consume_token(HTML);
        break;
      case HTML_OTHER:
        jj_consume_token(HTML_OTHER);
        break;
      case PHP_EXPR:
        jj_consume_token(PHP_EXPR);
        Expression();
        jj_consume_token(PHP_END);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("HtmlBlock");
    }
  }

  final public void Statement() throws ParseException {
    trace_call("Statement");
    try {
      if (jj_2_1(2)) {
        LabeledStatement();
      } else if (jj_2_2(2)) {
        ClassDeclaration();
      } else if (jj_2_3(2)) {
        InterfaceDeclaration();
      } else if (jj_2_4(2)) {
        ExpressionStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 109:
          CompoundStatement();
          break;
        case SWITCH:
        case IF:
          SelectionStatement();
          break;
        case DO:
        case WHILE:
        case FOREACH:
        case FOR:
          IterationStatement();
          break;
        case BREAK:
        case RETURN:
        case CONTINUE:
          JumpStatement();
          break;
        case REQUIRE_ONCE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case INCLUDE:
        case 114:
          IncludeStatement();
          break;
        case ECHO:
        case PRINT:
          EchoStatement();
          break;
        case DEFINE:
          DefineStatement();
          break;
        case FUNCTION:
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case FINAL:
        case STATIC:
        case CONST:
        case GLOBAL:
        case DOLLAR:
          MemberDeclaration();
          break;
        case THROW:
          ThrowStatement();
          break;
        case TRY:
          TryBlock();
          break;
        case PHP_END:
        case SEMICOLON:
          EndOfStatement();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Statement");
    }
  }

  final public void ThrowStatement() throws ParseException {
    trace_call("ThrowStatement");
    try {
      jj_consume_token(THROW);
      ClassInstantiation();
      EndOfStatement();
    } finally {
      trace_return("ThrowStatement");
    }
  }

  final public void TryBlock() throws ParseException {
    trace_call("TryBlock");
    try {
      jj_consume_token(TRY);
      CompoundStatement();
      label_3:
      while (true) {
        jj_consume_token(CATCH);
                                             numCatch++;
        jj_consume_token(105);
        jj_consume_token(IDENTIFIER);
        Variable();
        jj_consume_token(106);
        CompoundStatement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
      }
    } finally {
      trace_return("TryBlock");
    }
  }

  final public void EndOfStatement() throws ParseException {
    trace_call("EndOfStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
             increaseLinesOfCode(); linesOfCode++;
        break;
      case PHP_END:
        EmbeddedHtml();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("EndOfStatement");
    }
  }

  final public void EmbeddedHtml() throws ParseException {
    trace_call("EmbeddedHtml");
    try {
      jj_consume_token(PHP_END);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML_OTHER:
        case HTML:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML:
          jj_consume_token(HTML);
          break;
        case HTML_OTHER:
          jj_consume_token(HTML_OTHER);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_BEGIN:
        jj_consume_token(PHP_BEGIN);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("EmbeddedHtml");
    }
  }

  final public void DefineStatement() throws ParseException {
    trace_call("DefineStatement");
    try {
      jj_consume_token(DEFINE);
      jj_consume_token(105);
      String();
      jj_consume_token(107);
      Expression();
      jj_consume_token(106);
      EndOfStatement();
    } finally {
      trace_return("DefineStatement");
    }
  }

  final public void LabeledStatement() throws ParseException {
    trace_call("LabeledStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
                 numCase++;
        Expression();
        jj_consume_token(108);
        Statement();
        break;
      case DFLT:
        jj_consume_token(DFLT);
        jj_consume_token(108);
        Statement();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("LabeledStatement");
    }
  }

  final public void ExpressionStatement() throws ParseException {
    trace_call("ExpressionStatement");
    try {
      Expression();
      EndOfStatement();
    } finally {
      trace_return("ExpressionStatement");
    }
  }

  final public void CompoundStatement() throws ParseException {
    trace_call("CompoundStatement");
    try {
      jj_consume_token(109);
             setInsideMethodTrue();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case REQUIRE_ONCE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case INCLUDE:
        case DEFINE:
        case ECHO:
        case PRINT:
        case SWITCH:
        case CASE:
        case DFLT:
        case BREAK:
        case RETURN:
        case DO:
        case WHILE:
        case FOREACH:
        case FOR:
        case CONTINUE:
        case IF:
        case FUNCTION:
        case CLASS:
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case FINAL:
        case STATIC:
        case INTERFACE:
        case CONST:
        case CLONE:
        case GLOBAL:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case PHP_END:
        case DOLLAR:
        case SEMICOLON:
        case TRY:
        case THROW:
        case IDENTIFIER:
        case 105:
        case 109:
        case 112:
        case 114:
        case 142:
        case 147:
        case 148:
        case 149:
        case 150:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        Statement();
      }
      jj_consume_token(110);
    } finally {
      trace_return("CompoundStatement");
    }
  }

  final public void SelectionStatement() throws ParseException {
    trace_call("SelectionStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(IF);
              numIf++;
        jj_consume_token(105);
        Expression();
        jj_consume_token(106);
        Statement();
        label_6:
        while (true) {
          if (jj_2_5(2)) {
            ;
          } else {
            break label_6;
          }
          jj_consume_token(ELSEIF);
                                                                                    numElseif++;
          jj_consume_token(105);
          Expression();
          jj_consume_token(106);
          Statement();
        }
        if (jj_2_6(2)) {
          jj_consume_token(ELSE);
          Statement();
        } else {
          ;
        }
        break;
      case SWITCH:
        jj_consume_token(SWITCH);
        jj_consume_token(105);
        Expression();
        jj_consume_token(106);
        Statement();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("SelectionStatement");
    }
  }

  final public void IterationStatement() throws ParseException {
    trace_call("IterationStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
                  numWhile++;
        jj_consume_token(105);
        Expression();
        jj_consume_token(106);
        Statement();
        break;
      case DO:
        jj_consume_token(DO);
        Statement();
        jj_consume_token(WHILE);
                                   numWhile++;
        jj_consume_token(105);
        Expression();
        jj_consume_token(106);
        EndOfStatement();
        break;
      case FOR:
        jj_consume_token(FOR);
                numFor++;
        jj_consume_token(105);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case CLONE:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case DOLLAR:
        case IDENTIFIER:
        case 105:
        case 112:
        case 114:
        case 142:
        case 147:
        case 148:
        case 149:
        case 150:
          Expression();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case CLONE:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case DOLLAR:
        case IDENTIFIER:
        case 105:
        case 112:
        case 114:
        case 142:
        case 147:
        case 148:
        case 149:
        case 150:
          Expression();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case CLONE:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case DOLLAR:
        case IDENTIFIER:
        case 105:
        case 112:
        case 114:
        case 142:
        case 147:
        case 148:
        case 149:
        case 150:
          Expression();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(106);
        Statement();
        break;
      case FOREACH:
        jj_consume_token(FOREACH);
                    numForeach++;
        jj_consume_token(105);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case CLONE:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case DOLLAR:
        case IDENTIFIER:
        case 105:
        case 112:
        case 114:
        case 142:
        case 147:
        case 148:
        case 149:
        case 150:
          Expression();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(AS);
        Variable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 111:
          jj_consume_token(111);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 112:
            jj_consume_token(112);
            break;
          default:
            jj_la1[17] = jj_gen;
            ;
          }
          Variable();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(106);
        Statement();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("IterationStatement");
    }
  }

  final public void JumpStatement() throws ParseException {
    trace_call("JumpStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUE:
        jj_consume_token(CONTINUE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          jj_consume_token(INTEGER_LITERAL);
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        EndOfStatement();
        break;
      case BREAK:
        jj_consume_token(BREAK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          jj_consume_token(INTEGER_LITERAL);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        EndOfStatement();
        break;
      case RETURN:
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case CLONE:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case DOLLAR:
        case IDENTIFIER:
        case 105:
        case 112:
        case 114:
        case 142:
        case 147:
        case 148:
        case 149:
        case 150:
          Expression();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        EndOfStatement();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("JumpStatement");
    }
  }

  final public void ParameterList() throws ParseException {
    trace_call("ParameterList");
    try {
      Parameter();
      label_7:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(107);
        Parameter();
      }
    } finally {
      trace_return("ParameterList");
    }
  }

  final public void Parameter() throws ParseException {
    trace_call("Parameter");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 112:
        jj_consume_token(112);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      Variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 113:
        jj_consume_token(113);
        Expression();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } finally {
      trace_return("Parameter");
    }
  }

  final public void ClassDeclaration() throws ParseException {
    trace_call("ClassDeclaration");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
          break;
        case FINAL:
          jj_consume_token(FINAL);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        jj_consume_token(IDENTIFIER);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 107:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_8;
          }
          jj_consume_token(107);
          jj_consume_token(IDENTIFIER);
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      ClassMembers();
    } finally {
      trace_return("ClassDeclaration");
    }
  }

  final public void ClassMembers() throws ParseException {
    trace_call("ClassMembers");
    try {
      jj_consume_token(109);
             setClassTrue();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case FINAL:
        case STATIC:
        case CONST:
        case GLOBAL:
        case DOLLAR:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_9;
        }
        MemberDeclaration();
      }
      jj_consume_token(110);
                                                           setClassFalse();
    } finally {
      trace_return("ClassMembers");
    }
  }

  final public void MemberDeclaration() throws ParseException {
    trace_call("MemberDeclaration");
    try {
      if (jj_2_8(2147483647)) {
                                                                       setFunctDeclSpottedTrue();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case FINAL:
          case STATIC:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_10;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FINAL:
            jj_consume_token(FINAL);
            break;
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
            Visibility();
            break;
          case STATIC:
            jj_consume_token(STATIC);
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(FUNCTION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 112:
          jj_consume_token(112);
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        jj_consume_token(IDENTIFIER);
        jj_consume_token(105);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLLAR:
        case IDENTIFIER:
        case 112:
          ParameterList();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        jj_consume_token(106);
                                                                                                                                                                                                    setFunctDeclEnd();
        CompoundStatement();
                                                                                                                                                                                                                                             setInsideMethodFalse(); increaseNumMetCount();
      } else if (jj_2_9(2147483647)) {
                                           setAttrDeclSpottedTrue();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
          Visibility();
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(CONST);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(113);
        Expression();
        EndOfStatement();
                                                                                                                                              setAttrDeclSpottedFalse();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case STATIC:
        case DOLLAR:
         setAttrDeclSpottedTrue();
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
            case PUBLIC:
            case PRIVATE:
            case PROTECTED:
            case STATIC:
              ;
              break;
            default:
              jj_la1[38] = jj_gen;
              break label_11;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
              jj_consume_token(VAR);
                                            increasePubElemCount();
              break;
            case PUBLIC:
            case PRIVATE:
            case PROTECTED:
              Visibility();
              break;
            case STATIC:
              jj_consume_token(STATIC);
              break;
            default:
              jj_la1[39] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          Variable();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 113:
            jj_consume_token(113);
            Expression();
            break;
          default:
            jj_la1[40] = jj_gen;
            ;
          }
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 107:
              ;
              break;
            default:
              jj_la1[41] = jj_gen;
              break label_12;
            }
            jj_consume_token(107);
            Variable();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 113:
              jj_consume_token(113);
              Expression();
              break;
            default:
              jj_la1[42] = jj_gen;
              ;
            }
          }
          EndOfStatement();
                                                                                                                                                                                            setAttrDeclSpottedFalse();
          break;
        case GLOBAL:
          jj_consume_token(GLOBAL);
          Variable();
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 107:
              ;
              break;
            default:
              jj_la1[43] = jj_gen;
              break label_13;
            }
            jj_consume_token(107);
            Variable();
          }
          EndOfStatement();
                                                                increaseNumAttr(true);
          break;
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
            Visibility();
            break;
          default:
            jj_la1[44] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STATIC:
            jj_consume_token(STATIC);
            break;
          default:
            jj_la1[45] = jj_gen;
            ;
          }
          jj_consume_token(FUNCTION);
                                                          setFunctDeclSpottedTrue();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 112:
            jj_consume_token(112);
            break;
          default:
            jj_la1[46] = jj_gen;
            ;
          }
          jj_consume_token(IDENTIFIER);
          jj_consume_token(105);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOLLAR:
          case IDENTIFIER:
          case 112:
            ParameterList();
            break;
          default:
            jj_la1[47] = jj_gen;
            ;
          }
          jj_consume_token(106);
                                                                                                                                   setFunctDeclEnd();
          EndOfStatement();
                                                                                                                                                                         setInsideMethodFalse();increaseNumMetCount();
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("MemberDeclaration");
    }
  }

  final public void InterfaceDeclaration() throws ParseException {
    trace_call("InterfaceDeclaration");
    try {
      jj_consume_token(INTERFACE);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        jj_consume_token(IDENTIFIER);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 107:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_14;
          }
          jj_consume_token(107);
          jj_consume_token(IDENTIFIER);
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      InterfaceMembers();
    } finally {
      trace_return("InterfaceDeclaration");
    }
  }

  final public void InterfaceMembers() throws ParseException {
    trace_call("InterfaceMembers");
    try {
      jj_consume_token(109);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case PUBLIC:
        case ABSTRACT:
        case CONST:
        case DOLLAR:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        default:
          jj_la1[52] = jj_gen;
          ;
        }
        InterfaceMember();
        EndOfStatement();
      }
      jj_consume_token(110);
    } finally {
      trace_return("InterfaceMembers");
    }
  }

  final public void InterfaceMember() throws ParseException {
    trace_call("InterfaceMember");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case ABSTRACT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
          break;
        default:
          jj_la1[53] = jj_gen;
          ;
        }
        jj_consume_token(FUNCTION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 112:
          jj_consume_token(112);
          break;
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        jj_consume_token(IDENTIFIER);
        jj_consume_token(105);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLLAR:
        case IDENTIFIER:
        case 112:
          ParameterList();
          break;
        default:
          jj_la1[55] = jj_gen;
          ;
        }
        jj_consume_token(106);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 109:
          jj_consume_token(109);
          jj_consume_token(110);
          break;
        default:
          jj_la1[56] = jj_gen;
          ;
        }
                                                                                          nom++;
        break;
      case DOLLAR:
        jj_consume_token(DOLLAR);
        jj_consume_token(VAR_NAME);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 107:
            ;
            break;
          default:
            jj_la1[57] = jj_gen;
            break label_16;
          }
          jj_consume_token(107);
          jj_consume_token(DOLLAR);
          jj_consume_token(VAR_NAME);
        }
        break;
      case CONST:
        jj_consume_token(CONST);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(113);
        Expression();
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("InterfaceMember");
    }
  }

  final public void IncludeStatement() throws ParseException {
    trace_call("IncludeStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 114:
        jj_consume_token(114);
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        jj_consume_token(INCLUDE);
        break;
      case INCLUDE_ONCE:
        jj_consume_token(INCLUDE_ONCE);
        break;
      case REQUIRE:
        jj_consume_token(REQUIRE);
        break;
      case REQUIRE_ONCE:
        jj_consume_token(REQUIRE_ONCE);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_10(2)) {
        jj_consume_token(105);
        Expression();
        jj_consume_token(106);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case CLONE:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case DOLLAR:
        case IDENTIFIER:
        case 105:
        case 112:
        case 114:
        case 142:
        case 147:
        case 148:
        case 149:
        case 150:
          Expression();
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      EndOfStatement();
    } finally {
      trace_return("IncludeStatement");
    }
  }

  final public void EchoStatement() throws ParseException {
    trace_call("EchoStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ECHO:
        jj_consume_token(ECHO);
        break;
      case PRINT:
        jj_consume_token(PRINT);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ArgumentExpressionList();
      EndOfStatement();
    } finally {
      trace_return("EchoStatement");
    }
  }

  final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
      LogicalTextOrExpression();
    } finally {
      trace_return("Expression");
    }
  }

  final public void LogicalTextOrExpression() throws ParseException {
    trace_call("LogicalTextOrExpression");
    try {
      LogicalTextXorExpression();
      if (jj_2_11(2)) {
        jj_consume_token(OR);
        LogicalTextOrExpression();
      } else {
        ;
      }
    } finally {
      trace_return("LogicalTextOrExpression");
    }
  }

  final public void LogicalTextXorExpression() throws ParseException {
    trace_call("LogicalTextXorExpression");
    try {
      LogicalTextAndExpression();
      if (jj_2_12(2)) {
        jj_consume_token(XOR);
        LogicalTextXorExpression();
      } else {
        ;
      }
    } finally {
      trace_return("LogicalTextXorExpression");
    }
  }

  final public void LogicalTextAndExpression() throws ParseException {
    trace_call("LogicalTextAndExpression");
    try {
      AssignmentExpression();
      if (jj_2_13(2)) {
        jj_consume_token(AND);
        LogicalTextAndExpression();
      } else {
        ;
      }
    } finally {
      trace_return("LogicalTextAndExpression");
    }
  }

  final public void AssignmentExpression() throws ParseException {
    trace_call("AssignmentExpression");
    try {
      ConditionalExpression();
      if (jj_2_14(2)) {
        AssignmentOperator();
        Expression();
      } else {
        ;
      }
    } finally {
      trace_return("AssignmentExpression");
    }
  }

  final public void AssignmentOperator() throws ParseException {
    trace_call("AssignmentOperator");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 113:
        jj_consume_token(113);
        break;
      case 115:
        jj_consume_token(115);
        break;
      case 116:
        jj_consume_token(116);
        break;
      case 117:
        jj_consume_token(117);
        break;
      case 118:
        jj_consume_token(118);
        break;
      case 119:
        jj_consume_token(119);
        break;
      case 120:
        jj_consume_token(120);
        break;
      case 121:
        jj_consume_token(121);
        break;
      case 122:
        jj_consume_token(122);
        break;
      case 123:
        jj_consume_token(123);
        break;
      case 124:
        jj_consume_token(124);
        break;
      case 125:
        jj_consume_token(125);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("AssignmentOperator");
    }
  }

  final public void ConditionalExpression() throws ParseException {
    trace_call("ConditionalExpression");
    try {
      Logical_Or_Expression();
      if (jj_2_15(2)) {
        jj_consume_token(126);
                                                    numQuestionMarks++;
        Expression();
        jj_consume_token(108);
        Expression();
      } else {
        ;
      }
    } finally {
      trace_return("ConditionalExpression");
    }
  }

  final public void Logical_Or_Expression() throws ParseException {
    trace_call("Logical_Or_Expression");
    try {
      Logical_And_Expression();
      if (jj_2_16(2)) {
        jj_consume_token(127);
                                                      numOr++;
        Logical_Or_Expression();
      } else {
        ;
      }
    } finally {
      trace_return("Logical_Or_Expression");
    }
  }

  final public void Logical_And_Expression() throws ParseException {
    trace_call("Logical_And_Expression");
    try {
      BitwiseOrExpression();
      if (jj_2_17(2)) {
        jj_consume_token(128);
                                                   numAnds++;
        Logical_And_Expression();
      } else {
        ;
      }
    } finally {
      trace_return("Logical_And_Expression");
    }
  }

  final public void BitwiseOrExpression() throws ParseException {
    trace_call("BitwiseOrExpression");
    try {
      BitwiseXorExpression();
      if (jj_2_18(2)) {
        jj_consume_token(129);
        BitwiseOrExpression();
      } else {
        ;
      }
    } finally {
      trace_return("BitwiseOrExpression");
    }
  }

  final public void BitwiseXorExpression() throws ParseException {
    trace_call("BitwiseXorExpression");
    try {
      BitwiseAndExpression();
      if (jj_2_19(2)) {
        jj_consume_token(130);
                                                   numXor++;
        BitwiseXorExpression();
      } else {
        ;
      }
    } finally {
      trace_return("BitwiseXorExpression");
    }
  }

  final public void BitwiseAndExpression() throws ParseException {
    trace_call("BitwiseAndExpression");
    try {
      EqualityExpression();
      if (jj_2_20(2)) {
        jj_consume_token(112);
        BitwiseAndExpression();
      } else {
        ;
      }
    } finally {
      trace_return("BitwiseAndExpression");
    }
  }

  final public void EqualityExpression() throws ParseException {
    trace_call("EqualityExpression");
    try {
      RelationalExpression();
      if (jj_2_21(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 131:
          jj_consume_token(131);
          break;
        case 132:
          jj_consume_token(132);
          break;
        case 133:
          jj_consume_token(133);
          break;
        case 134:
          jj_consume_token(134);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        EqualityExpression();
      } else {
        ;
      }
    } finally {
      trace_return("EqualityExpression");
    }
  }

  final public void RelationalExpression() throws ParseException {
    trace_call("RelationalExpression");
    try {
      ShiftExpression();
      if (jj_2_22(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 135:
          jj_consume_token(135);
          break;
        case 136:
          jj_consume_token(136);
          break;
        case 137:
          jj_consume_token(137);
          break;
        case 138:
          jj_consume_token(138);
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RelationalExpression();
      } else {
        ;
      }
    } finally {
      trace_return("RelationalExpression");
    }
  }

  final public void ShiftExpression() throws ParseException {
    trace_call("ShiftExpression");
    try {
      AdditiveExpression();
      if (jj_2_23(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 139:
          jj_consume_token(139);
          break;
        case 140:
          jj_consume_token(140);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ShiftExpression();
      } else {
        ;
      }
    } finally {
      trace_return("ShiftExpression");
    }
  }

  final public void AdditiveExpression() throws ParseException {
    trace_call("AdditiveExpression");
    try {
      MultiplicativeExpression();
      if (jj_2_24(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 141:
          jj_consume_token(141);
          break;
        case 142:
          jj_consume_token(142);
          break;
        case 143:
          jj_consume_token(143);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        AdditiveExpression();
      } else {
        ;
      }
    } finally {
      trace_return("AdditiveExpression");
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    trace_call("MultiplicativeExpression");
    try {
      CastExpression();
      if (jj_2_25(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 144:
          jj_consume_token(144);
          break;
        case 145:
          jj_consume_token(145);
          break;
        case 146:
          jj_consume_token(146);
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      } else {
        ;
      }
    } finally {
      trace_return("MultiplicativeExpression");
    }
  }

  final public void CastExpression() throws ParseException {
    trace_call("CastExpression");
    try {
      if (jj_2_26(2147483647)) {
        jj_consume_token(105);
        jj_consume_token(VARTYPE);
        jj_consume_token(106);
      } else {
        ;
      }
      UnaryExpression();
    } finally {
      trace_return("CastExpression");
    }
  }

  final public void UnaryExpression() throws ParseException {
    trace_call("UnaryExpression");
    try {
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 112:
        case 142:
        case 147:
        case 148:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 112:
          jj_consume_token(112);
          break;
        case 142:
          jj_consume_token(142);
          break;
        case 147:
          jj_consume_token(147);
          break;
        case 148:
          jj_consume_token(148);
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      PrefixIncDecExpression();
    } finally {
      trace_return("UnaryExpression");
    }
  }

  final public void PrefixIncDecExpression() throws ParseException {
    trace_call("PrefixIncDecExpression");
    try {
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 149:
        case 150:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 149:
          jj_consume_token(149);
          break;
        case 150:
          jj_consume_token(150);
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      PostfixIncDecExpression();
    } finally {
      trace_return("PrefixIncDecExpression");
    }
  }

  final public void PostfixIncDecExpression() throws ParseException {
    trace_call("PostfixIncDecExpression");
    try {
      InstanceOfExpression();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 149:
        case 150:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_19;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 149:
          jj_consume_token(149);
          break;
        case 150:
          jj_consume_token(150);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("PostfixIncDecExpression");
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    trace_call("InstanceOfExpression");
    try {
      PostfixExpression();
      if (jj_2_27(2)) {
        jj_consume_token(INSTANCEOF);
        Expression();
      } else {
        ;
      }
    } finally {
      trace_return("InstanceOfExpression");
    }
  }

  final public void PostfixExpression() throws ParseException {
    trace_call("PostfixExpression");
    try {
      PrimaryExpression();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 105:
        case 109:
        case 151:
        case 152:
        case 153:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 105:
          jj_consume_token(105);
          ArgumentExpressionList();
          jj_consume_token(106);
          break;
        case 151:
          jj_consume_token(151);
          PostfixExpression();
          break;
        case 152:
          jj_consume_token(152);
          PostfixExpression();
          break;
        case 153:
          jj_consume_token(153);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case CLONE:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case DOLLAR:
          case IDENTIFIER:
          case 105:
          case 112:
          case 114:
          case 142:
          case 147:
          case 148:
          case 149:
          case 150:
            Expression();
            break;
          default:
            jj_la1[76] = jj_gen;
            ;
          }
          jj_consume_token(154);
          break;
        case 109:
          jj_consume_token(109);
          Expression();
          jj_consume_token(110);
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("PostfixExpression");
    }
  }

  final public void PrimaryExpression() throws ParseException {
    trace_call("PrimaryExpression");
    try {
      if (jj_2_28(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 114:
          jj_consume_token(114);
          break;
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        Variable();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case PREDEFINED_CONSTANT:
        case IDENTIFIER:
        case 114:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 114:
            jj_consume_token(114);
            break;
          default:
            jj_la1[79] = jj_gen;
            ;
          }
          Constant();
          break;
        case 105:
          jj_consume_token(105);
          Expression();
          jj_consume_token(106);
          break;
        case CLONE:
        case NEW:
          ClassInstantiation();
          break;
        case ARRAY:
          Array();
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("PrimaryExpression");
    }
  }

  final public void Array() throws ParseException {
    trace_call("Array");
    try {
      jj_consume_token(ARRAY);
      jj_consume_token(105);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 105:
      case 112:
      case 114:
      case 142:
      case 147:
      case 148:
      case 149:
      case 150:
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 111:
          jj_consume_token(111);
          Expression();
          break;
        default:
          jj_la1[81] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 107:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_21;
        }
        jj_consume_token(107);
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 111:
          jj_consume_token(111);
          Expression();
          break;
        default:
          jj_la1[84] = jj_gen;
          ;
        }
      }
      jj_consume_token(106);
    } finally {
      trace_return("Array");
    }
  }

  final public void ClassInstantiation() throws ParseException {
    trace_call("ClassInstantiation");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        Expression();
        if (jj_2_29(3)) {
          jj_consume_token(105);
          ArgumentExpressionList();
          jj_consume_token(106);
        } else {
          ;
        }
        break;
      case CLONE:
        jj_consume_token(CLONE);
        Variable();
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ClassInstantiation");
    }
  }

  final public void Variable() throws ParseException {
    trace_call("Variable");
    try {
      jj_consume_token(DOLLAR);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLLAR1:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_22;
        }
        jj_consume_token(DOLLAR1);
      }
      jj_consume_token(VAR_NAME);
    } finally {
      trace_return("Variable");
    }
  }

  final public void ArgumentExpressionList() throws ParseException {
    trace_call("ArgumentExpressionList");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 105:
      case 112:
      case 114:
      case 142:
      case 147:
      case 148:
      case 149:
      case 150:
        Expression();
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 107:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_23;
        }
        jj_consume_token(107);
        Expression();
      }
    } finally {
      trace_return("ArgumentExpressionList");
    }
  }

  final public void Constant() throws ParseException {
    trace_call("Constant");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
        String();
        break;
      case PREDEFINED_CONSTANT:
        jj_consume_token(PREDEFINED_CONSTANT);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Constant");
    }
  }

  final public void String() throws ParseException {
    trace_call("String");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_STRING_LITERAL_START:
        DoubleStringLiteral();
        break;
      case SINGLE_STRING_LITERAL_START:
        jj_consume_token(SINGLE_STRING_LITERAL_START);
        jj_consume_token(SINGLE_STRING_LITERAL_END);
        break;
      case HEREDOC_START:
        jj_consume_token(HEREDOC_START);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("String");
    }
  }

  final public void DoubleStringLiteral() throws ParseException {
    trace_call("DoubleStringLiteral");
    try {
      jj_consume_token(DOUBLE_STRING_LITERAL_START);
      if (jj_2_30(2)) {
        jj_consume_token(DSL_SIMPLE_VAR_START);
        jj_consume_token(DSL_SIMPLE_STRING_VAR_END);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE_STRING_LITERAL_END:
        case DSL_SIMPLE_VAR_START:
        case DSL_COMPLEX_VAR_START:
          label_24:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DSL_SIMPLE_VAR_START:
            case DSL_COMPLEX_VAR_START:
              ;
              break;
            default:
              jj_la1[91] = jj_gen;
              break label_24;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DSL_SIMPLE_VAR_START:
              jj_consume_token(DSL_SIMPLE_VAR_START);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DSL_SIMPLE_VAR_END:
                jj_consume_token(DSL_SIMPLE_VAR_END);
                break;
              case DSL_SIMPLE_VAR_WASNT:
                jj_consume_token(DSL_SIMPLE_VAR_WASNT);
                break;
              default:
                jj_la1[92] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            case DSL_COMPLEX_VAR_START:
              jj_consume_token(DSL_COMPLEX_VAR_START);
              jj_consume_token(DSL_COMPLEX_VAR_END);
              break;
            default:
              jj_la1[93] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(DOUBLE_STRING_LITERAL_END);
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("DoubleStringLiteral");
    }
  }

  final public void Visibility() throws ParseException {
    trace_call("Visibility");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
                  increasePubElemCount();
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Visibility");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(THROW)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(DSL_COMPLEX_VAR_START)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(DSL_SIMPLE_VAR_START)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOUBLE_STRING_LITERAL_END)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(DSL_SIMPLE_VAR_START)) return true;
    if (jj_scan_token(DSL_SIMPLE_STRING_VAR_END)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(107)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(DOUBLE_STRING_LITERAL_START)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(SINGLE_STRING_LITERAL_START)) return true;
    if (jj_scan_token(SINGLE_STRING_LITERAL_END)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(109)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(105)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(153)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(152)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(151)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(DOLLAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(100)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(CLONE)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(105)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    }
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) return true;
    }
    }
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(105)) return true;
    if (jj_scan_token(VARTYPE)) return true;
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) return true;
    }
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(105)) return true;
    if (jj_scan_token(VARTYPE)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) return true;
    }
    }
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    }
    }
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(112)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(130)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(129)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(128)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(127)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(105)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_37()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_84()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(GLOBAL)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(107)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(112)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(FOREACH)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(109)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_33()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(108)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(PHP_END)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PHPTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[96];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c,0x1d1000,0x3,0x1c,0x0,0x0,0x0,0x18,0x18,0x3,0x0,0x1d1000,0x0,0x1d1000,0x1d1000,0x1d1000,0x1d1000,0x0,0x0,0x0,0x1000,0x1000,0x1d1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1d1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1d1000,0x0,0x0,0x0,0x1d1000,0x0,0x1d1000,0x0,0x0,0x0,0x0,0x1d1000,0x0,0x1d1000,0x1c0000,0x18000000,0x0,0x18000000,0x1c000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0xbfff8000,0x0,0x0,0xbe7f8000,0x0,0x0,0x0,0x0,0x0,0x1800000,0xbfff8000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0xb8000000,0x0,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78000,0x0,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x7fb7fb03,0x0,0x0,0x7893f903,0x80000000,0x28000000,0x0,0x0,0x0,0x0,0x7fb7fb03,0x2,0x17200000,0x17200000,0x17200000,0x17200000,0x0,0x0,0x0,0x0,0x0,0x17200000,0x1,0x0,0x0,0x0,0x18000,0x18000,0x400,0x0,0x80000,0x1093f900,0x37000,0x37000,0x0,0x10000000,0x7000,0x27800,0x27800,0x0,0x0,0x0,0x0,0x7000,0x20000,0x0,0x10000000,0x1082f800,0x0,0x400,0x10109100,0x1000,0x8000,0x0,0x10000000,0x0,0x0,0x10108100,0x0,0x0,0x17200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17200000,0x0,0x0,0x0,0x7200000,0x0,0x17200000,0x0,0x0,0x2200000,0x0,0x17200000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x7000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x52241,0x0,0x0,0x42001,0x0,0x0,0x0,0x0,0x0,0x0,0x52241,0x0,0x50240,0x50240,0x50240,0x50240,0x10000,0x8000,0x0,0x0,0x0,0x50240,0x0,0x40,0x10000,0x20000,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x10000,0x10040,0x0,0x0,0x0,0x20000,0x800,0x20000,0x800,0x0,0x0,0x10000,0x10040,0x0,0x800,0x0,0x0,0x0,0x0,0x10000,0x10040,0x2000,0x800,0x0,0x40000,0x0,0x50240,0x0,0x3ffa0000,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x2200,0x50240,0x2200,0x40000,0x40000,0x40240,0x8000,0x50240,0x800,0x8000,0x0,0x10,0x50240,0x800,0x40,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x784000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x784000,0x0,0x784000,0x784000,0x784000,0x784000,0x0,0x0,0x0,0x0,0x0,0x784000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x784000,0x0,0x0,0x78,0x780,0x1800,0xe000,0x70000,0x184000,0x184000,0x600000,0x600000,0x600000,0x600000,0x3800000,0x784000,0x3800000,0x0,0x0,0x0,0x0,0x784000,0x0,0x0,0x0,0x0,0x784000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[30];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PHP(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PHP(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PHPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PHP(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PHPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PHP(PHPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PHPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[155];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 96; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 155; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

//    public static int getLinesOfCode() {
//        return linesOfCode;
//    }
//
//    public static int getNumQuestionMarks() {
//        return numQuestionMarks;
//    }
//
//    public static int getNumAnds() {
//        return numAnds;
//    }
//
//    public static int getNumOr() {
//        return numOr;
//    }
//
//    public static int getNumXor() {
//        return numXor;
//    }
//
//    public static int getNumCase() {
//        return numCase;
//    }
//
//    public static int getNumFor() {
//        return numFor;
//    }
//
//    public static int getNumCatch() {
//        return numCatch;
//    }
//
//    public static int getNumElseif() {
//        return numElseif;
//    }
//
//    public static int getNumForeach() {
//        return numForeach;
//    }
//
//    public static int getNumIf() {
//        return numIf;
//    }
//
//    public static int getNumWhile() {
//        return numWhile;
//    }
//
//    public static boolean isCl() {
//        return cl;
//    }
//
//    public static int getNoaInClass() {
//        return noaInClass;
//    }
//
//    public static int getNomInClass() {
//        return nomInClass;
//    }
//
//    public static int getPubMethCount() {
//        return pubMethCount;
//    }
//
//    public static int getPubAttrCount() {
//        return pubAttrCount;
//    }
//
//    public static int getLocInMet() {
//        return locInMet;
//    }
//
//    public static boolean isFunctSpotted() {
//        return functSpotted;
//    }
//
//    public static boolean isMet() {
//        return met;
//    }
//
//    public static int getNom() {
//        return nom;
//    }
//
//    public static int getNoa() {
//        return noa;
//    }
//
//    public static boolean isFunctDecl() {
//        return functDecl;
//    }
//
//    public static boolean isAttrDecl() {
//        return attrDecl;
//    }
//
//    public String getHereDocEnd() {
//        return PHPTokenManager.HereDocEnd;
//    }
//
//    public static int getComMultiLined() {
//        return PHPTokenManager.comMultiLined;
//    }
//
//    public static int getComSingleLined() {
//        return PHPTokenManager.comSingleLined;
//    }
//
//	private static void setClassTrue(){
//	    cl = true;
//	}
//
//	private static void setClassFalse(){
//    	cl = false;
//    }
//
//    private static void setInsideMethodTrue(){
//        if (functSpotted == true){
//            met = true;
//        }
//    }
//
//    private static void setInsideMethodFalse(){
//        met = false;
//        setFunctDeclSpottedFalse();
//    }
//
//    private static void increaseNumAttr(boolean publ){
//
//        noa++;
//
//        if(cl == true){
//            noaInClass++;
//            if(publ == true){
//                pubAttrCount++;
//            }
//        }
//
//    }
//
//    private static void increaseNumMetInClass(boolean publ){
//
//            if(cl == true){
//                nomInClass++;
//                if(publ == true){
//                    pubMethCount++;
//                }
//            }
//    }
//
//    private static void increaseNumMetCount(){
//         nom++;
//    }
//
//    private static void increaseLinesOfCode(){
//
//        if(met == true && cl == true){
//            locInMet++;
//        }
//        else{
//            linesOfCode++;
//        }
//
//    }
//
//    private static void setFunctDeclSpottedTrue(){
//
//        functDecl = true;
//
//        functSpotted = true;
//
//    }
//
//    private static void setFunctDeclSpottedFalse(){
//
//         functSpotted = false;
//
//    }
//
//    private static void increasePubElemCount(){
//
//        if(functDecl == true){
//
//            increaseNumMetInClass(true);
//        }
//
//        else if(attrDecl == true){
//
//            increaseNumAttr(true);
//        }
//
//    }
//
//    private static void setFunctDeclEnd(){
//        functDecl = false;
//    }
//
//    private static void setAttrDeclSpottedTrue(){
//             attrDecl = true;
//         }
//
//    private static void setAttrDeclSpottedFalse(){
//            attrDecl = false;
//        }
}

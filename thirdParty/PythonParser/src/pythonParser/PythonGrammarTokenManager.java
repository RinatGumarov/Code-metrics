package pythonParser;/* PythonGrammarTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. pythonParser.PythonGrammarTokenManager.java */
import java.io.File;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.PrintStream;
import java.io.FileNotFoundException;

/** pythonParser.Token Manager. */
@SuppressWarnings("unused")public class PythonGrammarTokenManager implements PythonGrammarConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x801L) != 0L)
         {
            jjmatchedKind = 93;
            return 27;
         }
         if ((active0 & 0x2010000480L) != 0L)
            return 126;
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 93;
            return 112;
         }
         if ((active1 & 0x18L) != 0L)
         {
            jjmatchedKind = 93;
            return 62;
         }
         if ((active1 & 0x81080L) != 0L)
         {
            jjmatchedKind = 93;
            return 52;
         }
         if ((active0 & 0x801500800L) != 0L)
            return 213;
         if ((active0 & 0x60000300L) != 0L)
            return 123;
         if ((active0 & 0x1000881000L) != 0L)
            return 138;
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x404L) != 0L)
         {
            jjmatchedKind = 93;
            return 84;
         }
         if ((active1 & 0x42L) != 0L)
         {
            jjmatchedKind = 93;
            return 36;
         }
         if ((active0 & 0xcd38018000000000L) != 0L || (active1 & 0x1e120L) != 0L)
         {
            jjmatchedKind = 93;
            return 121;
         }
         if ((active0 & 0x78c03a060L) != 0L)
            return 216;
         if ((active0 & 0x2c0000000000000L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 93;
            return 151;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 217;
         if ((active0 & 0x240000L) != 0L)
            return 218;
         if ((active0 & 0x4000L) != 0L)
            return 5;
         if ((active0 & 0x2000000L) != 0L)
            return 219;
         return -1;
      case 1:
         if ((active1 & 0x80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 1;
            }
            return 51;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 1;
            }
            return 111;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 1;
            }
            return 64;
         }
         if ((active0 & 0x2c8000000000000L) != 0L || (active1 & 0x18000L) != 0L)
            return 121;
         if ((active1 & 0x801L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 1;
            }
            return 14;
         }
         if ((active1 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active0 & 0xcd30018000000000L) != 0L || (active1 & 0xa7574L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 1;
            }
            return 121;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 1;
            }
            return 61;
         }
         if ((active0 & 0x3840001e00L) != 0L)
            return 216;
         if ((active0 & 0x7bfe00000L) != 0L)
            return 5;
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 1;
            }
            return 150;
         }
         return -1;
      case 2:
         if ((active0 & 0x2000000000000000L) != 0L)
            return 220;
         if ((active0 & 0x4030000000000000L) != 0L || (active1 & 0x800L) != 0L)
            return 121;
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 149;
         }
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 60;
         }
         if ((active0 & 0x8d00018000000000L) != 0L || (active1 & 0xaf574L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 121;
         }
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 50;
         }
         if ((active1 & 0x1L) != 0L)
            return 221;
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 110;
         }
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 34;
         }
         if ((active0 & 0x3840000000L) != 0L)
            return 5;
         return -1;
      case 3:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
            return 29;
         }
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
            return 148;
         }
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
            return 54;
         }
         if ((active0 & 0xc00008000000000L) != 0L || (active1 & 0x24410L) != 0L)
            return 121;
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
            return 49;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
            return 86;
         }
         if ((active0 & 0x8100010000000000L) != 0L || (active1 & 0x8b164L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
            return 121;
         }
         return -1;
      case 4:
         if ((active0 & 0x1000000000000000L) != 0L)
            return 91;
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
            return 38;
         }
         if ((active1 & 0x2L) != 0L)
            return 222;
         if ((active0 & 0x8100000000000000L) != 0L || (active1 & 0xa044L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
            return 121;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x81120L) != 0L)
            return 121;
         if ((active1 & 0x8L) != 0L)
            return 55;
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
            return 140;
         }
         return -1;
      case 5:
         if ((active1 & 0x200L) != 0L)
            return 223;
         if ((active1 & 0x44L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 5;
            return 121;
         }
         if ((active0 & 0x8100000000000000L) != 0L || (active1 & 0xa000L) != 0L)
            return 121;
         if ((active1 & 0x80L) != 0L)
            return 224;
         return -1;
      case 6:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 6;
            return 121;
         }
         if ((active1 & 0x4L) != 0L)
            return 121;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 37:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 38:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 41);
      case 41:
         return jjStopAtPos(0, 42);
      case 42:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x2010000400L, 0x0L);
      case 43:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 48);
      case 45:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 49, 217);
      case 47:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x60000200L, 0x0L);
      case 58:
         return jjStopAtPos(0, 50);
      case 59:
         return jjStopAtPos(0, 47);
      case 60:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x801400800L, 0x0L);
      case 61:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 62:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x1000801000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 82);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 45);
      case 93:
         return jjStopAtPos(0, 46);
      case 94:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x18000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x42L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x801L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8c00000000000000L, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x404L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2c0000000000000L, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x81080L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x20000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 123:
         return jjStopAtPos(0, 43);
      case 124:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 44);
      case 126:
         return jjStartNfaWithStates_0(0, 14, 5);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 47:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 60:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 61:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 5);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 5);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 5);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 5);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 5);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 5);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 5);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 5);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 5);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 5);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 5);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 5);
         break;
      case 62:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 5);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100010000000000L, active1, 0x81010L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x881L);
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 121);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20104L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0x2002L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 121);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020000000000000L, active1, 0x40L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 121);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000008000000000L, active1, 0x428L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 121);
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 5);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 5);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 5);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 5);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 121);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4120L);
      case 102:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 221);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000000L, active1, 0x1008L);
      case 108:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 121);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80044L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2400L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 220);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x8010L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 121);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20080L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x24L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x2000L);
      case 99:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 121);
         break;
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 121);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 121);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x8000L);
      case 102:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 121);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 104:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 121);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x100L);
      case 109:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 121);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      case 115:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 121);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x1002L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 121);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 121);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 91);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 121);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 121);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 107:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 121);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8280L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 222);
         break;
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 121);
         break;
      case 108:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 121);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 110:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 224);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 121);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 223);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x40L);
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 216;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 112:
               case 121:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 123:
                  if (curChar == 32)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 47)
                     { jjCheckNAdd(6); }
                  else if (curChar == 61)
                     { jjCheckNAdd(5); }
                  if (curChar == 47)
                     { jjCheckNAdd(5); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 223:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(153, 154); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(141, 142); }
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 213:
                  if (curChar == 62)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 60)
                     { jjCheckNAdd(6); }
                  if (curChar == 62)
                     { jjCheckNAdd(5); }
                  else if (curChar == 61)
                     { jjCheckNAdd(5); }
                  else if (curChar == 60)
                     { jjCheckNAdd(5); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 126:
                  if (curChar == 32)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 42)
                     { jjCheckNAdd(6); }
                  else if (curChar == 61)
                     { jjCheckNAdd(5); }
                  if (curChar == 42)
                     { jjCheckNAdd(5); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 138:
                  if (curChar == 61)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 62)
                     { jjCheckNAdd(6); }
                  if (curChar == 61)
                     { jjCheckNAdd(5); }
                  else if (curChar == 62)
                     { jjCheckNAdd(5); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 32)
                  {
                     if (kind > 86)
                        kind = 86;
                     { jjCheckNAddStates(0, 4); }
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 86)
                        kind = 86;
                  }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  else if (curChar == 40)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 216:
                  if (curChar == 32)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 61)
                     { jjCheckNAdd(5); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 218:
                  if (curChar == 61)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAdd(5); }
                  }
                  if (curChar == 61)
                     { jjCheckNAdd(5); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  else if (curChar == 40)
                     { jjAddStates(8, 9); }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(92, 93); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 221:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 217:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(183, 184); }
                  }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 219:
                  if (curChar == 61)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  if (curChar == 61)
                     { jjCheckNAdd(5); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 20); }
                  else if ((0x7000ac6000000000L & l) != 0L)
                     { jjCheckNAdd(5); }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(183, 187); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(6, 134); }
                  else if (curChar == 32)
                  {
                     if (kind > 1)
                        kind = 1;
                     { jjCheckNAddStates(21, 23); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(24, 26); }
                  else if (curChar == 9)
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAddStates(27, 31); }
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAddStates(32, 37); }
                  }
                  else if (curChar == 61)
                     { jjCheckNAddTwoStates(6, 134); }
                  else if (curChar == 42)
                     { jjCheckNAddStates(38, 40); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(41, 43); }
                  else if (curChar == 38)
                     { jjCheckNAdd(6); }
                  else if (curChar == 37)
                     { jjCheckNAdd(6); }
                  else if (curChar == 45)
                     { jjCheckNAdd(6); }
                  else if (curChar == 43)
                     { jjCheckNAdd(6); }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (curChar == 60)
                     { jjCheckNAddStates(44, 49); }
                  else if (curChar == 62)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 220:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 1:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 9 && kind > 3)
                     kind = 3;
                  break;
               case 4:
                  if ((0x7000ac6000000000L & l) != 0L)
                     { jjCheckNAdd(5); }
                  break;
               case 5:
                  if (curChar != 32)
                     break;
                  if (kind > 4)
                     kind = 4;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
                  if (curChar == 61)
                     { jjCheckNAdd(5); }
                  break;
               case 7:
                  if (curChar == 43)
                     { jjCheckNAdd(6); }
                  break;
               case 8:
                  if (curChar == 45)
                     { jjCheckNAdd(6); }
                  break;
               case 9:
                  if (curChar == 37)
                     { jjCheckNAdd(6); }
                  break;
               case 10:
                  if (curChar == 38)
                     { jjCheckNAdd(6); }
                  break;
               case 13:
                  if ((0x5000000000000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 15:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(54, 55); }
                  break;
               case 18:
                  if (curChar == 40)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 21:
                  if (curChar == 44)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 22:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(63, 65); }
                  break;
               case 25:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if (curChar == 58 && kind > 84)
                     kind = 84;
                  break;
               case 30:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(66, 67); }
                  break;
               case 33:
                  if (curChar == 58 && kind > 85)
                     kind = 85;
                  break;
               case 39:
                  if (curChar != 32)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddStates(68, 70); }
                  break;
               case 42:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddTwoStates(42, 44); }
                  break;
               case 45:
                  if (curChar == 48 && kind > 86)
                     kind = 86;
                  break;
               case 46:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 58:
                  if (curChar == 41 && kind > 87)
                     kind = 87;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(58); }
                  break;
               case 65:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(71, 73); }
                  break;
               case 68:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(68, 83); }
                  break;
               case 70:
                  if (curChar == 32)
                     { jjAddStates(74, 75); }
                  break;
               case 72:
                  if (curChar == 40)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(73, 74); }
                  break;
               case 74:
                  if (curChar == 44)
                     { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 75:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(76, 77); }
                  break;
               case 77:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if (curChar == 58 && kind > 88)
                     kind = 88;
                  break;
               case 88:
                  if (curChar == 58 && kind > 89)
                     kind = 89;
                  break;
               case 92:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(92, 93); }
                  break;
               case 93:
                  if (curChar == 40)
                     { jjAddStates(8, 9); }
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(76, 82); }
                  break;
               case 96:
                  if (curChar == 32)
                     { jjCheckNAddStates(83, 88); }
                  break;
               case 97:
                  if ((0x5000000000000000L & l) != 0L)
                     { jjCheckNAddStates(89, 91); }
                  break;
               case 98:
                  if (curChar == 32)
                     { jjCheckNAddStates(89, 91); }
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(100, 101); }
                  break;
               case 101:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 103:
                  if (curChar == 61)
                     { jjCheckNAddStates(89, 91); }
                  break;
               case 104:
                  if (curChar == 61)
                     { jjCheckNAdd(103); }
                  break;
               case 105:
                  if (curChar == 62)
                     { jjCheckNAdd(103); }
                  break;
               case 106:
                  if (curChar == 33)
                     { jjCheckNAdd(103); }
                  break;
               case 107:
                  if (curChar == 60)
                     { jjCheckNAddTwoStates(103, 108); }
                  break;
               case 108:
                  if (curChar == 62)
                     { jjCheckNAddStates(89, 91); }
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(83, 88); }
                  break;
               case 114:
               case 118:
                  if (curChar == 34)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 115:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 116:
                  if (curChar == 34 && kind > 92)
                     kind = 92;
                  break;
               case 122:
                  if (curChar == 47)
                     { jjCheckNAddStates(41, 43); }
                  break;
               case 124:
                  if (curChar == 47)
                     { jjCheckNAdd(6); }
                  break;
               case 125:
                  if (curChar == 42)
                     { jjCheckNAddStates(38, 40); }
                  break;
               case 127:
                  if (curChar == 42)
                     { jjCheckNAdd(6); }
                  break;
               case 128:
                  if (curChar != 32)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAddStates(21, 23); }
                  break;
               case 129:
                  if (curChar != 32)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAdd(129); }
                  break;
               case 130:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 132:
                  if (curChar == 32 && kind > 3)
                     kind = 3;
                  break;
               case 133:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(6, 134); }
                  break;
               case 134:
                  if (curChar == 61 && kind > 38)
                     kind = 38;
                  break;
               case 135:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(6, 134); }
                  break;
               case 136:
                  if (curChar == 62)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 137:
                  if (curChar == 62)
                     { jjCheckNAdd(5); }
                  break;
               case 141:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(141, 142); }
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAddStates(92, 94); }
                  break;
               case 144:
                  if (curChar == 44)
                     { jjCheckNAddTwoStates(145, 146); }
                  break;
               case 145:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(145, 146); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAddStates(95, 97); }
                  break;
               case 153:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(153, 154); }
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(98, 100); }
                  break;
               case 156:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(156, 162); }
                  break;
               case 158:
                  if (curChar == 32)
                     { jjAddStates(101, 102); }
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  { jjCheckNAddStates(103, 105); }
                  break;
               case 161:
                  if (curChar != 32)
                     break;
                  if (kind > 91)
                     kind = 91;
                  { jjCheckNAddTwoStates(154, 161); }
                  break;
               case 167:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(27, 31); }
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddTwoStates(168, 169); }
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(106, 108); }
                  break;
               case 173:
                  if (curChar != 48)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(32, 37); }
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjAddStates(109, 110); }
                  break;
               case 177:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAddTwoStates(177, 178); }
                  break;
               case 179:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddStates(111, 113); }
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(111, 113); }
                  break;
               case 181:
                  if (curChar == 48)
                     { jjCheckNAdd(172); }
                  break;
               case 182:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(183, 187); }
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(183, 184); }
                  break;
               case 185:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(186); }
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(186); }
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 189:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(190); }
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(190, 172); }
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 20); }
                  break;
               case 192:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(192, 193); }
                  break;
               case 193:
                  if (curChar != 46)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(194, 195); }
                  break;
               case 194:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(194, 195); }
                  break;
               case 196:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(197); }
                  break;
               case 197:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(197); }
                  break;
               case 198:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(198, 199); }
                  break;
               case 200:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(201); }
                  break;
               case 201:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(201); }
                  break;
               case 202:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(202, 203); }
                  break;
               case 204:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(205); }
                  break;
               case 205:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(205, 172); }
                  break;
               case 206:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(206, 207); }
                  break;
               case 207:
                  if (curChar == 46)
                     { jjCheckNAddStates(114, 116); }
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(114, 116); }
                  break;
               case 210:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(211); }
                  break;
               case 211:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(211, 172); }
                  break;
               case 212:
                  if (curChar == 60)
                     { jjCheckNAddStates(44, 49); }
                  break;
               case 214:
                  if (curChar == 60)
                     { jjCheckNAdd(6); }
                  break;
               case 215:
                  if (curChar == 62 && kind > 38)
                     kind = 38;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 112:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 110)
                  {
                     if (kind > 86)
                        kind = 86;
                     { jjCheckNAddStates(0, 4); }
                  }
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 223:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(98, 100); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     { jjCheckNAddStates(92, 94); }
                  }
                  break;
               case 140:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(153, 154); }
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(141, 142); }
                  break;
               case 150:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 164;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 222:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 224:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     { jjCheckNAddStates(68, 70); }
                  }
                  break;
               case 55:
               case 121:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 102)
                     { jjAddStates(117, 118); }
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 149:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 163;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 91:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 114)
                     { jjAddStates(119, 120); }
                  break;
               case 110:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 148:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 152;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 221:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 115)
                     { jjAddStates(121, 122); }
                  break;
               case 111:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 101)
                     { jjAddStates(123, 125); }
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  else if ((0x5000000040000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 105)
                     { jjAddStates(126, 127); }
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 112;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 84;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 62;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 94)
                     { jjCheckNAdd(6); }
                  else if (curChar == 124)
                     { jjCheckNAdd(6); }
                  break;
               case 151:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 165;
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 220:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(121); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(71, 73); }
                  break;
               case 4:
                  if ((0x5000000040000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 11:
                  if (curChar == 124)
                     { jjCheckNAdd(6); }
                  break;
               case 12:
                  if (curChar == 94)
                     { jjCheckNAdd(6); }
                  break;
               case 16:
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 19:
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 23:
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(63, 65); }
                  break;
               case 28:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 31:
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 37:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddStates(68, 70); }
                  break;
               case 43:
               case 44:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddTwoStates(42, 44); }
                  break;
               case 48:
                  if ((0x100000001000L & l) != 0L && kind > 86)
                     kind = 86;
                  break;
               case 53:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 56:
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 63:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 66:
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(71, 73); }
                  break;
               case 69:
                  if (curChar == 110)
                     { jjAddStates(74, 75); }
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 79:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 80:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 85:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 89:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 90:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 94:
               case 95:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(76, 82); }
                  break;
               case 99:
               case 100:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(100, 101); }
                  break;
               case 113:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 115:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 117:
                  if (curChar == 92)
                     { jjAddStates(128, 129); }
                  break;
               case 119:
                  if (curChar == 92)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 120:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(121); }
                  break;
               case 139:
                  if (curChar == 105)
                     { jjAddStates(126, 127); }
                  break;
               case 142:
               case 143:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAddStates(92, 94); }
                  break;
               case 146:
               case 147:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAddStates(95, 97); }
                  break;
               case 152:
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(153, 154); }
                  break;
               case 154:
               case 155:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(98, 100); }
                  break;
               case 157:
                  if (curChar == 115)
                     { jjAddStates(101, 102); }
                  break;
               case 159:
               case 160:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  { jjCheckNAddStates(103, 105); }
                  break;
               case 162:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 163:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 164:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 169:
                  if ((0x100000001000L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 171:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 172:
                  if ((0x40000000400L & l) != 0L && kind > 99)
                     kind = 99;
                  break;
               case 174:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(175); }
                  break;
               case 175:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(175, 176); }
                  break;
               case 176:
                  if ((0x100000001000L & l) != 0L && kind > 96)
                     kind = 96;
                  break;
               case 178:
                  if ((0x100000001000L & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 184:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(130, 131); }
                  break;
               case 188:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(132, 133); }
                  break;
               case 195:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(134, 135); }
                  break;
               case 199:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(136, 137); }
                  break;
               case 203:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(138, 139); }
                  break;
               case 209:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(140, 141); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 115:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(24, 26); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 216 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   39, 40, 42, 45, 46, 56, 59, 58, 94, 109, 187, 188, 172, 192, 193, 198, 
   199, 202, 203, 206, 207, 129, 130, 5, 115, 116, 117, 168, 169, 170, 171, 172, 
   174, 177, 178, 179, 181, 172, 126, 6, 127, 123, 6, 124, 213, 6, 137, 214, 
   134, 215, 137, 6, 138, 134, 17, 18, 19, 21, 25, 19, 20, 21, 25, 21, 
   24, 25, 32, 33, 40, 41, 42, 67, 68, 83, 70, 82, 95, 96, 97, 104, 
   105, 106, 107, 96, 97, 104, 105, 106, 107, 98, 99, 102, 142, 143, 144, 142, 
   144, 147, 155, 156, 162, 158, 159, 154, 160, 161, 170, 171, 172, 175, 176, 180, 
   171, 172, 208, 209, 172, 15, 16, 65, 66, 30, 31, 91, 92, 93, 151, 166, 
   118, 119, 185, 186, 189, 190, 196, 197, 200, 201, 204, 205, 210, 211, 
};

/** pythonParser.Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\53", "\55", "\52", "\57", "\57\57", "\52\52", 
"\74\74", "\76\76", "\45", "\176", "\136", "\174", "\46", "\75", "\76", "\74", "\75\75", 
"\74\75", "\76\75", "\74\76", "\41\75", "\53\75", "\55\75", "\52\75", "\57\75", 
"\57\57\75", "\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", "\76\76\75", 
"\52\52\75", null, "\124\162\165\145", "\106\141\154\163\145", "\50", "\51", "\173", 
"\175", "\133", "\135", "\73", "\54", "\56", "\72", "\157\162", "\141\156\144", 
"\156\157\164", "\151\163", "\151\156", "\154\141\155\142\144\141", "\151\146", 
"\145\154\163\145", "\145\154\151\146", "\167\150\151\154\145", "\146\157\162", "\164\162\171", 
"\145\170\143\145\160\164", "\144\145\146", "\143\154\141\163\163", "\146\151\156\141\154\154\171", 
"\160\162\151\156\164", "\160\141\163\163", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\162\145\164\165\162\156", "\171\151\145\154\144", 
"\151\155\160\157\162\164", "\146\162\157\155", "\144\145\154", "\162\141\151\163\145", 
"\147\154\157\142\141\154", "\145\170\145\143", "\141\163\163\145\162\164", "\141\163", 
"\167\151\164\150", "\100", "\162\141\156\147\145", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next pythonParser.Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public PythonGrammarTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public PythonGrammarTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 216; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xfbfffffffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 
};
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[216];
    private final int[] jjstateSet = new int[2 * 216];

    
    protected char curChar;
}

package pythonParser;/* PythonGrammar.java */
/* Generated By:JavaCC: Do not edit this line. pythonParser.PythonGrammar.java */

import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.PrintStream;
import java.io.FileNotFoundException;

public class PythonGrammar implements PythonGrammarConstants {
    public static int numberLines = 0;
    public static int numberAllTokens = 0;
    public static int numberTokensInLine = 0;
    public static int numberClasses = 0;
    public static int numberImports = 0;
    public static int numberMethods = 0;
    public static int numberReturns = 0;
    public static int numberCycles = 0;

    public static void main(String args[]) throws FileNotFoundException {
        try {
            File pathFile;
            if (args.length > 0) {
                pathFile = new File(args[0]);
            } else {
                pathFile = new File("hello.py");
            }
            BufferedReader br = new BufferedReader(new FileReader(pathFile));
            PythonGrammar parser = new PythonGrammar(br);
            parser.Start(System.out);
        } catch (ParseException e) {

        }
    }

    final public void Start(PrintStream printStream) throws ParseException, NumberFormatException {
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PythonGrammarConstants.INDENT:
                case PythonGrammarConstants.MINUS:
                case PythonGrammarConstants.LPAREN:
                case PythonGrammarConstants.METHOD:
                case PythonGrammarConstants.CLASSNAME:
                case PythonGrammarConstants.RETURNVALUE:
                case PythonGrammarConstants.PRINT_COMMAND:
                case PythonGrammarConstants.CYCLE_FOR:
                case PythonGrammarConstants.CYCLE_WHILE:
                case PythonGrammarConstants.IMPORT_LINE:
                case PythonGrammarConstants.IMPORT_LINE_AS:
                case PythonGrammarConstants.NAME:
                case PythonGrammarConstants.DECNUMBER: {
                    ;
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            Line(printStream);
            EndOfLine(printStream);
        }
        Log(printStream);
        jj_consume_token(0);
    }

    final public void EndOfLine(PrintStream stream) throws ParseException {
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PythonGrammarConstants.EOL: {
                    ;
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
            }
            jj_consume_token(PythonGrammarConstants.EOL);
            numberLines += 1;
        }
    }

    final public void Line(PrintStream stream) throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case PythonGrammarConstants.METHOD:
            case PythonGrammarConstants.CLASSNAME:
            case PythonGrammarConstants.RETURNVALUE:
            case PythonGrammarConstants.PRINT_COMMAND:
            case PythonGrammarConstants.CYCLE_FOR:
            case PythonGrammarConstants.CYCLE_WHILE:
            case PythonGrammarConstants.IMPORT_LINE:
            case PythonGrammarConstants.IMPORT_LINE_AS: {
                Command(stream);
                break;
            }
            case PythonGrammarConstants.INDENT:
            case PythonGrammarConstants.NAME: {
                Code(stream);
                break;
            }
            case PythonGrammarConstants.MINUS:
            case PythonGrammarConstants.LPAREN:
            case PythonGrammarConstants.DECNUMBER: {
                Expression();
                break;
            }
            default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Log(PrintStream stream) throws ParseException {
        int temp = numberTokensInLine;
        numberTokensInLine = 0;
        stream.println("Number lines: " + numberLines);
        stream.println("Number all tokens in file: " + numberAllTokens);
        stream.println("Number imports: " + numberImports);
        stream.println("Number classes in file: " + numberClasses);
        stream.println("Number methods in file: " + numberMethods);
        stream.println("Number return: " + numberReturns);
        stream.println("Number cycles: " + numberCycles);
        {
            if (numberAllTokens < 100) {
                stream.println("Complexity level: low");
            }
            if (numberAllTokens > 100 && numberAllTokens < 150) {
                stream.println("Complexity level: medium");
            }
            if (numberAllTokens > 150) {
                stream.println("Complexity level: high");
            }
        }
        stream.println();
    }

    final public void Code(PrintStream stream) throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case PythonGrammarConstants.INDENT: {
                jj_consume_token(PythonGrammarConstants.INDENT);
                numberTokensInLine += 1;
                numberAllTokens += 1;
                break;
            }
            case PythonGrammarConstants.NAME: {
                label_3:
                while (true) {
                    jj_consume_token(PythonGrammarConstants.NAME);
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case PythonGrammarConstants.NAME: {
                            ;
                            break;
                        }
                        default:
                            jj_la1[3] = jj_gen;
                            break label_3;
                    }
                }
                label_4:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case PythonGrammarConstants.OPERATOR: {
                            ;
                            break;
                        }
                        default:
                            jj_la1[4] = jj_gen;
                            break label_4;
                    }
                    jj_consume_token(PythonGrammarConstants.OPERATOR);
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case PythonGrammarConstants.DECNUMBER: {
                            jj_consume_token(PythonGrammarConstants.DECNUMBER);
                            break;
                        }
                        case PythonGrammarConstants.NAME: {
                            jj_consume_token(PythonGrammarConstants.NAME);
                            break;
                        }
                        default:
                            jj_la1[5] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                numberTokensInLine += 3;
                numberAllTokens += 3;
                break;
            }
            default:
                jj_la1[6] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Command(PrintStream stream) throws ParseException {
        String s;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case PythonGrammarConstants.PRINT_COMMAND: {
                jj_consume_token(PythonGrammarConstants.PRINT_COMMAND);
                numberTokensInLine += 4;
                numberAllTokens += 4;
                break;
            }
            case PythonGrammarConstants.CLASSNAME: {
                jj_consume_token(PythonGrammarConstants.CLASSNAME);
                numberClasses += 1;
                numberTokensInLine += 3;
                numberAllTokens += 3;
                break;
            }
            case PythonGrammarConstants.METHOD: {
                jj_consume_token(PythonGrammarConstants.METHOD);
                numberMethods += 1;
                numberTokensInLine += 8;
                numberAllTokens += 8;
                break;
            }
            case PythonGrammarConstants.RETURNVALUE: {
                jj_consume_token(PythonGrammarConstants.RETURNVALUE);
                numberReturns += 1;
                numberTokensInLine += 3;
                numberAllTokens += 3;
                break;
            }
            case PythonGrammarConstants.CYCLE_FOR: {
                jj_consume_token(PythonGrammarConstants.CYCLE_FOR);
                numberCycles += 1;
                numberTokensInLine += 10;
                numberAllTokens += 10;
                break;
            }
            case PythonGrammarConstants.CYCLE_WHILE: {
                jj_consume_token(PythonGrammarConstants.CYCLE_WHILE);
                numberCycles += 1;
                numberTokensInLine += 7;
                numberAllTokens += 7;
                break;
            }
            case PythonGrammarConstants.IMPORT_LINE: {
                jj_consume_token(PythonGrammarConstants.IMPORT_LINE);
                numberImports += 1;
                break;
            }
            case PythonGrammarConstants.IMPORT_LINE_AS: {
                jj_consume_token(PythonGrammarConstants.IMPORT_LINE_AS);
                numberImports += 1;
                break;
            }
            default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Parameters(PrintStream stream) throws ParseException {
        double d;
        String s;
        jj_consume_token(PythonGrammarConstants.LPAREN);
        s = PrimaryString();
        jj_consume_token(PythonGrammarConstants.RPAREN);
        stream.println(s);
    }

    final public double Expression() throws ParseException, NumberFormatException {
        double i;
        double value;
        value = Term();
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PythonGrammarConstants.PLUS:
                case PythonGrammarConstants.MINUS: {
                    ;
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    break label_5;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PythonGrammarConstants.PLUS: {
                    jj_consume_token(PythonGrammarConstants.PLUS);
                    numberTokensInLine += 1;
                    numberAllTokens += 1;
                    i = Term();
                    value += i;
                    break;
                }
                case PythonGrammarConstants.MINUS: {
                    jj_consume_token(PythonGrammarConstants.MINUS);
                    numberTokensInLine += 1;
                    numberAllTokens += 1;
                    i = Term();
                    value -= i;
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return value;
        }
        throw new Error("Missing return statement in function");
    }

    final public double Term() throws ParseException, NumberFormatException {
        double i;
        double value;
        value = Primary();
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PythonGrammarConstants.MULTIPLY:
                case PythonGrammarConstants.DIVIDE:
                case PythonGrammarConstants.POWER:
                case PythonGrammarConstants.MODULUS: {
                    ;
                    break;
                }
                default:
                    jj_la1[10] = jj_gen;
                    break label_6;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PythonGrammarConstants.MULTIPLY: {
                    jj_consume_token(PythonGrammarConstants.MULTIPLY);
                    numberTokensInLine += 1;
                    numberAllTokens += 1;
                    i = Primary();
                    value *= i;
                    break;
                }
                case PythonGrammarConstants.DIVIDE: {
                    jj_consume_token(PythonGrammarConstants.DIVIDE);
                    numberTokensInLine += 1;
                    numberAllTokens += 1;
                    i = Primary();
                    value /= i;
                    break;
                }
                case PythonGrammarConstants.MODULUS: {
                    jj_consume_token(PythonGrammarConstants.MODULUS);
                    numberTokensInLine += 1;
                    numberAllTokens += 1;
                    i = Primary();
                    value %= i;
                    break;
                }
                case PythonGrammarConstants.POWER: {
                    jj_consume_token(PythonGrammarConstants.POWER);
                    numberTokensInLine += 1;
                    numberAllTokens += 1;
                    i = Primary();
                    value = Math.pow(value, i);
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return value;
        }
        throw new Error("Missing return statement in function");
    }

    final public double Primary() throws ParseException, NumberFormatException {
        Token t;
        double d;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case PythonGrammarConstants.DECNUMBER: {
                t = jj_consume_token(PythonGrammarConstants.DECNUMBER);
                numberTokensInLine += 1;
                numberAllTokens += 1;
                {
                    if ("" != null) return Double.parseDouble(t.image);
                }
                break;
            }
            case PythonGrammarConstants.LPAREN: {
                jj_consume_token(PythonGrammarConstants.LPAREN);
                d = Expression();
                jj_consume_token(PythonGrammarConstants.RPAREN);
                numberTokensInLine += 2;
                numberAllTokens += 2;
                {
                    if ("" != null) return d;
                }
                break;
            }
            case PythonGrammarConstants.MINUS: {
                jj_consume_token(PythonGrammarConstants.MINUS);
                d = Primary();
                numberTokensInLine += 1;
                numberAllTokens += 1;
                {
                    if ("" != null) return -d;
                }
                break;
            }
            default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public String PrimaryString() throws ParseException {
        Token t;
        t = jj_consume_token(PythonGrammarConstants.DECNUMBER);
        {
            if ("" != null) return t.image;
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Generated pythonParser.Token Manager.
     */
    public PythonGrammarTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[13];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x48, 0x4, 0x48, 0x0, 0x10, 0x0, 0x8, 0x0, 0x60, 0x60, 0x2580, 0x2580, 0x40,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x200, 0x0, 0x200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0xaff00000, 0x0, 0xaff00000, 0x20000000, 0x0, 0xa0000000, 0x20000000, 0xff00000, 0x0, 0x0, 0x0, 0x0, 0x80000000,};
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    /**
     * Constructor with InputStream.
     */
    public PythonGrammar(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public PythonGrammar(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new PythonGrammarTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor.
     */
    public PythonGrammar(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new PythonGrammarTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor with generated pythonParser.Token Manager.
     */
    public PythonGrammar(PythonGrammarTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(PythonGrammarTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /**
     * Get the next pythonParser.Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific pythonParser.Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /**
     * Generate pythonParser.ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[102];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 13; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 102; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, PythonGrammarConstants.tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    public static void clean(){
        numberLines = 0;
        numberAllTokens = 0;
        numberTokensInLine = 0;
        numberClasses = 0;
        numberImports = 0;
        numberMethods = 0;
        numberReturns = 0;
        numberCycles = 0;
        jj_la1_0 = null;
        jj_la1_1 = null;
        jj_la1_2 = null;
        jj_la1_3 = null;
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

}

package rubyMetrics;/* Generated By:JavaCC: Do not edit this line. RubyParser15.java */
import java.io.StringReader;
import java.io.InputStream;
import java.io.Reader;
import java.util.ArrayList;


public class RubyParser15 implements RubyParser15Constants {

        private static InputStream input;

        private static boolean inputFromFile = true;

        private static String file1 = Global.filesPath + "code1.rb";
        private static String file2 = Global.filesPath + "code2.rb";
        private static String file3 = Global.filesPath + "code3.rb";
        private static String file4 = Global.filesPath + "code4.rb";
        private static String file5 = Global.filesPath + "code5.rb";
        private static String file6 = Global.filesPath + "code6.rb";
        private static String file7 = Global.filesPath + "code7.rb";

        public int statementCounter = 0;
        public int loopCounter = 0;
        public int conditionsCounter = 0;
        public ArrayList<MyClass > classes = new ArrayList<MyClass >();

        private int classCounter = 0;
        private ArrayList<Method > methods = new ArrayList<Method >();
        private ArrayList<String > attributes = new ArrayList<String >();
        private ArrayList<String > attributesStack = new ArrayList<String >();

        private class Metrics {
                private final static int AMOUNT_OF_METRICS = 23;
                public long metrics[] = new long[AMOUNT_OF_METRICS];
        }

        /*  
	 * A String based constructor for ease of use
	 */
        public RubyParser15(String s) {
                this((Reader)(new StringReader(s)));
        }

        public static void main(String args[]) throws ParseException, TokenMgrError {
                try {
                        //String inputProgram = args[0];
                        //String inputProgram = "def bubble_sort(array) n = array.length loop do swapped = false (n-1).times do |i| if array[i] > array[i+1] array[i], array[i+1] = array[i+1], array[i] swapped = true end end break if not swapped end array end";
                        //String inputProgram = "puts\n";

                        if (inputFromFile) {
                                System.out.println("Reading from file " + file7 + " ...");
                                try {
                                        input = new java.io.FileInputStream(file7);
                                } catch (java.io.FileNotFoundException e) {
                                        System.out.println("File " + file7 + " not found.");
                                        return;
                                }
                        } else {
                                System.out.println("Reading from standard input ...");
                                input = System.in;
                        }

                        RubyParser15 parser = new RubyParser15(input);
                        parser.PROGRAM();
                        System.out.println("Done!");
                       // MetricsCounter metricsCounter = new MetricsCounter(file3);

                }
                catch(ParseException e) {
                        e.printStackTrace();
                                        }
                catch(TokenMgrError e) {
                        e.printStackTrace();
        }
    }

/*
 * @Token
 * number
 */
//TOKEN : { < number : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> > }

/*
 * @Token
 * string
 */
//TOKEN : { < string : ("`" (~[])* "`") | ("\"" (~[])* "\"") >}



//TOKEN: { < string: (<RAW_STRING_LITERAL>) | (<INTERPRETED_STRING_LITERAL>)> }
//TOKEN: { <#RAW_STRING_LITERAL: "`" (~[])* "`"> }
//TOKEN: { <#INTERPRETED_STRING_LITERAL: "\"" ((<UNICODE_VALUE>) | (<BYTE_VALUE>))* "\""> }
//
//TOKEN: { <#UNICODE_VALUE: ( ~["\n"]) | (<LITTLE_U_VALUE>) | (<BIG_U_VALUE>) | (<ESCAPED_CHAR>)> }
//
//TOKEN: { <#BYTE_VALUE: (<OCTAL_BYTE_VALUE>) | (<HEX_BYTE_VALUE>)> }
//TOKEN: {<#OCTAL_BYTE_VALUE: "\\" (["0"-"7"]) (["0"-"7"]) (["0"-"7"])> }
//TOKEN: { <#HEX_BYTE_VALUE: "\\x" (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])> }
//TOKEN: { <#LITTLE_U_VALUE: "\\u" (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])
//                              (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])> }
//TOKEN: { <#BIG_U_VALUE:  "\\U" (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])
//                            (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])
//                            (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])
//                            (["0"-"9", "a"-"f", "A"-"F"]) (["0"-"9", "a"-"f", "A"-"F"])> }
//TOKEN: { <#ESCAPED_CHAR: "\\" ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "'" | "\"" )> }


/*
 * @Production
 * PROGRAM : COMPSTMT
 */
  final public void PROGRAM() throws ParseException {
  System.out.println("PROGRAM()");
    COMPSTMT();
    jj_consume_token(0);
  }

/*
 * @Production
 * COMPSTMT is any amount of statements
 */
  final public void COMPSTMT() throws ParseException {
  System.out.println("COMPSTMT()");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case keyword_begin:
      case keyword_for:
      case keyword_class:
      case keyword_if:
      case keyword_while:
      case keyword_module:
      case keyword_def:
      case keyword_unless:
      case keyword_return:
      case keyword_super:
      case identifier:
      case DIGITS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      STMT();
    }
  }

/*
 * @Production
 * STMT 
 */
  final public void STMT() throws ParseException {
        Token varName = null;
        statementCounter ++;
        System.out.println("STMT() " + statementCounter);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case keyword_class:
      MyClass_BODY();
      break;
    case keyword_module:
      MODULE_BODY();
      break;
    case keyword_def:
      FUNCTION_BODY();
      break;
    case keyword_if:
    case keyword_unless:
      CONDITION_BODY();
      break;
    case keyword_for:
    case keyword_while:
    case DIGITS:
      LOOP_BODY();
      break;
    case keyword_begin:
      EXCEPTION();
      break;
    case keyword_return:
      RETURN();
      break;
    case keyword_super:
    case identifier:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
        varName = jj_consume_token(identifier);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case comma:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          jj_consume_token(comma);
          jj_consume_token(identifier);
        }
        break;
      case keyword_super:
        jj_consume_token(keyword_super);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case dot:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(dot);
        jj_consume_token(identifier);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case equal:
        VARIABLE();
        break;
      case lparen:
      case dot:
      case parameters:
        FUNCTION_CALL();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if (varName != null) {
                        String var = varName.toString();
                        if (var.startsWith("@")) { System.out.println("Attribute: " + var); attributesStack.add(var);}
                        if (var.startsWith("@") && !attributes.contains(var) ) {

                                attributes.add(var);
                        }

                }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MyClass_BODY() throws ParseException {
        Token t_className = null;
        Token t_classNameParent = null;
        Token t_interfaceName = null;
        ArrayList<String > t_interfacesNames = new ArrayList<String >();
        classCounter++;
        System.out.println("MyClass_BODY() " + classCounter);
    jj_consume_token(keyword_class);
    t_className = jj_consume_token(identifier);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case less:
      jj_consume_token(less);
      t_classNameParent = jj_consume_token(identifier);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case include:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(include);
      t_interfaceName = jj_consume_token(identifier);
                                                      if (t_interfaceName != null) {  t_interfacesNames.add(t_interfaceName.toString()); };
    }
    COMPSTMT();
    jj_consume_token(keyword_end);
          MyClass c = new MyClass(t_className + "");
          MyClass parent = new MyClass(t_classNameParent + "");
          c.setParent(parent);
          c.getInterfaces().addAll(t_interfacesNames);
          c.getMethods().addAll(methods);
          c.getAttributes().addAll(attributes);
          methods.clear();
          attributes.clear();
          classes.add(c);
          System.out.println(
          "   class name: " + t_className +
          ";\u0009  parent: " + t_classNameParent +
          ";\u0009  interf: " + t_interfacesNames +
          ";      attributes: " + c.getAttributes());
  }

  final public void MODULE_BODY() throws ParseException {
 { System.out.println("MODULE_BODY()"); }
    jj_consume_token(keyword_module);
    jj_consume_token(identifier);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case less:
      jj_consume_token(less);
      jj_consume_token(identifier);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case include:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(include);
      jj_consume_token(identifier);
    }
    COMPSTMT();
    jj_consume_token(keyword_end);
  }

  final public void FUNCTION_BODY() throws ParseException {
        Token methodName = null;
    jj_consume_token(keyword_def);
    methodName = jj_consume_token(identifier);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case dot:
      jj_consume_token(dot);
      jj_consume_token(identifier);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lparen:
    case parameters:
      ARGS();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    COMPSTMT();
    jj_consume_token(keyword_end);
                Method method = new Method(methodName.toString());
                method.addAttributesUsed(attributesStack);
                attributesStack.clear();
                methods.add(method);
                System.out.println("FUNCTION_BODY() " +  "   " + methods);
  }

  final public void ARGS() throws ParseException {
  System.out.println("ARGS()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lparen:
      jj_consume_token(lparen);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
      case DIGITS:
      case string:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case identifier:
          jj_consume_token(identifier);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case lparen:
          case dot:
          case parameters:
            FUNCTION_CALL();
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          break;
        case string:
          jj_consume_token(string);
          break;
        case DIGITS:
          jj_consume_token(DIGITS);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case plus:
          case minus:
          case star:
          case power:
          case slash:
          case percent:
          case keyword_super:
          case identifier:
          case DIGITS:
          case string:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_6;
          }
          EXPR();
        }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case comma:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_7;
          }
          jj_consume_token(comma);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case identifier:
            jj_consume_token(identifier);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case lparen:
            case dot:
            case parameters:
              FUNCTION_CALL();
              break;
            default:
              jj_la1[16] = jj_gen;
              ;
            }
            break;
          case string:
            jj_consume_token(string);
            break;
          case DIGITS:
            jj_consume_token(DIGITS);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case plus:
            case minus:
            case star:
            case power:
            case slash:
            case percent:
            case keyword_super:
            case identifier:
            case DIGITS:
            case string:
              ;
              break;
            default:
              jj_la1[18] = jj_gen;
              break label_8;
            }
            EXPR();
          }
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(rparen);
      break;
    case parameters:
      jj_consume_token(parameters);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RETURN() throws ParseException {
        Token varName = null;
        System.out.println("RETURN()");
    jj_consume_token(keyword_return);
    if (jj_2_2(100)) {
      varName = jj_consume_token(identifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case lparen:
      case dot:
      case parameters:
        FUNCTION_CALL();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } else if (jj_2_3(100)) {
      CONDITION();
    } else if (jj_2_4(100)) {
      label_9:
      while (true) {
        EXPR();
        if (jj_2_1(100)) {
          ;
        } else {
          break label_9;
        }
      }
    } else if (jj_2_5(100)) {
      jj_consume_token(string);
    } else if (jj_2_6(100)) {
      FUNCTION_CALL();
    } else if (jj_2_7(100)) {
      jj_consume_token(DIGITS);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (varName != null) {
                        String var = varName.toString();
                        if (var.startsWith("@")) { System.out.println("Attribute: " + var);attributesStack.add(var) ;}
                        if (var.startsWith("@") && !attributes.contains(var) ) {

                                attributes.add(var);
                        }

                }
  }

  final public void VARIABLE() throws ParseException {
  Token varName = null;
        System.out.println("VARIABLE()");
    jj_consume_token(equal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case identifier:
    case DIGITS:
    case string:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
        varName = jj_consume_token(identifier);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case lparen:
        case dot:
        case parameters:
          FUNCTION_CALL();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        break;
      case DIGITS:
        jj_consume_token(DIGITS);
        break;
      case string:
        jj_consume_token(string);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_10:
      while (true) {
        if (jj_2_8(100)) {
          ;
        } else {
          break label_10;
        }
        EXPR();
      }
      break;
    case keyword_if:
    case keyword_unless:
    case array:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case keyword_if:
      case keyword_unless:
        CONDITION_BODY();
        break;
      case array:
        jj_consume_token(array);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        if (varName != null) {
                        String var = varName.toString();
                        if (var.startsWith("@")) { System.out.println("Attribute: " + var); attributesStack.add(var);}
                        if (var.startsWith("@") && !attributes.contains(var) ) {

                                attributes.add(var);
                        }

                }
  }

  final public void FUNCTION_CALL() throws ParseException {
  System.out.println("FUNCTION CALL()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lparen:
    case parameters:
      ARGS();
      break;
    case dot:
      jj_consume_token(dot);
      jj_consume_token(identifier);
      FUNCTION_CALL();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CONDITION_BODY() throws ParseException {
        conditionsCounter++;
        System.out.println("CONDITION_BODY()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case keyword_if:
      jj_consume_token(keyword_if);
      CONDITION();
      COMPSTMT();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case keyword_elsif:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_11;
        }
        jj_consume_token(keyword_elsif);
        CONDITION();
        COMPSTMT();
      }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case keyword_then:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_12;
        }
        jj_consume_token(keyword_then);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case string:
          jj_consume_token(string);
          break;
        default:
          jj_la1[29] = jj_gen;
          COMPSTMT();
        }
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case keyword_else:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_13;
        }
        jj_consume_token(keyword_else);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case string:
          jj_consume_token(string);
          break;
        default:
          jj_la1[31] = jj_gen;
          COMPSTMT();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case keyword_end:
        jj_consume_token(keyword_end);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      break;
    case keyword_unless:
      jj_consume_token(keyword_unless);
      CONDITION();
      COMPSTMT();
      jj_consume_token(keyword_end);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CONDITION() throws ParseException {
        System.out.println("CONDITION()");
    if (jj_2_9(100)) {
      jj_consume_token(identifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case lparen:
      case dot:
      case parameters:
        FUNCTION_CALL();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case equal2:
        jj_consume_token(equal2);
        break;
      case exclamationequal:
        jj_consume_token(exclamationequal);
        break;
      case less:
        jj_consume_token(less);
        break;
      case more:
        jj_consume_token(more);
        break;
      case lessorequal:
        jj_consume_token(lessorequal);
        break;
      case moreorequal:
        jj_consume_token(moreorequal);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
        jj_consume_token(identifier);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case lparen:
        case dot:
        case parameters:
          FUNCTION_CALL();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        break;
      case DIGITS:
        jj_consume_token(DIGITS);
        break;
      case string:
        jj_consume_token(string);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case and:
        case or:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case and:
          jj_consume_token(and);
          break;
        case or:
          jj_consume_token(or);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        CONDITION();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case plus:
      case minus:
      case star:
      case power:
      case slash:
      case percent:
      case keyword_super:
      case identifier:
      case DIGITS:
      case string:
        EXPR();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case equal2:
          jj_consume_token(equal2);
          break;
        case exclamationequal:
          jj_consume_token(exclamationequal);
          break;
        case less:
          jj_consume_token(less);
          break;
        case more:
          jj_consume_token(more);
          break;
        case lessorequal:
          jj_consume_token(lessorequal);
          break;
        case moreorequal:
          jj_consume_token(moreorequal);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case identifier:
          jj_consume_token(identifier);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case lparen:
          case dot:
          case parameters:
            FUNCTION_CALL();
            break;
          default:
            jj_la1[41] = jj_gen;
            ;
          }
          break;
        case DIGITS:
          jj_consume_token(DIGITS);
          break;
        case string:
          jj_consume_token(string);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case and:
          case or:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_15;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case and:
            jj_consume_token(and);
            break;
          case or:
            jj_consume_token(or);
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          CONDITION();
        }
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// TODO ����MyClass_BODY()��
  final public void EXPR() throws ParseException {
        Token varName = null;
        System.out.println("EXPR()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case keyword_super:
    case identifier:
    case DIGITS:
    case string:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case keyword_super:
      case identifier:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case identifier:
          varName = jj_consume_token(identifier);
          break;
        case keyword_super:
          jj_consume_token(keyword_super);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case lparen:
        case dot:
        case parameters:
          FUNCTION_CALL();
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        break;
      case string:
        jj_consume_token(string);
        break;
      case DIGITS:
        jj_consume_token(DIGITS);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case plus:
      jj_consume_token(plus);
      break;
    case minus:
      jj_consume_token(minus);
      break;
    case star:
      jj_consume_token(star);
      break;
    case power:
      jj_consume_token(power);
      break;
    case slash:
      jj_consume_token(slash);
      break;
    case percent:
      jj_consume_token(percent);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case keyword_super:
    case identifier:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
        varName = jj_consume_token(identifier);
        break;
      case keyword_super:
        jj_consume_token(keyword_super);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case lparen:
      case dot:
      case parameters:
        FUNCTION_CALL();
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      break;
    case string:
      jj_consume_token(string);
      break;
    case DIGITS:
      jj_consume_token(DIGITS);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (varName != null) {
                        String var = varName.toString();
                        if (var.startsWith("@")) { System.out.println("Attribute: " + var); attributesStack.add(var);}
                        if (var.startsWith("@") && !attributes.contains(var) ) {

                                attributes.add(var);
                        }

                }
  }

  final public void LOOP_BODY() throws ParseException {
  loopCounter++;
  System.out.println("LOOP BODY()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITS:
      jj_consume_token(DIGITS);
      jj_consume_token(dot);
      jj_consume_token(keyword_times);
      jj_consume_token(keyword_do);
      COMPSTMT();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case keyword_end:
        jj_consume_token(keyword_end);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      break;
    case keyword_while:
      jj_consume_token(keyword_while);
      CONDITION();
      COMPSTMT();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case keyword_end:
        jj_consume_token(keyword_end);
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      break;
    case keyword_for:
      jj_consume_token(keyword_for);
      jj_consume_token(identifier);
      jj_consume_token(keyword_in);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
        jj_consume_token(identifier);
        break;
      case lparen:
        jj_consume_token(lparen);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGITS:
          jj_consume_token(DIGITS);
          break;
        case identifier:
          jj_consume_token(identifier);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case lparen:
          case dot:
          case parameters:
            FUNCTION_CALL();
            break;
          default:
            jj_la1[56] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(dot3);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGITS:
          jj_consume_token(DIGITS);
          break;
        case identifier:
          jj_consume_token(identifier);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case lparen:
          case dot:
          case parameters:
            FUNCTION_CALL();
            break;
          default:
            jj_la1[58] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(rparen);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      COMPSTMT();
      jj_consume_token(keyword_end);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EXCEPTION() throws ParseException {
  System.out.println("EXCEPTION()");
    jj_consume_token(keyword_begin);
    COMPSTMT();
    jj_consume_token(keyword_rescue);
    jj_consume_token(identifier);
    jj_consume_token(equalmore);
    jj_consume_token(identifier);
    COMPSTMT();
    jj_consume_token(keyword_end);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_17() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(identifier)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(identifier)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(DIGITS)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(identifier)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(string)) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(identifier)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(comma)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(identifier)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(identifier)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(lparen)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    if (jj_scan_token(rparen)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(dot)) return true;
    if (jj_scan_token(identifier)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_16()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RubyParser15TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[62];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x800,0x0,0x10000000,0x10000200,0x0,0x40000,0x0,0x40000,0x0,0x10000000,0x200,0x10000200,0x0,0x80000000,0x800,0x10000200,0x0,0x80000000,0x0,0x200,0x10000200,0x10000200,0x0,0x0,0x0,0x10000200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000200,0xd44000,0x10000200,0x0,0x0,0x0,0xd44000,0x10000200,0x0,0x0,0x0,0x80000000,0x0,0x10000200,0x0,0x0,0x80000000,0x0,0x10000200,0x0,0x0,0x0,0x10000200,0x0,0x10000200,0x0,0x200,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xe401a000,0x0,0x0,0x0,0x0,0xe401a000,0x0,0x1000000,0x0,0x1000000,0x0,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x10000000,0x400,0x0,0x2000000,0x0,0x20000,0x4000000,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0xc0,0xc0,0x1f,0x0,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x20008000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xa142,0x0,0x2100,0x0,0x40000,0xa142,0x0,0x0,0x0,0x0,0x0,0x40000,0x40000,0x1a000,0x1a100,0x0,0x40000,0x1a000,0x1a100,0x1a000,0x40000,0x40000,0x40000,0x1a000,0x20002,0x3a002,0x40000,0x0,0x0,0x10000,0x0,0x10000,0x0,0x2,0x40000,0x0,0x40000,0x1a000,0x0,0x0,0x0,0x40000,0x1a000,0x0,0x0,0x1a100,0x2100,0x40000,0x1a100,0x1a100,0x0,0x2100,0x40000,0x1a100,0x0,0x0,0x40000,0xa000,0x40000,0xa000,0x2000,0x8000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RubyParser15(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RubyParser15(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RubyParser15TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RubyParser15(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RubyParser15TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RubyParser15(RubyParser15TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RubyParser15TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[115];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 62; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 115; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

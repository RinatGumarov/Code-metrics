package rubyMetrics;/* Generated By:JavaCC: Do not edit this line. RubyParser15TokenManager.java */

/** Token Manager. */
public class RubyParser15TokenManager implements RubyParser15Constants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000L) != 0L)
            return 23;
         if ((active0 & 0xe000000000L) != 0L)
            return 24;
         if ((active0 & 0x400000000L) != 0L)
            return 6;
         if ((active0 & 0x800L) != 0L)
            return 25;
         if ((active1 & 0x1ffffffffe00L) != 0L)
         {
            jjmatchedKind = 109;
            return 26;
         }
         if ((active0 & 0x10000L) != 0L)
            return 26;
         if ((active0 & 0x80000000L) != 0L)
            return 27;
         if ((active0 & 0x1000L) != 0L)
            return 28;
         return -1;
      case 1:
         if ((active1 & 0x1fdff2fffc00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 1;
            }
            return 26;
         }
         if ((active0 & 0xc000000000L) != 0L)
            return 24;
         if ((active1 & 0x200d000200L) != 0L)
            return 26;
         return -1;
      case 2:
         if ((active0 & 0x8000000000L) != 0L)
            return 24;
         if ((active1 & 0x9080129000L) != 0L)
            return 26;
         if ((active1 & 0x1f4f73ed6c00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 2;
            }
            return 26;
         }
         return -1;
      case 3:
         if ((active1 & 0x1f4e71ed3800L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
            return 26;
         }
         if ((active1 & 0x102004400L) != 0L)
            return 26;
         return -1;
      case 4:
         if ((active1 & 0xe4241441800L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
            return 26;
         }
         if ((active1 & 0x110c30a92000L) != 0L)
            return 26;
         return -1;
      case 5:
         if ((active1 & 0x44240400800L) != 0L)
            return 26;
         if ((active1 & 0xa0001041000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 5;
            return 26;
         }
         return -1;
      case 6:
         if ((active1 & 0x20000001000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 6;
            return 26;
         }
         if ((active1 & 0x80001040000L) != 0L)
            return 26;
         return -1;
      case 7:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 7;
            return 26;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 33:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0xc00000000000L, 0x0L);
      case 34:
         return jjStartNfaWithStates_0(0, 11, 25);
      case 36:
         return jjStartNfaWithStates_0(0, 34, 6);
      case 37:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 38:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x40L);
      case 39:
         return jjStartNfaWithStates_0(0, 12, 28);
      case 40:
         return jjStopAtPos(0, 41);
      case 41:
         return jjStopAtPos(0, 42);
      case 42:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x240000L, 0x4L);
      case 43:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x800020000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 43);
      case 45:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x1000400000L, 0x0L);
      case 46:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x80080L, 0x0L);
      case 58:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 60:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x248000008000000L, 0x0L);
      case 61:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x401000060000000L, 0x0L);
      case 62:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0xa0000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 45);
      case 64:
         return jjStartNfaWithStates_0(0, 33, 23);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 91:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 40);
      case 94:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 95:
         return jjStartNfaWithStates_0(0, 16, 26);
      case 96:
         return jjStopAtPos(0, 13);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000800000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x14000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80001200L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x12020800L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xd000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000040000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000400000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000400L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600200000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x120000000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 123:
         return jjStartNfaWithStates_0(0, 31, 27);
      case 124:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x6000000L, 0x80L);
      case 125:
         return jjStopAtPos(0, 32);
      case 126:
         return jjStopAtPos(0, 49);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 46:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 58:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 60:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 61:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000040000000L, active1, 0L);
      case 62:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 64:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 93:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4080403000L);
      case 102:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 90, 26);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x120000400L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100800000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x12810000L);
      case 110:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1601220800L);
      case 111:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 73, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8040008000L);
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 101, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa0000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x50000040000L);
      case 124:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 126:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 62);
         break;
      case 61:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 24);
         break;
      case 62:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 68:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 26);
         break;
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 26);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40200000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x900000400L);
      case 102:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80020800000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000040000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L);
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 26);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x12404800L);
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4400000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(3, 56);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 26);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x110200240000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x410003000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40821000000L);
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 26);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 26);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4040000800L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 26);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active1, 0x80000000000L);
      case 100:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 26);
         break;
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 26);
         return jjMoveStringLiteralDfa5_0(active1, 0x20000000000L);
      case 102:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 26);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x40000000000L);
      case 108:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 26);
         return jjMoveStringLiteralDfa5_0(active1, 0x40000000L);
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 26);
         return jjMoveStringLiteralDfa5_0(active1, 0x1000L);
      case 114:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 26);
         return jjMoveStringLiteralDfa5_0(active1, 0x4000040800L);
      case 115:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 26);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 26);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 26);
         return jjMoveStringLiteralDfa5_0(active1, 0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active1, 0x1400000L);
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 26);
         return jjMoveStringLiteralDfa6_0(active1, 0x20000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active1, 0x1000000L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 26);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 26);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 26);
         return jjMoveStringLiteralDfa6_0(active1, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x40000L);
      case 110:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 26);
         break;
      case 115:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 26);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 26);
         break;
      case 100:
         return jjMoveStringLiteralDfa7_0(active1, 0x1000L);
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 26);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 26);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 63:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(7, 76);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 34)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 26:
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(15, 16);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 36)
                     jjCheckNAdd(6);
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 2);
                  break;
               case 28:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  else if (curChar == 39)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 27:
               case 21:
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 24:
               case 18:
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 8:
                  if (curChar == 36)
                     jjCheckNAdd(6);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 34 && kind > 112)
                     kind = 112;
                  break;
               case 14:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 15:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar == 39 && kind > 112)
                     kind = 112;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 12:
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 26:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  else if (curChar == 123)
                     jjCheckNAddTwoStates(21, 22);
                  else if (curChar == 91)
                     jjCheckNAddTwoStates(18, 19);
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(5, 6);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                  }
                  break;
               case 28:
               case 15:
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 27:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  if (curChar == 125)
                  {
                     if (kind > 114)
                        kind = 114;
                  }
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 24:
                  if ((0xfffffffff7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  if (curChar == 93)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               case 5:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 9:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 17:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xfffffffff7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 93 && kind > 113)
                     kind = 113;
                  break;
               case 20:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 125 && kind > 114)
                     kind = 114;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 28:
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 27:
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 24:
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   1, 2, 4, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\174", "\42", 
"\47", "\140", "\72", "\75", "\137", "\53\75", "\52\75", "\57\75", "\45\75", 
"\52\52\75", "\55\75", "\46\75", "\46\46\75", "\174\75", "\174\174\75", "\74\74\75", 
"\136\75", "\75\75", "\75\75\75", "\173", "\175", "\100", "\44", "\53\100", "\55\100", 
"\133", "\133\135", "\133\135\75", "\135", "\50", "\51", "\54", "\41", "\77", 
"\41\75", "\41\176", "\75\176", "\176", "\74", "\74\74", "\76", "\76\76", "\74\75", 
"\76\75", "\40\76\76\75", "\74\75\76", "\75\76", "\136", "\56", "56", "\56\56\56",
"\53", "\55", "\52", "\52\52", "\57", "\45", "\46", "\46\46", "\174\174", "\72\72", 
"\144\157", "\164\150\145\156", "\145\156\163\165\162\145", 
"\144\145\146\151\156\145\144\77", "\142\145\147\151\156", "\143\141\163\145", "\146\157\162", 
"\143\154\141\163\163", "\145\156\144", "\156\165\155\145\162\151\143", "\102\105\107\111\116", 
"\105\116\104", "\165\156\144\145\146", "\162\145\163\143\165\145", "\141\154\151\141\163", 
"\151\156\143\154\165\144\145", "\145\154\163\145", "\151\146", "\151\156", "\145\154\163\151\146", 
"\167\150\151\154\145", "\155\157\144\165\154\145", "\144\145\146", "\167\150\145\156", 
"\165\156\154\145\163\163", "\165\156\164\151\154", "\171\151\145\154\144", "\141\156\144", "\157\162", 
"\162\145\164\165\162\156", "\156\157\164", "\163\165\160\145\162", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\160\162\151\166\141\164\145", 
"\164\151\155\145\163", null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0x7ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3feL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[23];
private final int[] jjstateSet = new int[46];
protected char curChar;
/** Constructor. */
public RubyParser15TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public RubyParser15TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 59 && (0x800000000002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 9)
       {
          jjmatchedKind = 9;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
